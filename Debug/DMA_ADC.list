
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009968  08009968  00019968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009ea4  08009ea4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ea4  08009ea4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          0000030c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d3c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036b5  00000000  00000000  00037f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c7b  00000000  00000000  0003dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7fe  00000000  00000000  000618a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd14f  00000000  00000000  0007d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a1f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006354  00000000  00000000  0014a240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009950 	.word	0x08009950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009950 	.word	0x08009950

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Set_Pin_Output>:

	/*Zmienne do obsługi czujnika DTH11 */


	/*=============================Ustaw PA6 jako wyjście=============================*/
	void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f002 fe24 	bl	8003824 <HAL_GPIO_Init>
	}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Set_Pin_Input>:
	/*=============================Ustaw PA6 jako wejście=============================*/
	void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f002 fe06 	bl	8003824 <HAL_GPIO_Init>
	}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DHT11sensorInit>:


	/*=============================Inicjalizuj czujnik=============================*/
	void DHT11sensorInit(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
		Set_Pin_Output (PORT_A, DHT11_PIN); 		// Ustaw PIN jako wyjście
 8000c24:	2110      	movs	r1, #16
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f7ff ffbd 	bl	8000ba8 <Set_Pin_Output>
		HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 0);   // Stan niski na pinie
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2110      	movs	r1, #16
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 ff7f 	bl	8003b38 <HAL_GPIO_WritePin>
		delay_us (18000);   						// Poczekaj 18ms
 8000c3a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c3e:	f001 f9d7 	bl	8001ff0 <delay_us>
	    HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 1);   // Stan wysoki na pinie
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f002 ff75 	bl	8003b38 <HAL_GPIO_WritePin>
		delay_us (20);   							// Poczekaj 20us
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f001 f9ce 	bl	8001ff0 <delay_us>
		Set_Pin_Input(PORT_A, DHT11_PIN);   		// Ustaw jako wejście
 8000c54:	2110      	movs	r1, #16
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f7ff ffc3 	bl	8000be4 <Set_Pin_Input>
	}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <sensorResponse>:


	/*=============================Odpowiedź czujnika=============================*/
	uint8_t sensorResponse(void){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
		uint8_t Response = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
		delay_us (40); 												// Poczekaj 40us
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f001 f9bf 	bl	8001ff0 <delay_us>
		/*Sprawdź czy czujnik ma odpowiedź, w przeciwnym razie daj błąd*/
		if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))){
 8000c72:	2110      	movs	r1, #16
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f002 ff46 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <sensorResponse+0x40>
			delay_us (80); 											//Zaczekaj 80us
 8000c82:	2050      	movs	r0, #80	; 0x50
 8000c84:	f001 f9b4 	bl	8001ff0 <delay_us>
			if ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))) Response = 1;
 8000c88:	2110      	movs	r1, #16
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f002 ff3b 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <sensorResponse+0x3c>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e001      	b.n	8000ca2 <sensorResponse+0x40>
			else Response = -1; 									// 255
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));     		// Poczekaj na pin aż przejdzie w stan niski
 8000ca2:	bf00      	nop
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f002 ff2d 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f7      	bne.n	8000ca4 <sensorResponse+0x42>

		return Response;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
	}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <sensorRead>:

	/*=============================Odczyt=============================*/
	uint8_t sensorRead(void){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
		uint8_t i,j;
		for (j=0;j<8;j++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71bb      	strb	r3, [r7, #6]
 8000cc8:	e03a      	b.n	8000d40 <sensorRead+0x82>
		{
			while (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // Poczekaj na stan wysoki pinu
 8000cca:	bf00      	nop
 8000ccc:	2110      	movs	r1, #16
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 ff19 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f7      	beq.n	8000ccc <sensorRead+0xe>
			delay_us (40);   								   // Poczekaj 40us
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f001 f987 	bl	8001ff0 <delay_us>
			if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)))  	   // Jeśli pin jest wysoki
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 ff0e 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10e      	bne.n	8000d10 <sensorRead+0x52>
			{
				i&= ~(1<<(7-j));   							   // Zapisz 0 bitowo w rejestrze
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f1c3 0307 	rsb	r3, r3, #7
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e00b      	b.n	8000d28 <sensorRead+0x6a>
			}
			else i|= (1<<(7-j));  							   // Jeśli pin jest w stanie wysokim, zapisz 1
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));    // Poczekaj na stan niski pinu
 8000d28:	bf00      	nop
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f002 feea 	bl	8003b08 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f7      	bne.n	8000d2a <sensorRead+0x6c>
		for (j=0;j<8;j++)
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	71bb      	strb	r3, [r7, #6]
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	d9c1      	bls.n	8000cca <sensorRead+0xc>
		}
		return i;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
	}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DHT11_allData>:
	/*Odczyt z DHT11, inicjalizacja, odpowiedź*/
	void DHT11_allData(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
		  DHT11sensorInit();
 8000d54:	f7ff ff64 	bl	8000c20 <DHT11sensorInit>
		  Presence = sensorResponse();
 8000d58:	f7ff ff83 	bl	8000c62 <sensorResponse>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <DHT11_allData+0x8c>)
 8000d62:	701a      	strb	r2, [r3, #0]
		  Rh_byte1 = sensorRead ();
 8000d64:	f7ff ffab 	bl	8000cbe <sensorRead>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <DHT11_allData+0x90>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = sensorRead ();
 8000d70:	f7ff ffa5 	bl	8000cbe <sensorRead>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <DHT11_allData+0x94>)
 8000d7a:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = sensorRead ();
 8000d7c:	f7ff ff9f 	bl	8000cbe <sensorRead>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <DHT11_allData+0x98>)
 8000d86:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = sensorRead ();
 8000d88:	f7ff ff99 	bl	8000cbe <sensorRead>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <DHT11_allData+0x9c>)
 8000d92:	701a      	strb	r2, [r3, #0]
		  SUM = sensorRead();
 8000d94:	f7ff ff93 	bl	8000cbe <sensorRead>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <DHT11_allData+0xa0>)
 8000d9e:	801a      	strh	r2, [r3, #0]
		  TEMP = Temp_byte1;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <DHT11_allData+0x98>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <DHT11_allData+0xa4>)
 8000da8:	801a      	strh	r2, [r3, #0]
		  RH = Rh_byte1;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <DHT11_allData+0x90>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <DHT11_allData+0xa8>)
 8000db2:	801a      	strh	r2, [r3, #0]
		  Temperature = (float) TEMP;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <DHT11_allData+0xa4>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <DHT11_allData+0xac>)
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
		  Humidity = (float) RH;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <DHT11_allData+0xa8>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <DHT11_allData+0xb0>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
	}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000033a 	.word	0x2000033a
 8000de0:	20000330 	.word	0x20000330
 8000de4:	20000331 	.word	0x20000331
 8000de8:	20000332 	.word	0x20000332
 8000dec:	20000333 	.word	0x20000333
 8000df0:	20000334 	.word	0x20000334
 8000df4:	20000338 	.word	0x20000338
 8000df8:	20000336 	.word	0x20000336
 8000dfc:	2000033c 	.word	0x2000033c
 8000e00:	20000340 	.word	0x20000340

08000e04 <analogDeviceReadDMA>:
	/*Odczyt wszystkich kanałów analogowych ADC1, ADC_VAL[0-5] to wilgoć gleby, ADC_VAL[6] to czujnik ADC_VAL[6] */
	void analogDeviceReadDMA(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af02      	add	r7, sp, #8

			/*Wartość analogowa jest odwrotnie proporcjonalna do procentowego wskaźnika wilgotności, im większe napięcie tym mniejsza wilgoć*/

			HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 7); //Odczyt poprzez DMA ze wszystkich kanałów ADC
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4934      	ldr	r1, [pc, #208]	; (8000ee0 <analogDeviceReadDMA+0xdc>)
 8000e0e:	4835      	ldr	r0, [pc, #212]	; (8000ee4 <analogDeviceReadDMA+0xe0>)
 8000e10:	f001 fb7e 	bl	8002510 <HAL_ADC_Start_DMA>
			delay_us(1000);						   //Bez tego delaya się rozlatuje odczyt przez zbyt małą ilość czasu na próbkowanie sygnału analogowego
 8000e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e18:	f001 f8ea 	bl	8001ff0 <delay_us>
			HAL_ADC_Stop_DMA(&hadc1); 			   //Zatrzymaj odczyt ADC przez DMA
 8000e1c:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <analogDeviceReadDMA+0xe0>)
 8000e1e:	f001 fc51 	bl	80026c4 <HAL_ADC_Stop_DMA>

			for(int i = 0; i<6; i++){ 			   //Przeskalowanie na procenty (wcześniej test czujnika jak nisko może zejść analogowa wartość w przypadku maksymalnie wilgotnej gleby)
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	e041      	b.n	8000eac <analogDeviceReadDMA+0xa8>
				moisture_percentage[i] = 100-( map(ADC_VAL[i], 1000, 3970, 0, 100));
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <analogDeviceReadDMA+0xdc>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	b298      	uxth	r0, r3
 8000e32:	2364      	movs	r3, #100	; 0x64
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f640 7282 	movw	r2, #3970	; 0xf82
 8000e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e40:	f001 f904 	bl	800204c <map>
 8000e44:	eef0 7a40 	vmov.f32	s15, s0
 8000e48:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000ee8 <analogDeviceReadDMA+0xe4>
 8000e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <analogDeviceReadDMA+0xe8>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	edc3 7a00 	vstr	s15, [r3]

				if (moisture_percentage[i]>100){moisture_percentage[i] = 100;} //Przy zwarciu czujnika daje wartość
 8000e5c:	4a23      	ldr	r2, [pc, #140]	; (8000eec <analogDeviceReadDMA+0xe8>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ee8 <analogDeviceReadDMA+0xe4>
 8000e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	dd05      	ble.n	8000e82 <analogDeviceReadDMA+0x7e>
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <analogDeviceReadDMA+0xe8>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <analogDeviceReadDMA+0xec>)
 8000e80:	601a      	str	r2, [r3, #0]
				if (moisture_percentage[i]<0){moisture_percentage[i] = 0;}
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <analogDeviceReadDMA+0xe8>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d506      	bpl.n	8000ea6 <analogDeviceReadDMA+0xa2>
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <analogDeviceReadDMA+0xe8>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
			for(int i = 0; i<6; i++){ 			   //Przeskalowanie na procenty (wcześniej test czujnika jak nisko może zejść analogowa wartość w przypadku maksymalnie wilgotnej gleby)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	ddba      	ble.n	8000e28 <analogDeviceReadDMA+0x24>
			}

			/*Wartość analogowa jest wprost proporcjonalna do procentowego wskaźnika nasłonecznienia*/
			lightIntensity = map(ADC_VAL[6], 150, 4095, 0, 100); // Minimalna wartość jaką się dało uzyskać to 150
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <analogDeviceReadDMA+0xdc>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	b298      	uxth	r0, r3
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ec2:	2196      	movs	r1, #150	; 0x96
 8000ec4:	f001 f8c2 	bl	800204c <map>
 8000ec8:	eef0 7a40 	vmov.f32	s15, s0
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <analogDeviceReadDMA+0xf0>)
 8000ece:	edc3 7a00 	vstr	s15, [r3]
			sendAllReadingsUART(); 								 //Wyślij wszystko po UART'cie
 8000ed2:	f000 f811 	bl	8000ef8 <sendAllReadingsUART>

		}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200002f8 	.word	0x200002f8
 8000ee4:	20000200 	.word	0x20000200
 8000ee8:	42c80000 	.word	0x42c80000
 8000eec:	20000314 	.word	0x20000314
 8000ef0:	42c80000 	.word	0x42c80000
 8000ef4:	2000032c 	.word	0x2000032c

08000ef8 <sendAllReadingsUART>:
		void sendAllReadingsUART(){
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
//			sendString_UART(UartOutText);


			/*Przesył pod szukanie problemów*/

			for(int i = 0; i<6; i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e018      	b.n	8000f36 <sendAllReadingsUART+0x3e>
				sprintf(UartOutText, "Czujnik nr: %d val %2.f%%\n\r ", i+1, moisture_percentage[i]);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1c5c      	adds	r4, r3, #1
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <sendAllReadingsUART+0x9c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fb18 	bl	8000548 <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	e9cd 2300 	strd	r2, r3, [sp]
 8000f20:	4622      	mov	r2, r4
 8000f22:	491d      	ldr	r1, [pc, #116]	; (8000f98 <sendAllReadingsUART+0xa0>)
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f26:	f006 fa9b 	bl	8007460 <siprintf>
				sendString_UART(UartOutText);
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f2c:	f001 f878 	bl	8002020 <sendString_UART>
			for(int i = 0; i<6; i++){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	dde3      	ble.n	8000f04 <sendAllReadingsUART+0xc>
			}

			sprintf(UartOutText, "Natezenie oswietlenia: %2.f%% \n\r ", lightIntensity);
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <sendAllReadingsUART+0xa8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb01 	bl	8000548 <__aeabi_f2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4916      	ldr	r1, [pc, #88]	; (8000fa4 <sendAllReadingsUART+0xac>)
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f4e:	f006 fa87 	bl	8007460 <siprintf>
			sendString_UART(UartOutText);
 8000f52:	4812      	ldr	r0, [pc, #72]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f54:	f001 f864 	bl	8002020 <sendString_UART>

			sprintf(UartOutText, "Temp: %2.f Humidity %2.f \n\r ", Temperature, Humidity);
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <sendAllReadingsUART+0xb0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff faf3 	bl	8000548 <__aeabi_f2d>
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <sendAllReadingsUART+0xb4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff faec 	bl	8000548 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9cd 2300 	strd	r2, r3, [sp]
 8000f78:	4622      	mov	r2, r4
 8000f7a:	462b      	mov	r3, r5
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <sendAllReadingsUART+0xb8>)
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f80:	f006 fa6e 	bl	8007460 <siprintf>
			sendString_UART(UartOutText);
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <sendAllReadingsUART+0xa4>)
 8000f86:	f001 f84b 	bl	8002020 <sendString_UART>


		}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000314 	.word	0x20000314
 8000f98:	08009968 	.word	0x08009968
 8000f9c:	20000294 	.word	0x20000294
 8000fa0:	2000032c 	.word	0x2000032c
 8000fa4:	08009988 	.word	0x08009988
 8000fa8:	2000033c 	.word	0x2000033c
 8000fac:	20000340 	.word	0x20000340
 8000fb0:	080099ac 	.word	0x080099ac

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd6:	4b58      	ldr	r3, [pc, #352]	; (8001138 <MX_ADC1_Init+0x184>)
 8000fd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fde:	4b56      	ldr	r3, [pc, #344]	; (8001138 <MX_ADC1_Init+0x184>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe4:	4b54      	ldr	r3, [pc, #336]	; (8001138 <MX_ADC1_Init+0x184>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fea:	4b53      	ldr	r3, [pc, #332]	; (8001138 <MX_ADC1_Init+0x184>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b51      	ldr	r3, [pc, #324]	; (8001138 <MX_ADC1_Init+0x184>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff6:	4b50      	ldr	r3, [pc, #320]	; (8001138 <MX_ADC1_Init+0x184>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <MX_ADC1_Init+0x184>)
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001004:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <MX_ADC1_Init+0x184>)
 8001006:	2201      	movs	r2, #1
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <MX_ADC1_Init+0x184>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001010:	4b49      	ldr	r3, [pc, #292]	; (8001138 <MX_ADC1_Init+0x184>)
 8001012:	2207      	movs	r2, #7
 8001014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001016:	4b48      	ldr	r3, [pc, #288]	; (8001138 <MX_ADC1_Init+0x184>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <MX_ADC1_Init+0x184>)
 8001020:	2204      	movs	r2, #4
 8001022:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001024:	4b44      	ldr	r3, [pc, #272]	; (8001138 <MX_ADC1_Init+0x184>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800102a:	4b43      	ldr	r3, [pc, #268]	; (8001138 <MX_ADC1_Init+0x184>)
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001030:	4841      	ldr	r0, [pc, #260]	; (8001138 <MX_ADC1_Init+0x184>)
 8001032:	f001 f8db 	bl	80021ec <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 fc82 	bl	8001944 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	483b      	ldr	r0, [pc, #236]	; (8001138 <MX_ADC1_Init+0x184>)
 800104c:	f001 fe5c 	bl	8002d08 <HAL_ADCEx_MultiModeConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001056:	f000 fc75 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800105a:	2301      	movs	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105e:	2301      	movs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001066:	2304      	movs	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4830      	ldr	r0, [pc, #192]	; (8001138 <MX_ADC1_Init+0x184>)
 8001078:	f001 fb86 	bl	8002788 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001082:	f000 fc5f 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001086:	2302      	movs	r3, #2
 8001088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800108a:	2302      	movs	r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4829      	ldr	r0, [pc, #164]	; (8001138 <MX_ADC1_Init+0x184>)
 8001094:	f001 fb78 	bl	8002788 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800109e:	f000 fc51 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <MX_ADC1_Init+0x184>)
 80010b0:	f001 fb6a 	bl	8002788 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80010ba:	f000 fc43 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010be:	2307      	movs	r3, #7
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	481b      	ldr	r0, [pc, #108]	; (8001138 <MX_ADC1_Init+0x184>)
 80010cc:	f001 fb5c 	bl	8002788 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80010d6:	f000 fc35 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010da:	2308      	movs	r3, #8
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010de:	2305      	movs	r3, #5
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_ADC1_Init+0x184>)
 80010e8:	f001 fb4e 	bl	8002788 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80010f2:	f000 fc27 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f6:	2309      	movs	r3, #9
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010fa:	2306      	movs	r3, #6
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_ADC1_Init+0x184>)
 8001104:	f001 fb40 	bl	8002788 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800110e:	f000 fc19 	bl	8001944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001112:	230b      	movs	r3, #11
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001116:	2307      	movs	r3, #7
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_ADC1_Init+0x184>)
 8001120:	f001 fb32 	bl	8002788 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800112a:	f000 fc0b 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000200 	.word	0x20000200

0800113c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800115c:	d17c      	bne.n	8001258 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115e:	4b40      	ldr	r3, [pc, #256]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a3f      	ldr	r2, [pc, #252]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_ADC_MspInit+0x124>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a39      	ldr	r2, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x124>)
 800117c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_ADC_MspInit+0x124>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_ADC_MspInit+0x124>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <HAL_ADC_MspInit+0x124>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_ADC_MspInit+0x124>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_ADC_MspInit+0x124>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011be:	230f      	movs	r3, #15
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <HAL_ADC_MspInit+0x128>)
 80011d2:	f002 fb27 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f002 fb1a 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4819      	ldr	r0, [pc, #100]	; (8001268 <HAL_ADC_MspInit+0x12c>)
 8001204:	f002 fb0e 	bl	8003824 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_ADC_MspInit+0x130>)
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_ADC_MspInit+0x134>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_ADC_MspInit+0x130>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_ADC_MspInit+0x130>)
 800122a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001232:	2220      	movs	r2, #32
 8001234:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <HAL_ADC_MspInit+0x130>)
 800123e:	f002 f920 	bl	8003482 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001248:	f000 fb7c 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_ADC_MspInit+0x130>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800
 8001268:	48000400 	.word	0x48000400
 800126c:	20000250 	.word	0x20000250
 8001270:	40020008 	.word	0x40020008

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA_Init+0x38>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_DMA_Init+0x38>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_DMA_Init+0x38>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200b      	movs	r0, #11
 8001298:	f002 f8bd 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800129c:	200b      	movs	r0, #11
 800129e:	f002 f8d6 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a35      	ldr	r2, [pc, #212]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <MX_GPIO_Init+0xf0>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_GPIO_Init+0xf0>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_GPIO_Init+0xf0>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <MX_GPIO_Init+0xf0>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_GPIO_Init+0xf0>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f002 fc03 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001338:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <MX_GPIO_Init+0xf4>)
 800134a:	f002 fa6b 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134e:	2320      	movs	r3, #32
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f002 fa5c 	bl	8003824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001372:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <MX_GPIO_Init+0xf8>)
 8001384:	f002 fa4e 	bl	8003824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f002 f842 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001392:	2028      	movs	r0, #40	; 0x28
 8001394:	f002 f85b 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000400 	.word	0x48000400

080013ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_I2C1_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <MX_I2C1_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_I2C1_Init+0x74>)
 80013b8:	f240 220b 	movw	r2, #523	; 0x20b
 80013bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_I2C1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_I2C1_Init+0x74>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_I2C1_Init+0x74>)
 80013ea:	f002 fbd5 	bl	8003b98 <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013f4:	f000 faa6 	bl	8001944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f8:	2100      	movs	r1, #0
 80013fa:	4809      	ldr	r0, [pc, #36]	; (8001420 <MX_I2C1_Init+0x74>)
 80013fc:	f002 fed4 	bl	80041a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001406:	f000 fa9d 	bl	8001944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C1_Init+0x74>)
 800140e:	f002 ff16 	bl	800423e <HAL_I2CEx_ConfigDigitalFilter>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001418:	f000 fa94 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000370 	.word	0x20000370
 8001424:	40005400 	.word	0x40005400

08001428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_I2C_MspInit+0xb8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d145      	bne.n	80014d6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800148c:	2304      	movs	r3, #4
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 f9c3 	bl	8003824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ae:	2304      	movs	r3, #4
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0xc0>)
 80014ba:	f002 f9b3 	bl	8003824 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_I2C_MspInit+0xbc>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400

080014ec <lcd_init>:

#include "globalVars.h"
#include "stdio.h"
#include "string.h"

void lcd_init(struct lcd_disp * lcd){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <lcd_init+0x1a>
		xpin = BL_PIN;
 8001502:	2308      	movs	r3, #8
 8001504:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	delay_us(40000);
 8001506:	f649 4040 	movw	r0, #40000	; 0x9c40
 800150a:	f000 fd71 	bl	8001ff0 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	2130      	movs	r1, #48	; 0x30
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f82c 	bl	8001574 <lcd_write>
	delay_us(5000);
 800151c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001520:	f000 fd66 	bl	8001ff0 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	2130      	movs	r1, #48	; 0x30
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f821 	bl	8001574 <lcd_write>
	delay_us(10000);
 8001532:	f242 7010 	movw	r0, #10000	; 0x2710
 8001536:	f000 fd5b 	bl	8001ff0 <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	2130      	movs	r1, #48	; 0x30
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f816 	bl	8001574 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	2102      	movs	r1, #2
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f80f 	bl	8001574 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	210c      	movs	r1, #12
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f808 	bl	8001574 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8a0 	bl	80016aa <lcd_clear>

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	f023 030f 	bic.w	r3, r3, #15
 800158c:	b2da      	uxtb	r2, r3
 800158e:	797b      	ldrb	r3, [r7, #5]
 8001590:	4313      	orrs	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	b2db      	uxtb	r3, r3
 800159a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 800159c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a0:	f023 030f 	bic.w	r3, r3, #15
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	b299      	uxth	r1, r3
 80015dc:	f107 020c 	add.w	r2, r7, #12
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2304      	movs	r3, #4
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <lcd_write+0x88>)
 80015e8:	f002 fb66 	bl	8003cb8 <HAL_I2C_Master_Transmit>

	delay_us(750);
 80015ec:	f240 20ee 	movw	r0, #750	; 0x2ee
 80015f0:	f000 fcfe 	bl	8001ff0 <delay_us>
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000370 	.word	0x20000370

08001600 <lcd_display>:

void lcd_display(struct lcd_disp * lcd){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	2300      	movs	r3, #0
 800160e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <lcd_display+0x1e>
		xpin = BL_PIN;
 800161a:	2308      	movs	r3, #8
 800161c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f843 	bl	80016aa <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ffa1 	bl	8001574 <lcd_write>

	while(lcd->f_line[i]){
 8001632:	e00f      	b.n	8001654 <lcd_display+0x54>
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7818      	ldrb	r0, [r3, #0]
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	7859      	ldrb	r1, [r3, #1]
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	f7ff ff93 	bl	8001574 <lcd_write>
		i++;
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	3301      	adds	r3, #1
 8001652:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i]){
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e9      	bne.n	8001634 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	21c0      	movs	r1, #192	; 0xc0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff81 	bl	8001574 <lcd_write>

	while(lcd->s_line[i]){
 8001672:	e00f      	b.n	8001694 <lcd_display+0x94>
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7818      	ldrb	r0, [r3, #0]
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	7c99      	ldrb	r1, [r3, #18]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	f7ff ff73 	bl	8001574 <lcd_write>
		i++;
 800168e:	7bbb      	ldrb	r3, [r7, #14]
 8001690:	3301      	adds	r3, #1
 8001692:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i]){
 8001694:	7bbb      	ldrb	r3, [r7, #14]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	7c9b      	ldrb	r3, [r3, #18]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e9      	bne.n	8001674 <lcd_display+0x74>
	}
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl){
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <lcd_clear+0x1a>
		xpin = BL_PIN;
 80016c0:	2308      	movs	r3, #8
 80016c2:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff51 	bl	8001574 <lcd_write>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <displayReadings>:
void displayReadings(int disp_No){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	switch(disp_No){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d879      	bhi.n	80017e0 <displayReadings+0x104>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <displayReadings+0x18>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001709 	.word	0x08001709
 80016f8:	08001737 	.word	0x08001737
 80016fc:	08001765 	.word	0x08001765
 8001700:	08001793 	.word	0x08001793
 8001704:	080017c1 	.word	0x080017c1
	case 1:
	  sprintf((char *)disp.f_line, "HSens1: %2.f%%", moisture_percentage[0]);
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <displayReadings+0x114>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff1b 	bl	8000548 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4937      	ldr	r1, [pc, #220]	; (80017f4 <displayReadings+0x118>)
 8001718:	4837      	ldr	r0, [pc, #220]	; (80017f8 <displayReadings+0x11c>)
 800171a:	f005 fea1 	bl	8007460 <siprintf>
	  sprintf((char *)disp.s_line, "HSens2: %2.f%%", moisture_percentage[1]);
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <displayReadings+0x114>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4933      	ldr	r1, [pc, #204]	; (80017fc <displayReadings+0x120>)
 800172e:	4834      	ldr	r0, [pc, #208]	; (8001800 <displayReadings+0x124>)
 8001730:	f005 fe96 	bl	8007460 <siprintf>
		break;
 8001734:	e055      	b.n	80017e2 <displayReadings+0x106>
	case 2:
	  sprintf((char *)disp.f_line, "HSens3: %2.f%%", moisture_percentage[2]);
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <displayReadings+0x114>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	492f      	ldr	r1, [pc, #188]	; (8001804 <displayReadings+0x128>)
 8001746:	482c      	ldr	r0, [pc, #176]	; (80017f8 <displayReadings+0x11c>)
 8001748:	f005 fe8a 	bl	8007460 <siprintf>
	  sprintf((char *)disp.s_line, "HSens4: %2.f%%", moisture_percentage[3]);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <displayReadings+0x114>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	492b      	ldr	r1, [pc, #172]	; (8001808 <displayReadings+0x12c>)
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <displayReadings+0x124>)
 800175e:	f005 fe7f 	bl	8007460 <siprintf>
		break;
 8001762:	e03e      	b.n	80017e2 <displayReadings+0x106>
	case 3:
	  sprintf((char *)disp.f_line, "HSens5: %2.f%%", moisture_percentage[4]);
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <displayReadings+0x114>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4926      	ldr	r1, [pc, #152]	; (800180c <displayReadings+0x130>)
 8001774:	4820      	ldr	r0, [pc, #128]	; (80017f8 <displayReadings+0x11c>)
 8001776:	f005 fe73 	bl	8007460 <siprintf>
	  sprintf((char *)disp.s_line, "HSens6: %2.f%%", moisture_percentage[5]);
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <displayReadings+0x114>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4921      	ldr	r1, [pc, #132]	; (8001810 <displayReadings+0x134>)
 800178a:	481d      	ldr	r0, [pc, #116]	; (8001800 <displayReadings+0x124>)
 800178c:	f005 fe68 	bl	8007460 <siprintf>
		break;
 8001790:	e027      	b.n	80017e2 <displayReadings+0x106>
	case 4:
	  sprintf((char *)disp.f_line, "AirT: %2.f degC", Temperature);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <displayReadings+0x138>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	491d      	ldr	r1, [pc, #116]	; (8001818 <displayReadings+0x13c>)
 80017a2:	4815      	ldr	r0, [pc, #84]	; (80017f8 <displayReadings+0x11c>)
 80017a4:	f005 fe5c 	bl	8007460 <siprintf>
	  sprintf((char *)disp.s_line, "AirH: %2.f%% ", Humidity);
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <displayReadings+0x140>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	491a      	ldr	r1, [pc, #104]	; (8001820 <displayReadings+0x144>)
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <displayReadings+0x124>)
 80017ba:	f005 fe51 	bl	8007460 <siprintf>
		break;
 80017be:	e010      	b.n	80017e2 <displayReadings+0x106>
	case 5:
	  sprintf((char *)disp.f_line, "LightInt: %2.f%%", lightIntensity);
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <displayReadings+0x148>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe febf 	bl	8000548 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4916      	ldr	r1, [pc, #88]	; (8001828 <displayReadings+0x14c>)
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <displayReadings+0x11c>)
 80017d2:	f005 fe45 	bl	8007460 <siprintf>
	  sprintf((char *)disp.s_line, " ");
 80017d6:	4915      	ldr	r1, [pc, #84]	; (800182c <displayReadings+0x150>)
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <displayReadings+0x124>)
 80017da:	f005 fe41 	bl	8007460 <siprintf>
		break;
 80017de:	e000      	b.n	80017e2 <displayReadings+0x106>
	default:
		break;
 80017e0:	bf00      	nop
	}
	lcd_display(&disp);
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <displayReadings+0x154>)
 80017e4:	f7ff ff0c 	bl	8001600 <lcd_display>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000314 	.word	0x20000314
 80017f4:	080099cc 	.word	0x080099cc
 80017f8:	20000345 	.word	0x20000345
 80017fc:	080099dc 	.word	0x080099dc
 8001800:	20000356 	.word	0x20000356
 8001804:	080099ec 	.word	0x080099ec
 8001808:	080099fc 	.word	0x080099fc
 800180c:	08009a0c 	.word	0x08009a0c
 8001810:	08009a1c 	.word	0x08009a1c
 8001814:	2000033c 	.word	0x2000033c
 8001818:	08009a2c 	.word	0x08009a2c
 800181c:	20000340 	.word	0x20000340
 8001820:	08009a3c 	.word	0x08009a3c
 8001824:	2000032c 	.word	0x2000032c
 8001828:	08009a4c 	.word	0x08009a4c
 800182c:	08009a60 	.word	0x08009a60
 8001830:	20000344 	.word	0x20000344

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001838:	f000 fc54 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183c:	f000 f826 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001840:	f7ff fd36 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001844:	f7ff fd16 	bl	8001274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001848:	f000 fa98 	bl	8001d7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800184c:	f7ff fbb2 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001850:	f000 f9ce 	bl	8001bf0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001854:	f000 fa1a 	bl	8001c8c <MX_TIM6_Init>
  MX_I2C1_Init();
 8001858:	f7ff fda8 	bl	80013ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	  HAL_TIM_Base_Start(&htim2); 	 // Start timer2 w trybie normalnym
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <main+0x4c>)
 800185e:	f004 f93d 	bl	8005adc <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim6); // Start timera6 w trybie przerwania
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <main+0x50>)
 8001864:	f004 f98e 	bl	8005b84 <HAL_TIM_Base_Start_IT>
	  disp.addr = (0x27 << 1);		 // Adres LCD'ka po I2C
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <main+0x54>)
 800186a:	224e      	movs	r2, #78	; 0x4e
 800186c:	701a      	strb	r2, [r3, #0]
	  disp.bl = true;				 // Włącz podświetlenie
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <main+0x54>)
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	  lcd_init(&disp);				 // Inicjalizuj LCD
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <main+0x54>)
 8001878:	f7ff fe38 	bl	80014ec <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800187c:	e7fe      	b.n	800187c <main+0x48>
 800187e:	bf00      	nop
 8001880:	200003c0 	.word	0x200003c0
 8001884:	2000040c 	.word	0x2000040c
 8001888:	20000344 	.word	0x20000344

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	; 0x58
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001896:	2228      	movs	r2, #40	; 0x28
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f005 f96e 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c6:	2301      	movs	r3, #1
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ca:	2310      	movs	r3, #16
 80018cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d2:	2300      	movs	r3, #0
 80018d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fcf9 	bl	80042d8 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80018ec:	f000 f82a 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fd21 	bl	8005354 <HAL_RCC_ClockConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001918:	f000 f814 	bl	8001944 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f003 ff47 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001938:	f000 f804 	bl	8001944 <Error_Handler>
  }
}
 800193c:	bf00      	nop
 800193e:	3758      	adds	r7, #88	; 0x58
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x44>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_MspInit+0x44>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x44>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x44>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x44>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x44>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001986:	2007      	movs	r0, #7
 8001988:	f001 fd3a 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800199c:	e7fe      	b.n	800199c <NMI_Handler+0x4>

0800199e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <MemManage_Handler+0x4>

080019aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f000 fbc4 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <DMA1_Channel1_IRQHandler+0x10>)
 80019f2:	f001 fe25 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000250 	.word	0x20000250

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM2_IRQHandler+0x10>)
 8001a06:	f004 f919 	bl	8005c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200003c0 	.word	0x200003c0

08001a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001a18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a1c:	f002 f8a4 	bl	8003b68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a24:	f002 f8a0 	bl	8003b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM6_DAC1_IRQHandler+0x10>)
 8001a32:	f004 f903 	bl	8005c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000040c 	.word	0x2000040c

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5a:	f005 f865 	bl	8006b28 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
	return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
	}

return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
	}
	return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f004 ffca 	bl	8006b28 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20003000 	.word	0x20003000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200003bc 	.word	0x200003bc
 8001bc8:	200004f0 	.word	0x200004f0

08001bcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c18:	2247      	movs	r2, #71	; 0x47
 8001c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c38:	f003 fef8 	bl	8005a2c <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c42:	f7ff fe7f 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c54:	f004 f911 	bl	8005e7a <HAL_TIM_ConfigClockSource>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c5e:	f7ff fe71 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <MX_TIM2_Init+0x98>)
 8001c70:	f004 fb06 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c7a:	f7ff fe63 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003c0 	.word	0x200003c0

08001c8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <MX_TIM6_Init+0x6c>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001ca4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ca8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001cb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001cc0:	f003 feb4 	bl	8005a2c <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001cca:	f7ff fe3b 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_TIM6_Init+0x68>)
 8001cdc:	f004 fad0 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ce6:	f7ff fe2d 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000040c 	.word	0x2000040c
 8001cf8:	40001000 	.word	0x40001000

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d114      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f001 fb73 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d30:	201c      	movs	r0, #28
 8001d32:	f001 fb8c 	bl	800344e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d36:	e018      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d113      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2036      	movs	r0, #54	; 0x36
 8001d60:	f001 fb59 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001d64:	2036      	movs	r0, #54	; 0x36
 8001d66:	f001 fb72 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40001000 	.word	0x40001000

08001d7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <MX_USART2_UART_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dc0:	f004 faea 	bl	8006398 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dca:	f7ff fdbb 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000458 	.word	0x20000458
 8001dd8:	40004400 	.word	0x40004400

08001ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_UART_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6153      	str	r3, [r2, #20]
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_UART_MspInit+0x80>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f001 fcea 	bl	8003824 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_TIM_PeriodElapsedCallback>:
	#include "string.h"
	#include "stdio.h"
	#include "lcd_i2c.h"
/*==============================Callbacki przerwań==============================*/
	/*Przerwanie po upłynięciu tim6 równego 10000 cykli (po sekundzie) - zebranie danych z czujników*/
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

		if ((count == sensorRead_freq) || (count == 0)){
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d003      	beq.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x20>
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d108      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x32>
		analogDeviceReadDMA();
 8001e80:	f7fe ffc0 	bl	8000e04 <analogDeviceReadDMA>
		DHT11_allData();
 8001e84:	f7fe ff64 	bl	8000d50 <DHT11_allData>
		displayReadings(disp_No);
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fc25 	bl	80016dc <displayReadings>
		}
		count++;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e9a:	6013      	str	r3, [r2, #0]
		if (count >= sensorRead_freq) count = 1;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dc02      	bgt.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x52>
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
	}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	20000368 	.word	0x20000368
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_GPIO_EXTI_Callback>:

	/*Przerwanie na liniach 10-15, w tym przypadku to jest button na płytce Nucleo*/
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
			if(!(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))){
 8001ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed6:	4838      	ldr	r0, [pc, #224]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ed8:	f001 fe16 	bl	8003b08 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d110      	bne.n	8001f04 <HAL_GPIO_EXTI_Callback+0x3c>
			disp_No++;
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001eea:	6013      	str	r3, [r2, #0]
			if (disp_No == 6) disp_No = 1;
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d102      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x32>
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
			displayReadings(disp_No);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fbec 	bl	80016dc <displayReadings>
			}

		//	while((HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)));
			if(!(HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin))){
 8001f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f0a:	f001 fdfd 	bl	8003b08 <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d14d      	bne.n	8001fb0 <HAL_GPIO_EXTI_Callback+0xe8>
				pushCount++;
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f24:	801a      	strh	r2, [r3, #0]
				if(pushCount == 4) pushCount = 1;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d102      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x6e>
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	801a      	strh	r2, [r3, #0]
				switch(pushCount){
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d01c      	beq.n	8001f7a <HAL_GPIO_EXTI_Callback+0xb2>
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	dc26      	bgt.n	8001f92 <HAL_GPIO_EXTI_Callback+0xca>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <HAL_GPIO_EXTI_Callback+0x86>
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d00b      	beq.n	8001f64 <HAL_GPIO_EXTI_Callback+0x9c>
 8001f4c:	e021      	b.n	8001f92 <HAL_GPIO_EXTI_Callback+0xca>
				case 1:
					sensorRead_freq = 1;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	801a      	strh	r2, [r3, #0]
					count = 1;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x104>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
					sprintf((char *)disp.f_line, "ReadFreq 1s");
 8001f5a:	491d      	ldr	r1, [pc, #116]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x108>)
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001f5e:	f005 fa7f 	bl	8007460 <siprintf>
				break;
 8001f62:	e016      	b.n	8001f92 <HAL_GPIO_EXTI_Callback+0xca>
				case 2:
					sensorRead_freq = 60;
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f66:	223c      	movs	r2, #60	; 0x3c
 8001f68:	801a      	strh	r2, [r3, #0]
					count = 1;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x104>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
					sprintf((char *)disp.f_line, "ReadFreq 60s");
 8001f70:	4919      	ldr	r1, [pc, #100]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x110>)
 8001f72:	4818      	ldr	r0, [pc, #96]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001f74:	f005 fa74 	bl	8007460 <siprintf>
				break;
 8001f78:	e00b      	b.n	8001f92 <HAL_GPIO_EXTI_Callback+0xca>
				case 3:
					sensorRead_freq = 300;
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x100>)
 8001f7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f80:	801a      	strh	r2, [r3, #0]
					count = 1;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x104>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
					sprintf((char *)disp.f_line, "ReadFreq 300s");
 8001f88:	4914      	ldr	r1, [pc, #80]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x114>)
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001f8c:	f005 fa68 	bl	8007460 <siprintf>
				break;
 8001f90:	bf00      	nop
				}
				sprintf((char *)disp.s_line, " ");
 8001f92:	4913      	ldr	r1, [pc, #76]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x118>)
 8001f94:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001f96:	f005 fa63 	bl	8007460 <siprintf>
				lcd_display(&disp);
 8001f9a:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x120>)
 8001f9c:	f7ff fb30 	bl	8001600 <lcd_display>
				delay_us(500000);
 8001fa0:	4812      	ldr	r0, [pc, #72]	; (8001fec <HAL_GPIO_EXTI_Callback+0x124>)
 8001fa2:	f000 f825 	bl	8001ff0 <delay_us>
				displayReadings(disp_No);
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb96 	bl	80016dc <displayReadings>

			}
	}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	48000400 	.word	0x48000400
 8001fc4:	2000036c 	.word	0x2000036c
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20000368 	.word	0x20000368
 8001fd0:	08009a64 	.word	0x08009a64
 8001fd4:	20000345 	.word	0x20000345
 8001fd8:	08009a70 	.word	0x08009a70
 8001fdc:	08009a80 	.word	0x08009a80
 8001fe0:	08009a90 	.word	0x08009a90
 8001fe4:	20000356 	.word	0x20000356
 8001fe8:	20000344 	.word	0x20000344
 8001fec:	0007a120 	.word	0x0007a120

08001ff0 <delay_us>:

/*==========================================================================================*/
/*Milisekundowy delay na timerze, tim2 prescaler 72-1, brak przerwań przez tim2*/
void delay_us(uint32_t time){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <delay_us+0x2c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8002000:	bf00      	nop
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <delay_us+0x2c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d8f9      	bhi.n	8002002 <delay_us+0x12>
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	200003c0 	.word	0x200003c0

08002020 <sendString_UART>:

/*Wyślij po UARCIE numer 2 baudrate = 115200B/s*/
void sendString_UART(char*text){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,  (uint8_t*)text, strlen(text), 1000);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe f8d1 	bl	80001d0 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <sendString_UART+0x28>)
 800203a:	f004 f9fb 	bl	8006434 <HAL_UART_Transmit>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000458 	.word	0x20000458

0800204c <map>:

/*Przeskaluj wartość analogową z ADCka na procenty*/
float map(uint16_t val, int in_min, int in_max, int out_min, int out_max) {
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4603      	mov	r3, r0
 800205a:	81fb      	strh	r3, [r7, #14]
  return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800205c:	89fa      	ldrh	r2, [r7, #14]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	1a8a      	subs	r2, r1, r2
 8002068:	fb03 f202 	mul.w	r2, r3, r2
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1acb      	subs	r3, r1, r3
 8002072:	fb92 f2f3 	sdiv	r2, r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002096:	490e      	ldr	r1, [pc, #56]	; (80020d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <LoopForever+0xe>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ac:	4c0b      	ldr	r4, [pc, #44]	; (80020dc <LoopForever+0x16>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ba:	f7ff fd87 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f004 fd39 	bl	8006b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c2:	f7ff fbb7 	bl	8001834 <main>

080020c6 <LoopForever>:

LoopForever:
    b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80020d4:	08009eac 	.word	0x08009eac
  ldr r2, =_sbss
 80020d8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80020dc:	200004f0 	.word	0x200004f0

080020e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC1_2_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_Init+0x28>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_Init+0x28>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f001 f983 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fc26 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f001 f99b 	bl	800346a <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f001 f963 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000008 	.word	0x20000008
 8002168:	20000010 	.word	0x20000010
 800216c:	2000000c 	.word	0x2000000c

08002170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000010 	.word	0x20000010
 8002194:	200004dc 	.word	0x200004dc

08002198 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;  
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200004dc 	.word	0x200004dc

080021b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b09a      	sub	sp, #104	; 0x68
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e172      	b.n	80024f2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d176      	bne.n	800230c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d152      	bne.n	80022cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe ff7b 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d13b      	bne.n	80022cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fee7 	bl	8003028 <ADC_Disable>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12f      	bne.n	80022cc <HAL_ADC_Init+0xe0>
 800226c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002270:	2b00      	cmp	r3, #0
 8002272:	d12b      	bne.n	80022cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	f043 0202 	orr.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002296:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a8:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_ADC_Init+0x310>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a94      	ldr	r2, [pc, #592]	; (8002500 <HAL_ADC_Init+0x314>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9a      	lsrs	r2, r3, #18
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022be:	e002      	b.n	80022c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e8:	d110      	bne.n	800230c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0312 	bic.w	r3, r3, #18
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 80df 	bne.w	80024d8 <HAL_ADC_Init+0x2ec>
 800231a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80da 	bne.w	80024d8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80d2 	bne.w	80024d8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_ADC_Init+0x318>)
 8002346:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002350:	d102      	bne.n	8002358 <HAL_ADC_Init+0x16c>
 8002352:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <HAL_ADC_Init+0x31c>)
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e002      	b.n	800235e <HAL_ADC_Init+0x172>
 8002358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800235c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_ADC_Init+0x192>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADC_Init+0x192>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_ADC_Init+0x194>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11c      	bne.n	80023be <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002384:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_ADC_Init+0x1ba>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Init+0x1ba>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_Init+0x1bc>
 80023a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80023ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7e5b      	ldrb	r3, [r3, #25]
 80023c2:	035b      	lsls	r3, r3, #13
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c8:	2a01      	cmp	r2, #1
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_Init+0x1e6>
 80023cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_Init+0x1e8>
 80023d2:	2200      	movs	r2, #0
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e4:	4313      	orrs	r3, r2
 80023e6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d11b      	bne.n	800242a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7e5b      	ldrb	r3, [r3, #25]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	3b01      	subs	r3, #1
 8002400:	045a      	lsls	r2, r3, #17
 8002402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002404:	4313      	orrs	r3, r2
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
 800240c:	e00d      	b.n	800242a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	2b01      	cmp	r3, #1
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4313      	orrs	r3, r2
 800243c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800243e:	4313      	orrs	r3, r2
 8002440:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b00      	cmp	r3, #0
 800244e:	d114      	bne.n	800247a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
 8002468:	039a      	lsls	r2, r3, #14
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4313      	orrs	r3, r2
 8002474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002476:	4313      	orrs	r3, r2
 8002478:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_ADC_Init+0x320>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800248a:	430b      	orrs	r3, r1
 800248c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f023 010f 	bic.w	r1, r3, #15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
 80024ae:	e007      	b.n	80024c0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020f 	bic.w	r2, r2, #15
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
 80024d6:	e00a      	b.n	80024ee <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f023 0312 	bic.w	r3, r3, #18
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3768      	adds	r7, #104	; 0x68
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	431bde83 	.word	0x431bde83
 8002504:	50000300 	.word	0x50000300
 8002508:	50000100 	.word	0x50000100
 800250c:	fff0c007 	.word	0xfff0c007

08002510 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 80b9 	bne.w	80026a2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADC_Start_DMA+0x2e>
 800253a:	2302      	movs	r3, #2
 800253c:	e0b4      	b.n	80026a8 <HAL_ADC_Start_DMA+0x198>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_ADC_Start_DMA+0x1a0>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80a0 	bne.w	8002694 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fd03 	bl	8002f60 <ADC_Enable>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 8092 	bne.w	800268a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800257a:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_ADC_Start_DMA+0x1a0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <HAL_ADC_Start_DMA+0x80>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258e:	d115      	bne.n	80025bc <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d027      	beq.n	80025fa <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025ba:	e01e      	b.n	80025fa <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d0:	d004      	beq.n	80025dc <HAL_ADC_Start_DMA+0xcc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <HAL_ADC_Start_DMA+0x1a4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10e      	bne.n	80025fa <HAL_ADC_Start_DMA+0xea>
 80025dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	d106      	bne.n	8002616 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	f023 0206 	bic.w	r2, r3, #6
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
 8002614:	e002      	b.n	800261c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_ADC_Start_DMA+0x1ac>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_ADC_Start_DMA+0x1b0>)
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	221c      	movs	r2, #28
 8002642:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0210 	orr.w	r2, r2, #16
 8002652:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3340      	adds	r3, #64	; 0x40
 800266e:	4619      	mov	r1, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f000 ff4c 	bl	8003510 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0204 	orr.w	r2, r2, #4
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e00d      	b.n	80026a6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002692:	e008      	b.n	80026a6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026a0:	e001      	b.n	80026a6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000100 	.word	0x50000100
 80026b8:	08002e95 	.word	0x08002e95
 80026bc:	08002f0f 	.word	0x08002f0f
 80026c0:	08002f2b 	.word	0x08002f2b

080026c4 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Stop_DMA+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e050      	b.n	8002780 <HAL_ADC_Stop_DMA+0xbc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026e6:	216c      	movs	r1, #108	; 0x6c
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fd03 	bl	80030f4 <ADC_ConversionStop>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d13e      	bne.n	8002776 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002710:	2b02      	cmp	r3, #2
 8002712:	d10f      	bne.n	8002734 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4618      	mov	r0, r3
 800271a:	f000 ff58 	bl	80035ce <HAL_DMA_Abort>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0210 	bic.w	r2, r2, #16
 8002742:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fc6c 	bl	8003028 <ADC_Disable>
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e002      	b.n	800275c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fc66 	bl	8003028 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002788:	b480      	push	{r7}
 800278a:	b09b      	sub	sp, #108	; 0x6c
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x22>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e2a4      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x56c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 8288 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d81c      	bhi.n	8002804 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	461a      	mov	r2, r3
 80027de:	231f      	movs	r3, #31
 80027e0:	4093      	lsls	r3, r2
 80027e2:	43db      	mvns	r3, r3
 80027e4:	4019      	ands	r1, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
 8002802:	e063      	b.n	80028cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b09      	cmp	r3, #9
 800280a:	d81e      	bhi.n	800284a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	3b1e      	subs	r3, #30
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	4019      	ands	r1, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	3b1e      	subs	r3, #30
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34
 8002848:	e040      	b.n	80028cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b0e      	cmp	r3, #14
 8002850:	d81e      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	3b3c      	subs	r3, #60	; 0x3c
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4019      	ands	r1, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	3b3c      	subs	r3, #60	; 0x3c
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
 800288e:	e01d      	b.n	80028cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	3b5a      	subs	r3, #90	; 0x5a
 80028a4:	221f      	movs	r2, #31
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4019      	ands	r1, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	3b5a      	subs	r3, #90	; 0x5a
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 80e5 	bne.w	8002aa6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d91c      	bls.n	800291e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	3b1e      	subs	r3, #30
 80028f6:	2207      	movs	r2, #7
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4019      	ands	r1, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6898      	ldr	r0, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	3b1e      	subs	r3, #30
 8002910:	fa00 f203 	lsl.w	r2, r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
 800291c:	e019      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	4019      	ands	r1, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6898      	ldr	r0, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	fa00 f203 	lsl.w	r2, r0, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	3b01      	subs	r3, #1
 8002970:	2b03      	cmp	r3, #3
 8002972:	d84f      	bhi.n	8002a14 <HAL_ADC_ConfigChannel+0x28c>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <HAL_ADC_ConfigChannel+0x1f4>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	080029af 	.word	0x080029af
 8002984:	080029d1 	.word	0x080029d1
 8002988:	080029f3 	.word	0x080029f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002992:	4b94      	ldr	r3, [pc, #592]	; (8002be4 <HAL_ADC_ConfigChannel+0x45c>)
 8002994:	4013      	ands	r3, r2
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	0691      	lsls	r1, r2, #26
 800299c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029ac:	e07e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029b4:	4b8b      	ldr	r3, [pc, #556]	; (8002be4 <HAL_ADC_ConfigChannel+0x45c>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	0691      	lsls	r1, r2, #26
 80029be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029c0:	430a      	orrs	r2, r1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029ce:	e06d      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <HAL_ADC_ConfigChannel+0x45c>)
 80029d8:	4013      	ands	r3, r2
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	0691      	lsls	r1, r2, #26
 80029e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e2:	430a      	orrs	r2, r1
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029f0:	e05c      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029f8:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_ADC_ConfigChannel+0x45c>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	0691      	lsls	r1, r2, #26
 8002a02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a04:	430a      	orrs	r2, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a10:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a12:	e04b      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a5a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	069b      	lsls	r3, r3, #26
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a7e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10a      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aa2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002aa4:	e001      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
      break;
 8002aaa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d108      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x344>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x344>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_ADC_ConfigChannel+0x346>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 810a 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00f      	beq.n	8002afc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	400a      	ands	r2, r1
 8002af6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002afa:	e049      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d91c      	bls.n	8002b58 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6999      	ldr	r1, [r3, #24]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b1b      	subs	r3, #27
 8002b30:	2207      	movs	r2, #7
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4019      	ands	r1, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6898      	ldr	r0, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	3b1b      	subs	r3, #27
 8002b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	619a      	str	r2, [r3, #24]
 8002b56:	e01b      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6959      	ldr	r1, [r3, #20]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	4019      	ands	r1, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6898      	ldr	r0, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_ADC_ConfigChannel+0x460>)
 8002b92:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bc0:	2b12      	cmp	r3, #18
 8002bc2:	f040 8091 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 808a 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x468>
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_ADC_ConfigChannel+0x464>)
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e008      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x46e>
 8002be4:	83fff000 	.word	0x83fff000
 8002be8:	50000300 	.word	0x50000300
 8002bec:	50000100 	.word	0x50000100
 8002bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bf4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x48e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x48e>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x490>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d150      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x4b6>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x4b6>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x4b8>
 8002c3e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d13c      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d11d      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x500>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c54:	d118      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c60:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_ADC_ConfigChannel+0x578>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <HAL_ADC_ConfigChannel+0x57c>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9a      	lsrs	r2, r3, #18
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c86:	e02e      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b11      	cmp	r3, #17
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x520>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ca6:	e01e      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b12      	cmp	r3, #18
 8002cae:	d11a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cbc:	e013      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002cd0:	e00a      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ce4:	e000      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	376c      	adds	r7, #108	; 0x6c
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20000008 	.word	0x20000008
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b099      	sub	sp, #100	; 0x64
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d20:	d102      	bne.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d22:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	e002      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d2c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0a2      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e09b      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d17f      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d179      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d68:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002d6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d040      	beq.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d86:	035b      	lsls	r3, r3, #13
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d108      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002db0:	2300      	movs	r3, #0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d15c      	bne.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002dd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d14b      	bne.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002de0:	f023 030f 	bic.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df4:	e03c      	b.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d123      	bne.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002e44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d112      	bne.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e52:	f023 030f 	bic.w	r3, r3, #15
 8002e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5a:	e009      	b.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e6e:	e000      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3764      	adds	r7, #100	; 0x64
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	50000100 	.word	0x50000100
 8002e90:	50000300 	.word	0x50000300

08002e94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d126      	bne.n	8002efc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d115      	bne.n	8002ef4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff f95b 	bl	80021b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002efa:	e004      	b.n	8002f06 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff f951 	bl	80021c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff f941 	bl	80021d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <ADC_Enable+0x2c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <ADC_Enable+0x2c>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <ADC_Enable+0x2e>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d143      	bne.n	800301a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <ADC_Enable+0xc4>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0210 	orr.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02f      	b.n	800301c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fcc:	f7ff f8e4 	bl	8002198 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd2:	e01b      	b.n	800300c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd4:	f7ff f8e0 	bl	8002198 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d914      	bls.n	800300c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d00d      	beq.n	800300c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d1dc      	bne.n	8002fd4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	8000003f 	.word	0x8000003f

08003028 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <ADC_Disable+0x2c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <ADC_Disable+0x2c>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <ADC_Disable+0x2e>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d047      	beq.n	80030ea <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030d 	and.w	r3, r3, #13
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10f      	bne.n	8003088 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0202 	orr.w	r2, r2, #2
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2203      	movs	r2, #3
 800307e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003080:	f7ff f88a 	bl	8002198 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003086:	e029      	b.n	80030dc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e023      	b.n	80030ec <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030a4:	f7ff f878 	bl	8002198 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d914      	bls.n	80030dc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e007      	b.n	80030ec <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d0dc      	beq.n	80030a4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 809b 	beq.w	8003250 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003128:	d12a      	bne.n	8003180 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800312e:	2b01      	cmp	r3, #1
 8003130:	d126      	bne.n	8003180 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003136:	2b01      	cmp	r3, #1
 8003138:	d122      	bne.n	8003180 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800313a:	230c      	movs	r3, #12
 800313c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800313e:	e014      	b.n	800316a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4a46      	ldr	r2, [pc, #280]	; (800325c <ADC_ConversionStop+0x168>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d90d      	bls.n	8003164 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e076      	b.n	8003252 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d1e3      	bne.n	8003140 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b60      	cmp	r3, #96	; 0x60
 8003184:	d015      	beq.n	80031b2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d10e      	bne.n	80031b2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0210 	orr.w	r2, r2, #16
 80031b0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d015      	beq.n	80031e4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d10e      	bne.n	80031e4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b60      	cmp	r3, #96	; 0x60
 80031e8:	d005      	beq.n	80031f6 <ADC_ConversionStop+0x102>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b6c      	cmp	r3, #108	; 0x6c
 80031ee:	d105      	bne.n	80031fc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031f0:	230c      	movs	r3, #12
 80031f2:	617b      	str	r3, [r7, #20]
        break;
 80031f4:	e005      	b.n	8003202 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031f6:	2308      	movs	r3, #8
 80031f8:	617b      	str	r3, [r7, #20]
        break;
 80031fa:	e002      	b.n	8003202 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031fc:	2304      	movs	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
        break;
 8003200:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003202:	f7fe ffc9 	bl	8002198 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003208:	e01b      	b.n	8003242 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800320a:	f7fe ffc5 	bl	8002198 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b0b      	cmp	r3, #11
 8003216:	d914      	bls.n	8003242 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1dc      	bne.n	800320a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000993ff 	.word	0x000993ff

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e037      	b.n	8003508 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f97a 	bl	80037e4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}  
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Start_IT+0x20>
 800352c:	2302      	movs	r3, #2
 800352e:	e04a      	b.n	80035c6 <HAL_DMA_Start_IT+0xb6>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800353e:	2b01      	cmp	r3, #1
 8003540:	d13a      	bne.n	80035b8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f90d 	bl	8003786 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 020e 	orr.w	r2, r2, #14
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e00f      	b.n	80035a6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 020a 	orr.w	r2, r2, #10
 8003594:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e005      	b.n	80035c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d008      	beq.n	80035f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e020      	b.n	8003634 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 020e 	bic.w	r2, r2, #14
 8003600:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2204      	movs	r2, #4
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d024      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x72>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01f      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	2104      	movs	r1, #4
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06a      	beq.n	800377e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	e065      	b.n	800377e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2202      	movs	r2, #2
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02c      	beq.n	800371c <HAL_DMA_IRQHandler+0xdc>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d027      	beq.n	800371c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 020a 	bic.w	r2, r2, #10
 80036e8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2102      	movs	r1, #2
 80036fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003700:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d035      	beq.n	800377e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800371a:	e030      	b.n	800377e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2208      	movs	r2, #8
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d028      	beq.n	800377e <HAL_DMA_IRQHandler+0x13e>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d023      	beq.n	800377e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 020e 	bic.w	r2, r2, #14
 8003744:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
    }
  }
}  
 800377c:	e7ff      	b.n	800377e <HAL_DMA_IRQHandler+0x13e>
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d108      	bne.n	80037c6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037c4:	e007      	b.n	80037d6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <DMA_CalcBaseAndBitshift+0x34>)
 80037f4:	4413      	add	r3, r2
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <DMA_CalcBaseAndBitshift+0x38>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a06      	ldr	r2, [pc, #24]	; (8003820 <DMA_CalcBaseAndBitshift+0x3c>)
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	bffdfff8 	.word	0xbffdfff8
 800381c:	cccccccd 	.word	0xcccccccd
 8003820:	40020000 	.word	0x40020000

08003824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003832:	e14e      	b.n	8003ad2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8140 	beq.w	8003acc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d005      	beq.n	8003864 <HAL_GPIO_Init+0x40>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d130      	bne.n	80038c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	2203      	movs	r2, #3
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800389a:	2201      	movs	r2, #1
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 0201 	and.w	r2, r3, #1
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d017      	beq.n	8003902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	2203      	movs	r2, #3
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d123      	bne.n	8003956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	08da      	lsrs	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3208      	adds	r2, #8
 8003916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	220f      	movs	r2, #15
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	6939      	ldr	r1, [r7, #16]
 8003952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 809a 	beq.w	8003acc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003998:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_GPIO_Init+0x2cc>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	4a54      	ldr	r2, [pc, #336]	; (8003af0 <HAL_GPIO_Init+0x2cc>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6193      	str	r3, [r2, #24]
 80039a4:	4b52      	ldr	r3, [pc, #328]	; (8003af0 <HAL_GPIO_Init+0x2cc>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039b0:	4a50      	ldr	r2, [pc, #320]	; (8003af4 <HAL_GPIO_Init+0x2d0>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	220f      	movs	r2, #15
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039da:	d013      	beq.n	8003a04 <HAL_GPIO_Init+0x1e0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <HAL_GPIO_Init+0x2d4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00d      	beq.n	8003a00 <HAL_GPIO_Init+0x1dc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a45      	ldr	r2, [pc, #276]	; (8003afc <HAL_GPIO_Init+0x2d8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_Init+0x1d8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <HAL_GPIO_Init+0x2dc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_GPIO_Init+0x1d4>
 80039f4:	2303      	movs	r3, #3
 80039f6:	e006      	b.n	8003a06 <HAL_GPIO_Init+0x1e2>
 80039f8:	2305      	movs	r3, #5
 80039fa:	e004      	b.n	8003a06 <HAL_GPIO_Init+0x1e2>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e002      	b.n	8003a06 <HAL_GPIO_Init+0x1e2>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_GPIO_Init+0x1e2>
 8003a04:	2300      	movs	r3, #0
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	f002 0203 	and.w	r2, r2, #3
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	4093      	lsls	r3, r2
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a16:	4937      	ldr	r1, [pc, #220]	; (8003af4 <HAL_GPIO_Init+0x2d0>)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a24:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a48:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a72:	4a24      	ldr	r2, [pc, #144]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa2:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ac6:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <HAL_GPIO_Init+0x2e0>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f aea9 	bne.w	8003834 <HAL_GPIO_Init+0x10>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010000 	.word	0x40010000
 8003af8:	48000400 	.word	0x48000400
 8003afc:	48000800 	.word	0x48000800
 8003b00:	48000c00 	.word	0x48000c00
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e001      	b.n	8003b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f99e 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e081      	b.n	8003cae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fc32 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	e006      	b.n	8003c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d104      	bne.n	8003c32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	817b      	strh	r3, [r7, #10]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	f040 80da 	bne.w	8003e8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0x30>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0d3      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fe fa52 	bl	8002198 <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2319      	movs	r3, #25
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8f0 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0be      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	893a      	ldrh	r2, [r7, #8]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2bff      	cmp	r3, #255	; 0xff
 8003d42:	d90e      	bls.n	8003d62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	4b51      	ldr	r3, [pc, #324]	; (8003e98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f9f6 	bl	800414c <I2C_TransferConfig>
 8003d60:	e06c      	b.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9e5 	bl	800414c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d82:	e05b      	b.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	6a39      	ldr	r1, [r7, #32]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f8ed 	bl	8003f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e07b      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d034      	beq.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d130      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f87f 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e04d      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2bff      	cmp	r3, #255	; 0xff
 8003dfc:	d90e      	bls.n	8003e1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	22ff      	movs	r2, #255	; 0xff
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f999 	bl	800414c <I2C_TransferConfig>
 8003e1a:	e00f      	b.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f988 	bl	800414c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d19e      	bne.n	8003d84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8cc 	bl	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e01a      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_I2C_Master_Transmit+0x1e4>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	80002000 	.word	0x80002000
 8003e9c:	fe00e800 	.word	0xfe00e800

08003ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d103      	bne.n	8003ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d007      	beq.n	8003edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	619a      	str	r2, [r3, #24]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e022      	b.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d01e      	beq.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe f949 	bl	8002198 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d113      	bne.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e00f      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d0cd      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f74:	e02c      	b.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f870 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e02a      	b.n	8003fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d01e      	beq.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe f901 	bl	8002198 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d113      	bne.n	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d1cb      	bne.n	8003f76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff4:	e028      	b.n	8004048 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f830 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e026      	b.n	8004058 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe f8c5 	bl	8002198 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d113      	bne.n	8004048 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d1cf      	bne.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b10      	cmp	r3, #16
 8004078:	d161      	bne.n	800413e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004088:	d02b      	beq.n	80040e2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004098:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800409a:	e022      	b.n	80040e2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d01e      	beq.n	80040e2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7fe f878 	bl	8002198 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <I2C_IsAcknowledgeFailed+0x5a>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e02e      	b.n	8004140 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d1d5      	bne.n	800409c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2210      	movs	r2, #16
 80040f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fecd 	bl	8003ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <I2C_IsAcknowledgeFailed+0xe8>)
 8004112:	400b      	ands	r3, r1
 8004114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	4613      	mov	r3, r2
 800415c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	0d5b      	lsrs	r3, r3, #21
 8004168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <I2C_TransferConfig+0x58>)
 800416e:	430b      	orrs	r3, r1
 8004170:	43db      	mvns	r3, r3
 8004172:	ea02 0103 	and.w	r1, r2, r3
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800417c:	7a7b      	ldrb	r3, [r7, #9]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	431a      	orrs	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	03ff63ff 	.word	0x03ff63ff

080041a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d138      	bne.n	8004230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e032      	b.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	; 0x24
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d139      	bne.n	80042c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800425e:	2302      	movs	r3, #2
 8004260:	e033      	b.n	80042ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	; 0x24
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f001 b823 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 817d 	beq.w	800460e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004314:	4bbc      	ldr	r3, [pc, #752]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b04      	cmp	r3, #4
 800431e:	d00c      	beq.n	800433a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004320:	4bb9      	ldr	r3, [pc, #740]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d15c      	bne.n	80043e6 <HAL_RCC_OscConfig+0x10e>
 800432c:	4bb6      	ldr	r3, [pc, #728]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d155      	bne.n	80043e6 <HAL_RCC_OscConfig+0x10e>
 800433a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800434e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_RCC_OscConfig+0x94>
 8004366:	4ba8      	ldr	r3, [pc, #672]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e015      	b.n	8004398 <HAL_RCC_OscConfig+0xc0>
 800436c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004370:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004384:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004388:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004394:	4b9c      	ldr	r3, [pc, #624]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800439c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043a4:	fa92 f2a2 	rbit	r2, r2
 80043a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80043b0:	fab2 f282 	clz	r2, r2
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	f042 0220 	orr.w	r2, r2, #32
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f002 021f 	and.w	r2, r2, #31
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 811f 	beq.w	800460c <HAL_RCC_OscConfig+0x334>
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 8116 	bne.w	800460c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f000 bfaf 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x12e>
 80043f8:	4b83      	ldr	r3, [pc, #524]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a82      	ldr	r2, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e036      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 8004406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x158>
 8004416:	4b7c      	ldr	r3, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7b      	ldr	r2, [pc, #492]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a78      	ldr	r2, [pc, #480]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e021      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x184>
 8004442:	4b71      	ldr	r3, [pc, #452]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a70      	ldr	r2, [pc, #448]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b6e      	ldr	r3, [pc, #440]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6d      	ldr	r2, [pc, #436]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 800445c:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a69      	ldr	r2, [pc, #420]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b67      	ldr	r3, [pc, #412]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a66      	ldr	r2, [pc, #408]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004472:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004474:	4b64      	ldr	r3, [pc, #400]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	f023 020f 	bic.w	r2, r3, #15
 800447c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	495f      	ldr	r1, [pc, #380]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800448a:	4313      	orrs	r3, r2
 800448c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d059      	beq.n	8004552 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fd fe7b 	bl	8002198 <HAL_GetTick>
 80044a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fd fe76 	bl	8002198 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d902      	bls.n	80044be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f000 bf43 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 80044be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80044d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_RCC_OscConfig+0x218>
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	e015      	b.n	800451c <HAL_RCC_OscConfig+0x244>
 80044f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004508:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800450c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004520:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004524:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004528:	fa92 f2a2 	rbit	r2, r2
 800452c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004530:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004534:	fab2 f282 	clz	r2, r2
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	f002 021f 	and.w	r2, r2, #31
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f202 	lsl.w	r2, r1, r2
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ab      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1d0>
 8004550:	e05d      	b.n	800460e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd fe21 	bl	8002198 <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd fe1c 	bl	8002198 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d902      	bls.n	8004572 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f000 bee9 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004576:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004586:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2cc>
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x2f8>
 80045a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_RCC_OscConfig+0x330>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80045d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80045e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ab      	bne.n	800455c <HAL_RCC_OscConfig+0x284>
 8004604:	e003      	b.n	800460e <HAL_RCC_OscConfig+0x336>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 817d 	beq.w	800491e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004624:	4ba6      	ldr	r3, [pc, #664]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00b      	beq.n	8004648 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004630:	4ba3      	ldr	r3, [pc, #652]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d172      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 800463c:	4ba0      	ldr	r3, [pc, #640]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d16c      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 8004648:	2302      	movs	r3, #2
 800464a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800465a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x3a0>
 8004672:	4b93      	ldr	r3, [pc, #588]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	e013      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c8>
 8004678:	2302      	movs	r3, #2
 800467a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800468a:	2302      	movs	r3, #2
 800468c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004690:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800469c:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2202      	movs	r2, #2
 80046a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046aa:	fa92 f2a2 	rbit	r2, r2
 80046ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046b6:	fab2 f282 	clz	r2, r2
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	f042 0220 	orr.w	r2, r2, #32
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	f002 021f 	and.w	r2, r2, #31
 80046c6:	2101      	movs	r1, #1
 80046c8:	fa01 f202 	lsl.w	r2, r1, r2
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCC_OscConfig+0x410>
 80046d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f000 be2e 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	21f8      	movs	r1, #248	; 0xf8
 80046fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004706:	fa91 f1a1 	rbit	r1, r1
 800470a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800470e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004712:	fab1 f181 	clz	r1, r1
 8004716:	b2c9      	uxtb	r1, r1
 8004718:	408b      	lsls	r3, r1
 800471a:	4969      	ldr	r1, [pc, #420]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004720:	e0fd      	b.n	800491e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8088 	beq.w	8004844 <HAL_RCC_OscConfig+0x56c>
 8004734:	2301      	movs	r3, #1
 8004736:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004746:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	2301      	movs	r3, #1
 800475e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd fd1a 	bl	8002198 <HAL_GetTick>
 8004764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7fd fd15 	bl	8002198 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	f000 bde2 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004780:	2302      	movs	r3, #2
 8004782:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004792:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x4d8>
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	e013      	b.n	80047d8 <HAL_RCC_OscConfig+0x500>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047c2:	2302      	movs	r3, #2
 80047c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80047d4:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2202      	movs	r2, #2
 80047da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80047de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80047e2:	fa92 f2a2 	rbit	r2, r2
 80047e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80047ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80047ee:	fab2 f282 	clz	r2, r2
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	f042 0220 	orr.w	r2, r2, #32
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f002 021f 	and.w	r2, r2, #31
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f202 	lsl.w	r2, r1, r2
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0af      	beq.n	800476a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	21f8      	movs	r1, #248	; 0xf8
 8004820:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004828:	fa91 f1a1 	rbit	r1, r1
 800482c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004830:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004834:	fab1 f181 	clz	r1, r1
 8004838:	b2c9      	uxtb	r1, r1
 800483a:	408b      	lsls	r3, r1
 800483c:	4920      	ldr	r1, [pc, #128]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
 8004842:	e06c      	b.n	800491e <HAL_RCC_OscConfig+0x646>
 8004844:	2301      	movs	r3, #1
 8004846:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004856:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fd fc92 	bl	8002198 <HAL_GetTick>
 8004874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487a:	f7fd fc8d 	bl	8002198 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d902      	bls.n	8004890 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	f000 bd5a 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004890:	2302      	movs	r3, #2
 8004892:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d104      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5ec>
 80048ba:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e015      	b.n	80048ec <HAL_RCC_OscConfig+0x614>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	2302      	movs	r3, #2
 80048c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048d6:	2302      	movs	r3, #2
 80048d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80048dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80048e8:	4bc8      	ldr	r3, [pc, #800]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2202      	movs	r2, #2
 80048ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80048f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80048f6:	fa92 f2a2 	rbit	r2, r2
 80048fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80048fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004902:	fab2 f282 	clz	r2, r2
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f002 021f 	and.w	r2, r2, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ad      	bne.n	800487a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8110 	beq.w	8004b54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d079      	beq.n	8004a38 <HAL_RCC_OscConfig+0x760>
 8004944:	2301      	movs	r3, #1
 8004946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	4bab      	ldr	r3, [pc, #684]	; (8004c10 <HAL_RCC_OscConfig+0x938>)
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	461a      	mov	r2, r3
 800496a:	2301      	movs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496e:	f7fd fc13 	bl	8002198 <HAL_GetTick>
 8004972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fd fc0e 	bl	8002198 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d902      	bls.n	800498e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	f000 bcdb 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 800498e:	2302      	movs	r3, #2
 8004990:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049a8:	2202      	movs	r2, #2
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	fa93 f2a3 	rbit	r2, r3
 80049ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049cc:	2202      	movs	r2, #2
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	fa93 f2a3 	rbit	r2, r3
 80049de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 80049ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049f4:	2102      	movs	r1, #2
 80049f6:	6019      	str	r1, [r3, #0]
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	fa93 f1a3 	rbit	r1, r3
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a0e:	6019      	str	r1, [r3, #0]
  return result;
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0a0      	beq.n	8004978 <HAL_RCC_OscConfig+0x6a0>
 8004a36:	e08d      	b.n	8004b54 <HAL_RCC_OscConfig+0x87c>
 8004a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	fa93 f2a3 	rbit	r2, r3
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a5a:	601a      	str	r2, [r3, #0]
  return result;
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x938>)
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fb8d 	bl	8002198 <HAL_GetTick>
 8004a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fd fb88 	bl	8002198 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d902      	bls.n	8004a9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	f000 bc55 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	fa93 f2a3 	rbit	r2, r3
 8004ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ace:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	fa93 f2a3 	rbit	r2, r3
 8004ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aea:	2202      	movs	r2, #2
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fa93 f2a3 	rbit	r2, r3
 8004afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b12:	2102      	movs	r1, #2
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	fa93 f1a3 	rbit	r1, r3
 8004b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b2c:	6019      	str	r1, [r3, #0]
  return result;
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d197      	bne.n	8004a84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 81a1 	beq.w	8004eac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ba2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11a      	bne.n	8004bec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fae9 	bl	8002198 <HAL_GetTick>
 8004bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	e009      	b.n	8004be0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fd fae4 	bl	8002198 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	; 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e3b1      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ef      	beq.n	8004bcc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10d      	bne.n	8004c18 <HAL_RCC_OscConfig+0x940>
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a02      	ldr	r2, [pc, #8]	; (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6213      	str	r3, [r2, #32]
 8004c08:	e03c      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	10908120 	.word	0x10908120
 8004c14:	40007000 	.word	0x40007000
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0x96a>
 8004c28:	4bc1      	ldr	r3, [pc, #772]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4ac0      	ldr	r2, [pc, #768]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	6213      	str	r3, [r2, #32]
 8004c34:	4bbe      	ldr	r3, [pc, #760]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4abd      	ldr	r2, [pc, #756]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	6213      	str	r3, [r2, #32]
 8004c40:	e020      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x994>
 8004c52:	4bb7      	ldr	r3, [pc, #732]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4ab6      	ldr	r2, [pc, #728]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	6213      	str	r3, [r2, #32]
 8004c5e:	4bb4      	ldr	r3, [pc, #720]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4ab3      	ldr	r2, [pc, #716]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6213      	str	r3, [r2, #32]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c6c:	4bb0      	ldr	r3, [pc, #704]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4aaf      	ldr	r2, [pc, #700]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	6213      	str	r3, [r2, #32]
 8004c78:	4bad      	ldr	r3, [pc, #692]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	4aac      	ldr	r2, [pc, #688]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c7e:	f023 0304 	bic.w	r3, r3, #4
 8004c82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8081 	beq.w	8004d98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c96:	f7fd fa7f 	bl	8002198 <HAL_GetTick>
 8004c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fd fa7a 	bl	8002198 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e345      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	fa93 f2a3 	rbit	r2, r3
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004cfe:	601a      	str	r2, [r3, #0]
  return result;
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_OscConfig+0xa4c>
 8004d1e:	4b84      	ldr	r3, [pc, #528]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	e013      	b.n	8004d4c <HAL_RCC_OscConfig+0xa74>
 8004d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b79      	ldr	r3, [pc, #484]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d54:	2102      	movs	r1, #2
 8004d56:	6011      	str	r1, [r2, #0]
 8004d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	fa92 f1a2 	rbit	r1, r2
 8004d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d6e:	6011      	str	r1, [r2, #0]
  return result;
 8004d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	fab2 f282 	clz	r2, r2
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f002 021f 	and.w	r2, r2, #31
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d084      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x9c8>
 8004d96:	e07f      	b.n	8004e98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d98:	f7fd f9fe 	bl	8002198 <HAL_GetTick>
 8004d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da0:	e00b      	b.n	8004dba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fd f9f9 	bl	8002198 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e2c4      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004de6:	2202      	movs	r2, #2
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e00:	601a      	str	r2, [r3, #0]
  return result;
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_OscConfig+0xb4e>
 8004e20:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	e013      	b.n	8004e4e <HAL_RCC_OscConfig+0xb76>
 8004e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e2e:	2202      	movs	r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	fa93 f2a3 	rbit	r2, r3
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e56:	2102      	movs	r1, #2
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	fa92 f1a2 	rbit	r1, r2
 8004e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e70:	6011      	str	r1, [r2, #0]
  return result;
 8004e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	fab2 f282 	clz	r2, r2
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	f002 021f 	and.w	r2, r2, #31
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d184      	bne.n	8004da2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8242 	beq.w	8005342 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	f000 8213 	beq.w	80052f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f040 8162 	bne.w	80051a2 <HAL_RCC_OscConfig+0xeca>
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	fa93 f2a3 	rbit	r2, r3
 8004efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f02:	601a      	str	r2, [r3, #0]
  return result;
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2300      	movs	r3, #0
 8004f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fd f938 	bl	8002198 <HAL_GetTick>
 8004f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCC_OscConfig+0xc70>
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd f930 	bl	8002198 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1fd      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	fa93 f2a3 	rbit	r2, r3
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f6c:	601a      	str	r2, [r3, #0]
  return result;
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_OscConfig+0xcba>
 8004f8c:	4bb0      	ldr	r3, [pc, #704]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	e027      	b.n	8004fe2 <HAL_RCC_OscConfig+0xd0a>
 8004f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4b9c      	ldr	r3, [pc, #624]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fe6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004fea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fee:	6011      	str	r1, [r2, #0]
 8004ff0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ff4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	fa92 f1a2 	rbit	r1, r2
 8004ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005002:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005006:	6011      	str	r1, [r2, #0]
  return result;
 8005008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800500c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f042 0220 	orr.w	r2, r2, #32
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	f002 021f 	and.w	r2, r2, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d182      	bne.n	8004f34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502e:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	430b      	orrs	r3, r1
 8005050:	497f      	ldr	r1, [pc, #508]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
 8005056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800505e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	fa93 f2a3 	rbit	r2, r3
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800507a:	601a      	str	r2, [r3, #0]
  return result;
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005084:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	461a      	mov	r2, r3
 8005098:	2301      	movs	r3, #1
 800509a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fd f87c 	bl	8002198 <HAL_GetTick>
 80050a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a4:	e009      	b.n	80050ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fd f877 	bl	8002198 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e144      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 80050ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fa93 f2a3 	rbit	r2, r3
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80050de:	601a      	str	r2, [r3, #0]
  return result;
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80050e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0xe2c>
 80050fe:	4b54      	ldr	r3, [pc, #336]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e027      	b.n	8005154 <HAL_RCC_OscConfig+0xe7c>
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800510c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005116:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	fa93 f2a3 	rbit	r2, r3
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005158:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800515c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005160:	6011      	str	r1, [r2, #0]
 8005162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005166:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	fa92 f1a2 	rbit	r1, r2
 8005170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005174:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005178:	6011      	str	r1, [r2, #0]
  return result;
 800517a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800517e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	fab2 f282 	clz	r2, r2
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	f042 0220 	orr.w	r2, r2, #32
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	f002 021f 	and.w	r2, r2, #31
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f202 	lsl.w	r2, r1, r2
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d082      	beq.n	80050a6 <HAL_RCC_OscConfig+0xdce>
 80051a0:	e0cf      	b.n	8005342 <HAL_RCC_OscConfig+0x106a>
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	fa93 f2a3 	rbit	r2, r3
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051c6:	601a      	str	r2, [r3, #0]
  return result;
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc ffd6 	bl	8002198 <HAL_GetTick>
 80051ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f0:	e009      	b.n	8005206 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fc ffd1 	bl	8002198 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e09e      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800520e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800522a:	601a      	str	r2, [r3, #0]
  return result;
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d104      	bne.n	8005254 <HAL_RCC_OscConfig+0xf7c>
 800524a:	4b01      	ldr	r3, [pc, #4]	; (8005250 <HAL_RCC_OscConfig+0xf78>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	e029      	b.n	80052a4 <HAL_RCC_OscConfig+0xfcc>
 8005250:	40021000 	.word	0x40021000
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800525c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005266:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005274:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_OscConfig+0x1078>)
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	fa92 f1a2 	rbit	r1, r2
 80052c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052c8:	6011      	str	r1, [r2, #0]
  return result;
 80052ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	fab2 f282 	clz	r2, r2
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	f042 0220 	orr.w	r2, r2, #32
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f002 021f 	and.w	r2, r2, #31
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d180      	bne.n	80051f2 <HAL_RCC_OscConfig+0xf1a>
 80052f0:	e027      	b.n	8005342 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e01e      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_OscConfig+0x1078>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800530e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005312:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	429a      	cmp	r2, r3
 8005324:	d10b      	bne.n	800533e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800532a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b09e      	sub	sp, #120	; 0x78
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e162      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d910      	bls.n	800539c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b8d      	ldr	r3, [pc, #564]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	498b      	ldr	r1, [pc, #556]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b89      	ldr	r3, [pc, #548]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e14a      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b82      	ldr	r3, [pc, #520]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	497f      	ldr	r1, [pc, #508]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80dc 	beq.w	8005580 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d13c      	bne.n	800544a <HAL_RCC_ClockConfig+0xf6>
 80053d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e0:	fab3 f383 	clz	r3, r3
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d102      	bne.n	80053fa <HAL_RCC_ClockConfig+0xa6>
 80053f4:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	e00f      	b.n	800541a <HAL_RCC_ClockConfig+0xc6>
 80053fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	667b      	str	r3, [r7, #100]	; 0x64
 8005408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800540c:	663b      	str	r3, [r7, #96]	; 0x60
 800540e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005410:	fa93 f3a3 	rbit	r3, r3
 8005414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800541e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005422:	fa92 f2a2 	rbit	r2, r2
 8005426:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800542a:	fab2 f282 	clz	r2, r2
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	f042 0220 	orr.w	r2, r2, #32
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	f002 021f 	and.w	r2, r2, #31
 800543a:	2101      	movs	r1, #1
 800543c:	fa01 f202 	lsl.w	r2, r1, r2
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d17b      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e0f3      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d13c      	bne.n	80054cc <HAL_RCC_ClockConfig+0x178>
 8005452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d102      	bne.n	800547c <HAL_RCC_ClockConfig+0x128>
 8005476:	4b4f      	ldr	r3, [pc, #316]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	e00f      	b.n	800549c <HAL_RCC_ClockConfig+0x148>
 800547c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005480:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
 800548a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800548e:	643b      	str	r3, [r7, #64]	; 0x40
 8005490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005498:	4b46      	ldr	r3, [pc, #280]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80054a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a4:	fa92 f2a2 	rbit	r2, r2
 80054a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ac:	fab2 f282 	clz	r2, r2
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	f042 0220 	orr.w	r2, r2, #32
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	f002 021f 	and.w	r2, r2, #31
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f202 	lsl.w	r2, r1, r2
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d13a      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0b2      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
 80054cc:	2302      	movs	r3, #2
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	fa93 f3a3 	rbit	r3, r3
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d102      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
 80054ee:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	e00d      	b.n	8005510 <HAL_RCC_ClockConfig+0x1bc>
 80054f4:	2302      	movs	r3, #2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	2302      	movs	r3, #2
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	fa93 f3a3 	rbit	r3, r3
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2202      	movs	r2, #2
 8005512:	61ba      	str	r2, [r7, #24]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	fa92 f2a2 	rbit	r2, r2
 800551a:	617a      	str	r2, [r7, #20]
  return result;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	fab2 f282 	clz	r2, r2
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	f042 0220 	orr.w	r2, r2, #32
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	f002 021f 	and.w	r2, r2, #31
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e079      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	491a      	ldr	r1, [pc, #104]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005550:	f7fc fe22 	bl	8002198 <HAL_GetTick>
 8005554:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fc fe1e 	bl	8002198 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e061      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d214      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4906      	ldr	r1, [pc, #24]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e040      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
 80055b0:	40022000 	.word	0x40022000
 80055b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	491a      	ldr	r1, [pc, #104]	; (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e2:	4b16      	ldr	r3, [pc, #88]	; (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4912      	ldr	r1, [pc, #72]	; (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055f6:	f000 f829 	bl	800564c <HAL_RCC_GetSysClockFreq>
 80055fa:	4601      	mov	r1, r0
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	22f0      	movs	r2, #240	; 0xf0
 8005606:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	fa92 f2a2 	rbit	r2, r2
 800560e:	60fa      	str	r2, [r7, #12]
  return result;
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	fab2 f282 	clz	r2, r2
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	40d3      	lsrs	r3, r2
 800561a:	4a09      	ldr	r2, [pc, #36]	; (8005640 <HAL_RCC_ClockConfig+0x2ec>)
 800561c:	5cd3      	ldrb	r3, [r2, r3]
 800561e:	fa21 f303 	lsr.w	r3, r1, r3
 8005622:	4a08      	ldr	r2, [pc, #32]	; (8005644 <HAL_RCC_ClockConfig+0x2f0>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <HAL_RCC_ClockConfig+0x2f4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fc fd70 	bl	8002110 <HAL_InitTick>
  
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3778      	adds	r7, #120	; 0x78
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	08009a94 	.word	0x08009a94
 8005644:	20000008 	.word	0x20000008
 8005648:	2000000c 	.word	0x2000000c

0800564c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b08b      	sub	sp, #44	; 0x2c
 8005650:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x30>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x36>
 800567a:	e03c      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800567c:	4b24      	ldr	r3, [pc, #144]	; (8005710 <HAL_RCC_GetSysClockFreq+0xc4>)
 800567e:	623b      	str	r3, [r7, #32]
      break;
 8005680:	e03c      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005688:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800568c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	fa92 f2a2 	rbit	r2, r2
 8005694:	607a      	str	r2, [r7, #4]
  return result;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	fab2 f282 	clz	r2, r2
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	40d3      	lsrs	r3, r2
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056a6:	4b19      	ldr	r3, [pc, #100]	; (800570c <HAL_RCC_GetSysClockFreq+0xc0>)
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	220f      	movs	r2, #15
 80056b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	fa92 f2a2 	rbit	r2, r2
 80056b8:	60fa      	str	r2, [r7, #12]
  return result;
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	fab2 f282 	clz	r2, r2
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	40d3      	lsrs	r3, r2
 80056c4:	4a14      	ldr	r2, [pc, #80]	; (8005718 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	e004      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4a0c      	ldr	r2, [pc, #48]	; (800571c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	623b      	str	r3, [r7, #32]
      break;
 80056f4:	e002      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056f8:	623b      	str	r3, [r7, #32]
      break;
 80056fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	372c      	adds	r7, #44	; 0x2c
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
 8005710:	007a1200 	.word	0x007a1200
 8005714:	08009aac 	.word	0x08009aac
 8005718:	08009abc 	.word	0x08009abc
 800571c:	003d0900 	.word	0x003d0900

08005720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <HAL_RCC_GetHCLKFreq+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000008 	.word	0x20000008

08005738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800573e:	f7ff ffef 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005742:	4601      	mov	r1, r0
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800574c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005750:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	fa92 f2a2 	rbit	r2, r2
 8005758:	603a      	str	r2, [r7, #0]
  return result;
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	fab2 f282 	clz	r2, r2
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	40d3      	lsrs	r3, r2
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005766:	5cd3      	ldrb	r3, [r2, r3]
 8005768:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	08009aa4 	.word	0x08009aa4

0800577c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005782:	f7ff ffcd 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005786:	4601      	mov	r1, r0
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005790:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005794:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	fa92 f2a2 	rbit	r2, r2
 800579c:	603a      	str	r2, [r7, #0]
  return result;
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	fab2 f282 	clz	r2, r2
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	40d3      	lsrs	r3, r2
 80057a8:	4a04      	ldr	r2, [pc, #16]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80057aa:	5cd3      	ldrb	r3, [r2, r3]
 80057ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000
 80057bc:	08009aa4 	.word	0x08009aa4

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b092      	sub	sp, #72	; 0x48
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80cd 	beq.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e4:	4b8e      	ldr	r3, [pc, #568]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f0:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4a8a      	ldr	r2, [pc, #552]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	61d3      	str	r3, [r2, #28]
 80057fc:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d118      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581a:	4b82      	ldr	r3, [pc, #520]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a81      	ldr	r2, [pc, #516]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fc fcb7 	bl	8002198 <HAL_GetTick>
 800582a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fc fcb3 	bl	8002198 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e0ea      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b78      	ldr	r3, [pc, #480]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800584c:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d07d      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005866:	429a      	cmp	r2, r3
 8005868:	d076      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800586a:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	fa93 f3a3 	rbit	r3, r3
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	461a      	mov	r2, r3
 8005894:	2301      	movs	r3, #1
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800589c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a8:	fab3 f383 	clz	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	461a      	mov	r2, r3
 80058b8:	2300      	movs	r3, #0
 80058ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d045      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc fc64 	bl	8002198 <HAL_GetTick>
 80058d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d2:	e00a      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fc fc60 	bl	8002198 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e095      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80058ea:	2302      	movs	r3, #2
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	fa93 f3a3 	rbit	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	2302      	movs	r3, #2
 80058f8:	623b      	str	r3, [r7, #32]
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	fa93 f3a3 	rbit	r3, r3
 8005900:	61fb      	str	r3, [r7, #28]
  return result;
 8005902:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	fab3 f383 	clz	r3, r3
 8005908:	b2db      	uxtb	r3, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d102      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005918:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	e007      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800591e:	2302      	movs	r3, #2
 8005920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	fa93 f3a3 	rbit	r3, r3
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2202      	movs	r2, #2
 8005930:	613a      	str	r2, [r7, #16]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	fa92 f2a2 	rbit	r2, r2
 8005938:	60fa      	str	r2, [r7, #12]
  return result;
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	fab2 f282 	clz	r2, r2
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	f002 021f 	and.w	r2, r2, #31
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f202 	lsl.w	r2, r1, r2
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0bd      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	492e      	ldr	r1, [pc, #184]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005966:	4313      	orrs	r3, r2
 8005968:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800596a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005972:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800598a:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4922      	ldr	r1, [pc, #136]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	4313      	orrs	r3, r2
 800599a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f023 0210 	bic.w	r2, r3, #16
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	491a      	ldr	r1, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059c6:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	4913      	ldr	r1, [pc, #76]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	490b      	ldr	r1, [pc, #44]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	4904      	ldr	r1, [pc, #16]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3748      	adds	r7, #72	; 0x48
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40007000 	.word	0x40007000
 8005a28:	10908100 	.word	0x10908100

08005a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e049      	b.n	8005ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc f952 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f000 faf6 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d001      	beq.n	8005af4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e038      	b.n	8005b66 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <HAL_TIM_Base_Start+0x98>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_TIM_Base_Start+0x48>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d009      	beq.n	8005b24 <HAL_TIM_Base_Start+0x48>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_TIM_Base_Start+0x9c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_TIM_Base_Start+0x48>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <HAL_TIM_Base_Start+0xa0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d115      	bne.n	8005b50 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <HAL_TIM_Base_Start+0xa4>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b06      	cmp	r3, #6
 8005b34:	d015      	beq.n	8005b62 <HAL_TIM_Base_Start+0x86>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d011      	beq.n	8005b62 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	e008      	b.n	8005b62 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e000      	b.n	8005b64 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	00010007 	.word	0x00010007

08005b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e040      	b.n	8005c1e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <HAL_TIM_Base_Start_IT+0xa8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x58>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x58>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_TIM_Base_Start_IT+0xac>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x58>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_TIM_Base_Start_IT+0xb0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d115      	bne.n	8005c08 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <HAL_TIM_Base_Start_IT+0xb4>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d015      	beq.n	8005c1a <HAL_TIM_Base_Start_IT+0x96>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d011      	beq.n	8005c1a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c06:	e008      	b.n	8005c1a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e000      	b.n	8005c1c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	00010007 	.word	0x00010007

08005c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d122      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d11b      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0202 	mvn.w	r2, #2
 8005c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9ce 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f9c0 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f9d1 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d122      	bne.n	8005cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0204 	mvn.w	r2, #4
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f9a4 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f996 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f9a7 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d122      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d11b      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0208 	mvn.w	r2, #8
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f97a 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f96c 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f97d 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d122      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d11b      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0210 	mvn.w	r2, #16
 8005d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f950 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d80:	e005      	b.n	8005d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f942 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f953 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0201 	mvn.w	r2, #1
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc f850 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b80      	cmp	r3, #128	; 0x80
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd8:	2b80      	cmp	r3, #128	; 0x80
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fac2 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d10e      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d107      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fab5 	bl	8006384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d10e      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f901 	bl	8006048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d10e      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d107      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f06f 0220 	mvn.w	r2, #32
 8005e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa75 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_ConfigClockSource+0x1c>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0b6      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x18a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed2:	d03e      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0xd8>
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	f200 8087 	bhi.w	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	f000 8086 	beq.w	8005ff0 <HAL_TIM_ConfigClockSource+0x176>
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d87f      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005eea:	2b70      	cmp	r3, #112	; 0x70
 8005eec:	d01a      	beq.n	8005f24 <HAL_TIM_ConfigClockSource+0xaa>
 8005eee:	2b70      	cmp	r3, #112	; 0x70
 8005ef0:	d87b      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005ef2:	2b60      	cmp	r3, #96	; 0x60
 8005ef4:	d050      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0x11e>
 8005ef6:	2b60      	cmp	r3, #96	; 0x60
 8005ef8:	d877      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005efa:	2b50      	cmp	r3, #80	; 0x50
 8005efc:	d03c      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0xfe>
 8005efe:	2b50      	cmp	r3, #80	; 0x50
 8005f00:	d873      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d058      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x13e>
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d86f      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005f0a:	2b30      	cmp	r3, #48	; 0x30
 8005f0c:	d064      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005f0e:	2b30      	cmp	r3, #48	; 0x30
 8005f10:	d86b      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d060      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d867      	bhi.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d05c      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d05a      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005f22:	e062      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f000 f984 	bl	8006240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
      break;
 8005f50:	e04f      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f000 f96d 	bl	8006240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f74:	609a      	str	r2, [r3, #8]
      break;
 8005f76:	e03c      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f000 f8e1 	bl	800614c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2150      	movs	r1, #80	; 0x50
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 f93a 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005f96:	e02c      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f000 f900 	bl	80061aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2160      	movs	r1, #96	; 0x60
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f92a 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e01c      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6859      	ldr	r1, [r3, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f000 f8c1 	bl	800614c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2140      	movs	r1, #64	; 0x40
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f91a 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005fd6:	e00c      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f000 f911 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e003      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
      break;
 8005fee:	e000      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ff0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a32      	ldr	r2, [pc, #200]	; (8006138 <TIM_Base_SetConfig+0xdc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_Base_SetConfig+0x28>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0x28>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2f      	ldr	r2, [pc, #188]	; (800613c <TIM_Base_SetConfig+0xe0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d108      	bne.n	8006096 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <TIM_Base_SetConfig+0xdc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <TIM_Base_SetConfig+0x6a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d00f      	beq.n	80060c6 <TIM_Base_SetConfig+0x6a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a24      	ldr	r2, [pc, #144]	; (800613c <TIM_Base_SetConfig+0xe0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_Base_SetConfig+0x6a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a23      	ldr	r2, [pc, #140]	; (8006140 <TIM_Base_SetConfig+0xe4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_Base_SetConfig+0x6a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a22      	ldr	r2, [pc, #136]	; (8006144 <TIM_Base_SetConfig+0xe8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_Base_SetConfig+0x6a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <TIM_Base_SetConfig+0xec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <TIM_Base_SetConfig+0xdc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_Base_SetConfig+0xc0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <TIM_Base_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0xc0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <TIM_Base_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0xc0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <TIM_Base_SetConfig+0xec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d103      	bne.n	8006124 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40000400 	.word	0x40000400
 8006140:	40014000 	.word	0x40014000
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800

0800614c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0201 	bic.w	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 030a 	bic.w	r3, r3, #10
 8006188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0210 	bic.w	r2, r3, #16
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	f043 0307 	orr.w	r3, r3, #7
 800622c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	431a      	orrs	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4313      	orrs	r3, r2
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e054      	b.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a24      	ldr	r2, [pc, #144]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d009      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a13      	ldr	r2, [pc, #76]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a11      	ldr	r2, [pc, #68]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10c      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40000400 	.word	0x40000400
 8006358:	40014000 	.word	0x40014000

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e040      	b.n	800642c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb fd0e 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	; 0x24
 80063c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8c0 	bl	800655c <UART_SetConfig>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e022      	b.n	800642c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f9ea 	bl	80067c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa71 	bl	800690c <UART_CheckIdleState>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006448:	2b20      	cmp	r3, #32
 800644a:	f040 8082 	bne.w	8006552 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_UART_Transmit+0x26>
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e07a      	b.n	8006554 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_UART_Transmit+0x38>
 8006468:	2302      	movs	r3, #2
 800646a:	e073      	b.n	8006554 <HAL_UART_Transmit+0x120>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2221      	movs	r2, #33	; 0x21
 8006480:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006482:	f7fb fe89 	bl	8002198 <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d108      	bne.n	80064b4 <HAL_UART_Transmit+0x80>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e003      	b.n	80064bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064c4:	e02d      	b.n	8006522 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fa64 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e039      	b.n	8006554 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	881a      	ldrh	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f2:	b292      	uxth	r2, r2
 80064f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3302      	adds	r3, #2
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e008      	b.n	8006510 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	b292      	uxth	r2, r2
 8006508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1cb      	bne.n	80064c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2140      	movs	r1, #64	; 0x40
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fa30 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e005      	b.n	8006554 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b8a      	ldr	r3, [pc, #552]	; (80067b0 <UART_SetConfig+0x254>)
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	430b      	orrs	r3, r1
 8006592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a78      	ldr	r2, [pc, #480]	; (80067b4 <UART_SetConfig+0x258>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d120      	bne.n	800661a <UART_SetConfig+0xbe>
 80065d8:	4b77      	ldr	r3, [pc, #476]	; (80067b8 <UART_SetConfig+0x25c>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d817      	bhi.n	8006614 <UART_SetConfig+0xb8>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x90>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006609 	.word	0x08006609
 80065f4:	0800660f 	.word	0x0800660f
 80065f8:	08006603 	.word	0x08006603
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e01d      	b.n	800663e <UART_SetConfig+0xe2>
 8006602:	2302      	movs	r3, #2
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e01a      	b.n	800663e <UART_SetConfig+0xe2>
 8006608:	2304      	movs	r3, #4
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e017      	b.n	800663e <UART_SetConfig+0xe2>
 800660e:	2308      	movs	r3, #8
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e014      	b.n	800663e <UART_SetConfig+0xe2>
 8006614:	2310      	movs	r3, #16
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e011      	b.n	800663e <UART_SetConfig+0xe2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a67      	ldr	r2, [pc, #412]	; (80067bc <UART_SetConfig+0x260>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d102      	bne.n	800662a <UART_SetConfig+0xce>
 8006624:	2300      	movs	r3, #0
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e009      	b.n	800663e <UART_SetConfig+0xe2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a64      	ldr	r2, [pc, #400]	; (80067c0 <UART_SetConfig+0x264>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d102      	bne.n	800663a <UART_SetConfig+0xde>
 8006634:	2300      	movs	r3, #0
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e001      	b.n	800663e <UART_SetConfig+0xe2>
 800663a:	2310      	movs	r3, #16
 800663c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d15b      	bne.n	8006700 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006648:	7ffb      	ldrb	r3, [r7, #31]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d827      	bhi.n	800669e <UART_SetConfig+0x142>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xf8>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	0800669f 	.word	0x0800669f
 8006664:	0800668f 	.word	0x0800668f
 8006668:	0800669f 	.word	0x0800669f
 800666c:	0800669f 	.word	0x0800669f
 8006670:	0800669f 	.word	0x0800669f
 8006674:	08006697 	.word	0x08006697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006678:	f7ff f85e 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 800667c:	61b8      	str	r0, [r7, #24]
        break;
 800667e:	e013      	b.n	80066a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006680:	f7ff f87c 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 8006684:	61b8      	str	r0, [r7, #24]
        break;
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b4e      	ldr	r3, [pc, #312]	; (80067c4 <UART_SetConfig+0x268>)
 800668a:	61bb      	str	r3, [r7, #24]
        break;
 800668c:	e00c      	b.n	80066a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fe ffdd 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8006692:	61b8      	str	r0, [r7, #24]
        break;
 8006694:	e008      	b.n	80066a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e004      	b.n	80066a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	77bb      	strb	r3, [r7, #30]
        break;
 80066a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d074      	beq.n	8006798 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	005a      	lsls	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	441a      	add	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d916      	bls.n	80066fa <UART_SetConfig+0x19e>
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	d212      	bcs.n	80066fa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f023 030f 	bic.w	r3, r3, #15
 80066dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	89fb      	ldrh	r3, [r7, #14]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	89fa      	ldrh	r2, [r7, #14]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	e04e      	b.n	8006798 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	77bb      	strb	r3, [r7, #30]
 80066fe:	e04b      	b.n	8006798 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	2b08      	cmp	r3, #8
 8006704:	d827      	bhi.n	8006756 <UART_SetConfig+0x1fa>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <UART_SetConfig+0x1b0>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	08006757 	.word	0x08006757
 800671c:	08006747 	.word	0x08006747
 8006720:	08006757 	.word	0x08006757
 8006724:	08006757 	.word	0x08006757
 8006728:	08006757 	.word	0x08006757
 800672c:	0800674f 	.word	0x0800674f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7ff f802 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8006734:	61b8      	str	r0, [r7, #24]
        break;
 8006736:	e013      	b.n	8006760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006738:	f7ff f820 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 800673c:	61b8      	str	r0, [r7, #24]
        break;
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <UART_SetConfig+0x268>)
 8006742:	61bb      	str	r3, [r7, #24]
        break;
 8006744:	e00c      	b.n	8006760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006746:	f7fe ff81 	bl	800564c <HAL_RCC_GetSysClockFreq>
 800674a:	61b8      	str	r0, [r7, #24]
        break;
 800674c:	e008      	b.n	8006760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800674e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006752:	61bb      	str	r3, [r7, #24]
        break;
 8006754:	e004      	b.n	8006760 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	77bb      	strb	r3, [r7, #30]
        break;
 800675e:	bf00      	nop
    }

    if (pclk != 0U)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d018      	beq.n	8006798 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085a      	lsrs	r2, r3, #1
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	441a      	add	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d908      	bls.n	8006794 <UART_SetConfig+0x238>
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d204      	bcs.n	8006794 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	e001      	b.n	8006798 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	efff69f3 	.word	0xefff69f3
 80067b4:	40013800 	.word	0x40013800
 80067b8:	40021000 	.word	0x40021000
 80067bc:	40004400 	.word	0x40004400
 80067c0:	40004800 	.word	0x40004800
 80067c4:	007a1200 	.word	0x007a1200

080067c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01a      	beq.n	80068de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c6:	d10a      	bne.n	80068de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af02      	add	r7, sp, #8
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800691c:	f7fb fc3c 	bl	8002198 <HAL_GetTick>
 8006920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d10e      	bne.n	800694e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f82d 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e023      	b.n	8006996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d10e      	bne.n	800697a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800695c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f817 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00d      	b.n	8006996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b09c      	sub	sp, #112	; 0x70
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ae:	e0a5      	b.n	8006afc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	f000 80a1 	beq.w	8006afc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ba:	f7fb fbed 	bl	8002198 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d302      	bcc.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80069ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d13e      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e4:	667b      	str	r3, [r7, #100]	; 0x64
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e6      	bne.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	663b      	str	r3, [r7, #96]	; 0x60
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e067      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d04f      	beq.n	8006afc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6a:	d147      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
 8006a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ac8:	623a      	str	r2, [r7, #32]
 8006aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	69f9      	ldr	r1, [r7, #28]
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e5      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e010      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4013      	ands	r3, r2
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2301      	moveq	r3, #1
 8006b0e:	2300      	movne	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	f43f af4a 	beq.w	80069b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3770      	adds	r7, #112	; 0x70
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <__errno>:
 8006b28:	4b01      	ldr	r3, [pc, #4]	; (8006b30 <__errno+0x8>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000014 	.word	0x20000014

08006b34 <__libc_init_array>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4d0d      	ldr	r5, [pc, #52]	; (8006b6c <__libc_init_array+0x38>)
 8006b38:	4c0d      	ldr	r4, [pc, #52]	; (8006b70 <__libc_init_array+0x3c>)
 8006b3a:	1b64      	subs	r4, r4, r5
 8006b3c:	10a4      	asrs	r4, r4, #2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	d109      	bne.n	8006b58 <__libc_init_array+0x24>
 8006b44:	4d0b      	ldr	r5, [pc, #44]	; (8006b74 <__libc_init_array+0x40>)
 8006b46:	4c0c      	ldr	r4, [pc, #48]	; (8006b78 <__libc_init_array+0x44>)
 8006b48:	f002 ff02 	bl	8009950 <_init>
 8006b4c:	1b64      	subs	r4, r4, r5
 8006b4e:	10a4      	asrs	r4, r4, #2
 8006b50:	2600      	movs	r6, #0
 8006b52:	42a6      	cmp	r6, r4
 8006b54:	d105      	bne.n	8006b62 <__libc_init_array+0x2e>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5c:	4798      	blx	r3
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7ee      	b.n	8006b40 <__libc_init_array+0xc>
 8006b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b66:	4798      	blx	r3
 8006b68:	3601      	adds	r6, #1
 8006b6a:	e7f2      	b.n	8006b52 <__libc_init_array+0x1e>
 8006b6c:	08009ea4 	.word	0x08009ea4
 8006b70:	08009ea4 	.word	0x08009ea4
 8006b74:	08009ea4 	.word	0x08009ea4
 8006b78:	08009ea8 	.word	0x08009ea8

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <__cvt>:
 8006b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	ec55 4b10 	vmov	r4, r5, d0
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	460e      	mov	r6, r1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ba2:	461d      	movlt	r5, r3
 8006ba4:	2300      	movge	r3, #0
 8006ba6:	232d      	movlt	r3, #45	; 0x2d
 8006ba8:	700b      	strb	r3, [r1, #0]
 8006baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bb0:	4691      	mov	r9, r2
 8006bb2:	f023 0820 	bic.w	r8, r3, #32
 8006bb6:	bfbc      	itt	lt
 8006bb8:	4622      	movlt	r2, r4
 8006bba:	4614      	movlt	r4, r2
 8006bbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bc0:	d005      	beq.n	8006bce <__cvt+0x42>
 8006bc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bc6:	d100      	bne.n	8006bca <__cvt+0x3e>
 8006bc8:	3601      	adds	r6, #1
 8006bca:	2102      	movs	r1, #2
 8006bcc:	e000      	b.n	8006bd0 <__cvt+0x44>
 8006bce:	2103      	movs	r1, #3
 8006bd0:	ab03      	add	r3, sp, #12
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	ab02      	add	r3, sp, #8
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	ec45 4b10 	vmov	d0, r4, r5
 8006bdc:	4653      	mov	r3, sl
 8006bde:	4632      	mov	r2, r6
 8006be0:	f000 fcea 	bl	80075b8 <_dtoa_r>
 8006be4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006be8:	4607      	mov	r7, r0
 8006bea:	d102      	bne.n	8006bf2 <__cvt+0x66>
 8006bec:	f019 0f01 	tst.w	r9, #1
 8006bf0:	d022      	beq.n	8006c38 <__cvt+0xac>
 8006bf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bf6:	eb07 0906 	add.w	r9, r7, r6
 8006bfa:	d110      	bne.n	8006c1e <__cvt+0x92>
 8006bfc:	783b      	ldrb	r3, [r7, #0]
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d10a      	bne.n	8006c18 <__cvt+0x8c>
 8006c02:	2200      	movs	r2, #0
 8006c04:	2300      	movs	r3, #0
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0e:	b918      	cbnz	r0, 8006c18 <__cvt+0x8c>
 8006c10:	f1c6 0601 	rsb	r6, r6, #1
 8006c14:	f8ca 6000 	str.w	r6, [sl]
 8006c18:	f8da 3000 	ldr.w	r3, [sl]
 8006c1c:	4499      	add	r9, r3
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2a:	b108      	cbz	r0, 8006c30 <__cvt+0xa4>
 8006c2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c30:	2230      	movs	r2, #48	; 0x30
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	454b      	cmp	r3, r9
 8006c36:	d307      	bcc.n	8006c48 <__cvt+0xbc>
 8006c38:	9b03      	ldr	r3, [sp, #12]
 8006c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c3c:	1bdb      	subs	r3, r3, r7
 8006c3e:	4638      	mov	r0, r7
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	b004      	add	sp, #16
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	1c59      	adds	r1, r3, #1
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e7f0      	b.n	8006c32 <__cvt+0xa6>

08006c50 <__exponent>:
 8006c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c52:	4603      	mov	r3, r0
 8006c54:	2900      	cmp	r1, #0
 8006c56:	bfb8      	it	lt
 8006c58:	4249      	neglt	r1, r1
 8006c5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c5e:	bfb4      	ite	lt
 8006c60:	222d      	movlt	r2, #45	; 0x2d
 8006c62:	222b      	movge	r2, #43	; 0x2b
 8006c64:	2909      	cmp	r1, #9
 8006c66:	7042      	strb	r2, [r0, #1]
 8006c68:	dd2a      	ble.n	8006cc0 <__exponent+0x70>
 8006c6a:	f10d 0407 	add.w	r4, sp, #7
 8006c6e:	46a4      	mov	ip, r4
 8006c70:	270a      	movs	r7, #10
 8006c72:	46a6      	mov	lr, r4
 8006c74:	460a      	mov	r2, r1
 8006c76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c7e:	3530      	adds	r5, #48	; 0x30
 8006c80:	2a63      	cmp	r2, #99	; 0x63
 8006c82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	dcf1      	bgt.n	8006c72 <__exponent+0x22>
 8006c8e:	3130      	adds	r1, #48	; 0x30
 8006c90:	f1ae 0502 	sub.w	r5, lr, #2
 8006c94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c98:	1c44      	adds	r4, r0, #1
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4561      	cmp	r1, ip
 8006c9e:	d30a      	bcc.n	8006cb6 <__exponent+0x66>
 8006ca0:	f10d 0209 	add.w	r2, sp, #9
 8006ca4:	eba2 020e 	sub.w	r2, r2, lr
 8006ca8:	4565      	cmp	r5, ip
 8006caa:	bf88      	it	hi
 8006cac:	2200      	movhi	r2, #0
 8006cae:	4413      	add	r3, r2
 8006cb0:	1a18      	subs	r0, r3, r0
 8006cb2:	b003      	add	sp, #12
 8006cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cbe:	e7ed      	b.n	8006c9c <__exponent+0x4c>
 8006cc0:	2330      	movs	r3, #48	; 0x30
 8006cc2:	3130      	adds	r1, #48	; 0x30
 8006cc4:	7083      	strb	r3, [r0, #2]
 8006cc6:	70c1      	strb	r1, [r0, #3]
 8006cc8:	1d03      	adds	r3, r0, #4
 8006cca:	e7f1      	b.n	8006cb0 <__exponent+0x60>

08006ccc <_printf_float>:
 8006ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	ed2d 8b02 	vpush	{d8}
 8006cd4:	b08d      	sub	sp, #52	; 0x34
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cdc:	4616      	mov	r6, r2
 8006cde:	461f      	mov	r7, r3
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	f001 fa57 	bl	8008194 <_localeconv_r>
 8006ce6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cea:	4650      	mov	r0, sl
 8006cec:	f7f9 fa70 	bl	80001d0 <strlen>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d00:	3307      	adds	r3, #7
 8006d02:	f023 0307 	bic.w	r3, r3, #7
 8006d06:	f103 0208 	add.w	r2, r3, #8
 8006d0a:	f8c8 2000 	str.w	r2, [r8]
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d1e:	9307      	str	r3, [sp, #28]
 8006d20:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d24:	ee08 0a10 	vmov	s16, r0
 8006d28:	4b9f      	ldr	r3, [pc, #636]	; (8006fa8 <_printf_float+0x2dc>)
 8006d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d32:	f7f9 fefb 	bl	8000b2c <__aeabi_dcmpun>
 8006d36:	bb88      	cbnz	r0, 8006d9c <_printf_float+0xd0>
 8006d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3c:	4b9a      	ldr	r3, [pc, #616]	; (8006fa8 <_printf_float+0x2dc>)
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 fed5 	bl	8000af0 <__aeabi_dcmple>
 8006d46:	bb48      	cbnz	r0, 8006d9c <_printf_float+0xd0>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4649      	mov	r1, r9
 8006d50:	f7f9 fec4 	bl	8000adc <__aeabi_dcmplt>
 8006d54:	b110      	cbz	r0, 8006d5c <_printf_float+0x90>
 8006d56:	232d      	movs	r3, #45	; 0x2d
 8006d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d5c:	4b93      	ldr	r3, [pc, #588]	; (8006fac <_printf_float+0x2e0>)
 8006d5e:	4894      	ldr	r0, [pc, #592]	; (8006fb0 <_printf_float+0x2e4>)
 8006d60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d64:	bf94      	ite	ls
 8006d66:	4698      	movls	r8, r3
 8006d68:	4680      	movhi	r8, r0
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	9b05      	ldr	r3, [sp, #20]
 8006d70:	f023 0204 	bic.w	r2, r3, #4
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	9700      	str	r7, [sp, #0]
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d80:	4621      	mov	r1, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 f9d8 	bl	8007138 <_printf_common>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	f040 8090 	bne.w	8006eae <_printf_float+0x1e2>
 8006d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d92:	b00d      	add	sp, #52	; 0x34
 8006d94:	ecbd 8b02 	vpop	{d8}
 8006d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	4649      	mov	r1, r9
 8006da4:	f7f9 fec2 	bl	8000b2c <__aeabi_dcmpun>
 8006da8:	b140      	cbz	r0, 8006dbc <_printf_float+0xf0>
 8006daa:	464b      	mov	r3, r9
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbc      	itt	lt
 8006db0:	232d      	movlt	r3, #45	; 0x2d
 8006db2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006db6:	487f      	ldr	r0, [pc, #508]	; (8006fb4 <_printf_float+0x2e8>)
 8006db8:	4b7f      	ldr	r3, [pc, #508]	; (8006fb8 <_printf_float+0x2ec>)
 8006dba:	e7d1      	b.n	8006d60 <_printf_float+0x94>
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dc2:	9206      	str	r2, [sp, #24]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	d13f      	bne.n	8006e48 <_printf_float+0x17c>
 8006dc8:	2306      	movs	r3, #6
 8006dca:	6063      	str	r3, [r4, #4]
 8006dcc:	9b05      	ldr	r3, [sp, #20]
 8006dce:	6861      	ldr	r1, [r4, #4]
 8006dd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9303      	str	r3, [sp, #12]
 8006dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dde:	ab09      	add	r3, sp, #36	; 0x24
 8006de0:	ec49 8b10 	vmov	d0, r8, r9
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dec:	4628      	mov	r0, r5
 8006dee:	f7ff fecd 	bl	8006b8c <__cvt>
 8006df2:	9b06      	ldr	r3, [sp, #24]
 8006df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006df6:	2b47      	cmp	r3, #71	; 0x47
 8006df8:	4680      	mov	r8, r0
 8006dfa:	d108      	bne.n	8006e0e <_printf_float+0x142>
 8006dfc:	1cc8      	adds	r0, r1, #3
 8006dfe:	db02      	blt.n	8006e06 <_printf_float+0x13a>
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	4299      	cmp	r1, r3
 8006e04:	dd41      	ble.n	8006e8a <_printf_float+0x1be>
 8006e06:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e0a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e12:	d820      	bhi.n	8006e56 <_printf_float+0x18a>
 8006e14:	3901      	subs	r1, #1
 8006e16:	465a      	mov	r2, fp
 8006e18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e1e:	f7ff ff17 	bl	8006c50 <__exponent>
 8006e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e24:	1813      	adds	r3, r2, r0
 8006e26:	2a01      	cmp	r2, #1
 8006e28:	4681      	mov	r9, r0
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	dc02      	bgt.n	8006e34 <_printf_float+0x168>
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	07d2      	lsls	r2, r2, #31
 8006e32:	d501      	bpl.n	8006e38 <_printf_float+0x16c>
 8006e34:	3301      	adds	r3, #1
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d09c      	beq.n	8006d7a <_printf_float+0xae>
 8006e40:	232d      	movs	r3, #45	; 0x2d
 8006e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e46:	e798      	b.n	8006d7a <_printf_float+0xae>
 8006e48:	9a06      	ldr	r2, [sp, #24]
 8006e4a:	2a47      	cmp	r2, #71	; 0x47
 8006e4c:	d1be      	bne.n	8006dcc <_printf_float+0x100>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1bc      	bne.n	8006dcc <_printf_float+0x100>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e7b9      	b.n	8006dca <_printf_float+0xfe>
 8006e56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e5a:	d118      	bne.n	8006e8e <_printf_float+0x1c2>
 8006e5c:	2900      	cmp	r1, #0
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	dd0b      	ble.n	8006e7a <_printf_float+0x1ae>
 8006e62:	6121      	str	r1, [r4, #16]
 8006e64:	b913      	cbnz	r3, 8006e6c <_printf_float+0x1a0>
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	07d0      	lsls	r0, r2, #31
 8006e6a:	d502      	bpl.n	8006e72 <_printf_float+0x1a6>
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	440b      	add	r3, r1
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e74:	f04f 0900 	mov.w	r9, #0
 8006e78:	e7de      	b.n	8006e38 <_printf_float+0x16c>
 8006e7a:	b913      	cbnz	r3, 8006e82 <_printf_float+0x1b6>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	07d2      	lsls	r2, r2, #31
 8006e80:	d501      	bpl.n	8006e86 <_printf_float+0x1ba>
 8006e82:	3302      	adds	r3, #2
 8006e84:	e7f4      	b.n	8006e70 <_printf_float+0x1a4>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e7f2      	b.n	8006e70 <_printf_float+0x1a4>
 8006e8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	4299      	cmp	r1, r3
 8006e92:	db05      	blt.n	8006ea0 <_printf_float+0x1d4>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	6121      	str	r1, [r4, #16]
 8006e98:	07d8      	lsls	r0, r3, #31
 8006e9a:	d5ea      	bpl.n	8006e72 <_printf_float+0x1a6>
 8006e9c:	1c4b      	adds	r3, r1, #1
 8006e9e:	e7e7      	b.n	8006e70 <_printf_float+0x1a4>
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	bfd4      	ite	le
 8006ea4:	f1c1 0202 	rsble	r2, r1, #2
 8006ea8:	2201      	movgt	r2, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	e7e0      	b.n	8006e70 <_printf_float+0x1a4>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	055a      	lsls	r2, r3, #21
 8006eb2:	d407      	bmi.n	8006ec4 <_printf_float+0x1f8>
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d12c      	bne.n	8006f1c <_printf_float+0x250>
 8006ec2:	e764      	b.n	8006d8e <_printf_float+0xc2>
 8006ec4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ec8:	f240 80e0 	bls.w	800708c <_printf_float+0x3c0>
 8006ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f7f9 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d034      	beq.n	8006f46 <_printf_float+0x27a>
 8006edc:	4a37      	ldr	r2, [pc, #220]	; (8006fbc <_printf_float+0x2f0>)
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af51 	beq.w	8006d8e <_printf_float+0xc2>
 8006eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	db02      	blt.n	8006efa <_printf_float+0x22e>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	07d8      	lsls	r0, r3, #31
 8006ef8:	d510      	bpl.n	8006f1c <_printf_float+0x250>
 8006efa:	ee18 3a10 	vmov	r3, s16
 8006efe:	4652      	mov	r2, sl
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f af41 	beq.w	8006d8e <_printf_float+0xc2>
 8006f0c:	f04f 0800 	mov.w	r8, #0
 8006f10:	f104 091a 	add.w	r9, r4, #26
 8006f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4543      	cmp	r3, r8
 8006f1a:	dc09      	bgt.n	8006f30 <_printf_float+0x264>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	f100 8105 	bmi.w	800712e <_printf_float+0x462>
 8006f24:	68e0      	ldr	r0, [r4, #12]
 8006f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f28:	4298      	cmp	r0, r3
 8006f2a:	bfb8      	it	lt
 8006f2c:	4618      	movlt	r0, r3
 8006f2e:	e730      	b.n	8006d92 <_printf_float+0xc6>
 8006f30:	2301      	movs	r3, #1
 8006f32:	464a      	mov	r2, r9
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f af27 	beq.w	8006d8e <_printf_float+0xc2>
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	e7e6      	b.n	8006f14 <_printf_float+0x248>
 8006f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc39      	bgt.n	8006fc0 <_printf_float+0x2f4>
 8006f4c:	4a1b      	ldr	r2, [pc, #108]	; (8006fbc <_printf_float+0x2f0>)
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f af19 	beq.w	8006d8e <_printf_float+0xc2>
 8006f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f60:	4313      	orrs	r3, r2
 8006f62:	d102      	bne.n	8006f6a <_printf_float+0x29e>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d5d8      	bpl.n	8006f1c <_printf_float+0x250>
 8006f6a:	ee18 3a10 	vmov	r3, s16
 8006f6e:	4652      	mov	r2, sl
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f af09 	beq.w	8006d8e <_printf_float+0xc2>
 8006f7c:	f04f 0900 	mov.w	r9, #0
 8006f80:	f104 0a1a 	add.w	sl, r4, #26
 8006f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f86:	425b      	negs	r3, r3
 8006f88:	454b      	cmp	r3, r9
 8006f8a:	dc01      	bgt.n	8006f90 <_printf_float+0x2c4>
 8006f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8e:	e792      	b.n	8006eb6 <_printf_float+0x1ea>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4652      	mov	r2, sl
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f aef7 	beq.w	8006d8e <_printf_float+0xc2>
 8006fa0:	f109 0901 	add.w	r9, r9, #1
 8006fa4:	e7ee      	b.n	8006f84 <_printf_float+0x2b8>
 8006fa6:	bf00      	nop
 8006fa8:	7fefffff 	.word	0x7fefffff
 8006fac:	08009ad0 	.word	0x08009ad0
 8006fb0:	08009ad4 	.word	0x08009ad4
 8006fb4:	08009adc 	.word	0x08009adc
 8006fb8:	08009ad8 	.word	0x08009ad8
 8006fbc:	08009ae0 	.word	0x08009ae0
 8006fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	bfa8      	it	ge
 8006fc8:	461a      	movge	r2, r3
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	4691      	mov	r9, r2
 8006fce:	dc37      	bgt.n	8007040 <_printf_float+0x374>
 8006fd0:	f04f 0b00 	mov.w	fp, #0
 8006fd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fd8:	f104 021a 	add.w	r2, r4, #26
 8006fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fde:	9305      	str	r3, [sp, #20]
 8006fe0:	eba3 0309 	sub.w	r3, r3, r9
 8006fe4:	455b      	cmp	r3, fp
 8006fe6:	dc33      	bgt.n	8007050 <_printf_float+0x384>
 8006fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	db3b      	blt.n	8007068 <_printf_float+0x39c>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	07da      	lsls	r2, r3, #31
 8006ff4:	d438      	bmi.n	8007068 <_printf_float+0x39c>
 8006ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff8:	9a05      	ldr	r2, [sp, #20]
 8006ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ffc:	1a9a      	subs	r2, r3, r2
 8006ffe:	eba3 0901 	sub.w	r9, r3, r1
 8007002:	4591      	cmp	r9, r2
 8007004:	bfa8      	it	ge
 8007006:	4691      	movge	r9, r2
 8007008:	f1b9 0f00 	cmp.w	r9, #0
 800700c:	dc35      	bgt.n	800707a <_printf_float+0x3ae>
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007016:	f104 0a1a 	add.w	sl, r4, #26
 800701a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	eba3 0309 	sub.w	r3, r3, r9
 8007024:	4543      	cmp	r3, r8
 8007026:	f77f af79 	ble.w	8006f1c <_printf_float+0x250>
 800702a:	2301      	movs	r3, #1
 800702c:	4652      	mov	r2, sl
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	47b8      	blx	r7
 8007034:	3001      	adds	r0, #1
 8007036:	f43f aeaa 	beq.w	8006d8e <_printf_float+0xc2>
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	e7ec      	b.n	800701a <_printf_float+0x34e>
 8007040:	4613      	mov	r3, r2
 8007042:	4631      	mov	r1, r6
 8007044:	4642      	mov	r2, r8
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	d1c0      	bne.n	8006fd0 <_printf_float+0x304>
 800704e:	e69e      	b.n	8006d8e <_printf_float+0xc2>
 8007050:	2301      	movs	r3, #1
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f ae97 	beq.w	8006d8e <_printf_float+0xc2>
 8007060:	9a05      	ldr	r2, [sp, #20]
 8007062:	f10b 0b01 	add.w	fp, fp, #1
 8007066:	e7b9      	b.n	8006fdc <_printf_float+0x310>
 8007068:	ee18 3a10 	vmov	r3, s16
 800706c:	4652      	mov	r2, sl
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	d1be      	bne.n	8006ff6 <_printf_float+0x32a>
 8007078:	e689      	b.n	8006d8e <_printf_float+0xc2>
 800707a:	9a05      	ldr	r2, [sp, #20]
 800707c:	464b      	mov	r3, r9
 800707e:	4442      	add	r2, r8
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	d1c1      	bne.n	800700e <_printf_float+0x342>
 800708a:	e680      	b.n	8006d8e <_printf_float+0xc2>
 800708c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708e:	2a01      	cmp	r2, #1
 8007090:	dc01      	bgt.n	8007096 <_printf_float+0x3ca>
 8007092:	07db      	lsls	r3, r3, #31
 8007094:	d538      	bpl.n	8007108 <_printf_float+0x43c>
 8007096:	2301      	movs	r3, #1
 8007098:	4642      	mov	r2, r8
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae74 	beq.w	8006d8e <_printf_float+0xc2>
 80070a6:	ee18 3a10 	vmov	r3, s16
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f ae6b 	beq.w	8006d8e <_printf_float+0xc2>
 80070b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	f7f9 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c4:	b9d8      	cbnz	r0, 80070fe <_printf_float+0x432>
 80070c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c8:	f108 0201 	add.w	r2, r8, #1
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	d10e      	bne.n	80070f6 <_printf_float+0x42a>
 80070d8:	e659      	b.n	8006d8e <_printf_float+0xc2>
 80070da:	2301      	movs	r3, #1
 80070dc:	4652      	mov	r2, sl
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae52 	beq.w	8006d8e <_printf_float+0xc2>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f0:	3b01      	subs	r3, #1
 80070f2:	4543      	cmp	r3, r8
 80070f4:	dcf1      	bgt.n	80070da <_printf_float+0x40e>
 80070f6:	464b      	mov	r3, r9
 80070f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070fc:	e6dc      	b.n	8006eb8 <_printf_float+0x1ec>
 80070fe:	f04f 0800 	mov.w	r8, #0
 8007102:	f104 0a1a 	add.w	sl, r4, #26
 8007106:	e7f2      	b.n	80070ee <_printf_float+0x422>
 8007108:	2301      	movs	r3, #1
 800710a:	4642      	mov	r2, r8
 800710c:	e7df      	b.n	80070ce <_printf_float+0x402>
 800710e:	2301      	movs	r3, #1
 8007110:	464a      	mov	r2, r9
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f ae38 	beq.w	8006d8e <_printf_float+0xc2>
 800711e:	f108 0801 	add.w	r8, r8, #1
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007126:	1a5b      	subs	r3, r3, r1
 8007128:	4543      	cmp	r3, r8
 800712a:	dcf0      	bgt.n	800710e <_printf_float+0x442>
 800712c:	e6fa      	b.n	8006f24 <_printf_float+0x258>
 800712e:	f04f 0800 	mov.w	r8, #0
 8007132:	f104 0919 	add.w	r9, r4, #25
 8007136:	e7f4      	b.n	8007122 <_printf_float+0x456>

08007138 <_printf_common>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	4616      	mov	r6, r2
 800713e:	4699      	mov	r9, r3
 8007140:	688a      	ldr	r2, [r1, #8]
 8007142:	690b      	ldr	r3, [r1, #16]
 8007144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007148:	4293      	cmp	r3, r2
 800714a:	bfb8      	it	lt
 800714c:	4613      	movlt	r3, r2
 800714e:	6033      	str	r3, [r6, #0]
 8007150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007154:	4607      	mov	r7, r0
 8007156:	460c      	mov	r4, r1
 8007158:	b10a      	cbz	r2, 800715e <_printf_common+0x26>
 800715a:	3301      	adds	r3, #1
 800715c:	6033      	str	r3, [r6, #0]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	0699      	lsls	r1, r3, #26
 8007162:	bf42      	ittt	mi
 8007164:	6833      	ldrmi	r3, [r6, #0]
 8007166:	3302      	addmi	r3, #2
 8007168:	6033      	strmi	r3, [r6, #0]
 800716a:	6825      	ldr	r5, [r4, #0]
 800716c:	f015 0506 	ands.w	r5, r5, #6
 8007170:	d106      	bne.n	8007180 <_printf_common+0x48>
 8007172:	f104 0a19 	add.w	sl, r4, #25
 8007176:	68e3      	ldr	r3, [r4, #12]
 8007178:	6832      	ldr	r2, [r6, #0]
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	42ab      	cmp	r3, r5
 800717e:	dc26      	bgt.n	80071ce <_printf_common+0x96>
 8007180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007184:	1e13      	subs	r3, r2, #0
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	bf18      	it	ne
 800718a:	2301      	movne	r3, #1
 800718c:	0692      	lsls	r2, r2, #26
 800718e:	d42b      	bmi.n	80071e8 <_printf_common+0xb0>
 8007190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007194:	4649      	mov	r1, r9
 8007196:	4638      	mov	r0, r7
 8007198:	47c0      	blx	r8
 800719a:	3001      	adds	r0, #1
 800719c:	d01e      	beq.n	80071dc <_printf_common+0xa4>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	68e5      	ldr	r5, [r4, #12]
 80071a2:	6832      	ldr	r2, [r6, #0]
 80071a4:	f003 0306 	and.w	r3, r3, #6
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	bf08      	it	eq
 80071ac:	1aad      	subeq	r5, r5, r2
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	6922      	ldr	r2, [r4, #16]
 80071b2:	bf0c      	ite	eq
 80071b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b8:	2500      	movne	r5, #0
 80071ba:	4293      	cmp	r3, r2
 80071bc:	bfc4      	itt	gt
 80071be:	1a9b      	subgt	r3, r3, r2
 80071c0:	18ed      	addgt	r5, r5, r3
 80071c2:	2600      	movs	r6, #0
 80071c4:	341a      	adds	r4, #26
 80071c6:	42b5      	cmp	r5, r6
 80071c8:	d11a      	bne.n	8007200 <_printf_common+0xc8>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e008      	b.n	80071e0 <_printf_common+0xa8>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4652      	mov	r2, sl
 80071d2:	4649      	mov	r1, r9
 80071d4:	4638      	mov	r0, r7
 80071d6:	47c0      	blx	r8
 80071d8:	3001      	adds	r0, #1
 80071da:	d103      	bne.n	80071e4 <_printf_common+0xac>
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e4:	3501      	adds	r5, #1
 80071e6:	e7c6      	b.n	8007176 <_printf_common+0x3e>
 80071e8:	18e1      	adds	r1, r4, r3
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	2030      	movs	r0, #48	; 0x30
 80071ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071f2:	4422      	add	r2, r4
 80071f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071fc:	3302      	adds	r3, #2
 80071fe:	e7c7      	b.n	8007190 <_printf_common+0x58>
 8007200:	2301      	movs	r3, #1
 8007202:	4622      	mov	r2, r4
 8007204:	4649      	mov	r1, r9
 8007206:	4638      	mov	r0, r7
 8007208:	47c0      	blx	r8
 800720a:	3001      	adds	r0, #1
 800720c:	d0e6      	beq.n	80071dc <_printf_common+0xa4>
 800720e:	3601      	adds	r6, #1
 8007210:	e7d9      	b.n	80071c6 <_printf_common+0x8e>
	...

08007214 <_printf_i>:
 8007214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	7e0f      	ldrb	r7, [r1, #24]
 800721a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800721c:	2f78      	cmp	r7, #120	; 0x78
 800721e:	4691      	mov	r9, r2
 8007220:	4680      	mov	r8, r0
 8007222:	460c      	mov	r4, r1
 8007224:	469a      	mov	sl, r3
 8007226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800722a:	d807      	bhi.n	800723c <_printf_i+0x28>
 800722c:	2f62      	cmp	r7, #98	; 0x62
 800722e:	d80a      	bhi.n	8007246 <_printf_i+0x32>
 8007230:	2f00      	cmp	r7, #0
 8007232:	f000 80d8 	beq.w	80073e6 <_printf_i+0x1d2>
 8007236:	2f58      	cmp	r7, #88	; 0x58
 8007238:	f000 80a3 	beq.w	8007382 <_printf_i+0x16e>
 800723c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007244:	e03a      	b.n	80072bc <_printf_i+0xa8>
 8007246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800724a:	2b15      	cmp	r3, #21
 800724c:	d8f6      	bhi.n	800723c <_printf_i+0x28>
 800724e:	a101      	add	r1, pc, #4	; (adr r1, 8007254 <_printf_i+0x40>)
 8007250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007254:	080072ad 	.word	0x080072ad
 8007258:	080072c1 	.word	0x080072c1
 800725c:	0800723d 	.word	0x0800723d
 8007260:	0800723d 	.word	0x0800723d
 8007264:	0800723d 	.word	0x0800723d
 8007268:	0800723d 	.word	0x0800723d
 800726c:	080072c1 	.word	0x080072c1
 8007270:	0800723d 	.word	0x0800723d
 8007274:	0800723d 	.word	0x0800723d
 8007278:	0800723d 	.word	0x0800723d
 800727c:	0800723d 	.word	0x0800723d
 8007280:	080073cd 	.word	0x080073cd
 8007284:	080072f1 	.word	0x080072f1
 8007288:	080073af 	.word	0x080073af
 800728c:	0800723d 	.word	0x0800723d
 8007290:	0800723d 	.word	0x0800723d
 8007294:	080073ef 	.word	0x080073ef
 8007298:	0800723d 	.word	0x0800723d
 800729c:	080072f1 	.word	0x080072f1
 80072a0:	0800723d 	.word	0x0800723d
 80072a4:	0800723d 	.word	0x0800723d
 80072a8:	080073b7 	.word	0x080073b7
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	1d1a      	adds	r2, r3, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	602a      	str	r2, [r5, #0]
 80072b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072bc:	2301      	movs	r3, #1
 80072be:	e0a3      	b.n	8007408 <_printf_i+0x1f4>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	6829      	ldr	r1, [r5, #0]
 80072c4:	0606      	lsls	r6, r0, #24
 80072c6:	f101 0304 	add.w	r3, r1, #4
 80072ca:	d50a      	bpl.n	80072e2 <_printf_i+0xce>
 80072cc:	680e      	ldr	r6, [r1, #0]
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	da03      	bge.n	80072dc <_printf_i+0xc8>
 80072d4:	232d      	movs	r3, #45	; 0x2d
 80072d6:	4276      	negs	r6, r6
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072dc:	485e      	ldr	r0, [pc, #376]	; (8007458 <_printf_i+0x244>)
 80072de:	230a      	movs	r3, #10
 80072e0:	e019      	b.n	8007316 <_printf_i+0x102>
 80072e2:	680e      	ldr	r6, [r1, #0]
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ea:	bf18      	it	ne
 80072ec:	b236      	sxthne	r6, r6
 80072ee:	e7ef      	b.n	80072d0 <_printf_i+0xbc>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	1d19      	adds	r1, r3, #4
 80072f6:	6029      	str	r1, [r5, #0]
 80072f8:	0601      	lsls	r1, r0, #24
 80072fa:	d501      	bpl.n	8007300 <_printf_i+0xec>
 80072fc:	681e      	ldr	r6, [r3, #0]
 80072fe:	e002      	b.n	8007306 <_printf_i+0xf2>
 8007300:	0646      	lsls	r6, r0, #25
 8007302:	d5fb      	bpl.n	80072fc <_printf_i+0xe8>
 8007304:	881e      	ldrh	r6, [r3, #0]
 8007306:	4854      	ldr	r0, [pc, #336]	; (8007458 <_printf_i+0x244>)
 8007308:	2f6f      	cmp	r7, #111	; 0x6f
 800730a:	bf0c      	ite	eq
 800730c:	2308      	moveq	r3, #8
 800730e:	230a      	movne	r3, #10
 8007310:	2100      	movs	r1, #0
 8007312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007316:	6865      	ldr	r5, [r4, #4]
 8007318:	60a5      	str	r5, [r4, #8]
 800731a:	2d00      	cmp	r5, #0
 800731c:	bfa2      	ittt	ge
 800731e:	6821      	ldrge	r1, [r4, #0]
 8007320:	f021 0104 	bicge.w	r1, r1, #4
 8007324:	6021      	strge	r1, [r4, #0]
 8007326:	b90e      	cbnz	r6, 800732c <_printf_i+0x118>
 8007328:	2d00      	cmp	r5, #0
 800732a:	d04d      	beq.n	80073c8 <_printf_i+0x1b4>
 800732c:	4615      	mov	r5, r2
 800732e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007332:	fb03 6711 	mls	r7, r3, r1, r6
 8007336:	5dc7      	ldrb	r7, [r0, r7]
 8007338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800733c:	4637      	mov	r7, r6
 800733e:	42bb      	cmp	r3, r7
 8007340:	460e      	mov	r6, r1
 8007342:	d9f4      	bls.n	800732e <_printf_i+0x11a>
 8007344:	2b08      	cmp	r3, #8
 8007346:	d10b      	bne.n	8007360 <_printf_i+0x14c>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	07de      	lsls	r6, r3, #31
 800734c:	d508      	bpl.n	8007360 <_printf_i+0x14c>
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4299      	cmp	r1, r3
 8007354:	bfde      	ittt	le
 8007356:	2330      	movle	r3, #48	; 0x30
 8007358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800735c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007360:	1b52      	subs	r2, r2, r5
 8007362:	6122      	str	r2, [r4, #16]
 8007364:	f8cd a000 	str.w	sl, [sp]
 8007368:	464b      	mov	r3, r9
 800736a:	aa03      	add	r2, sp, #12
 800736c:	4621      	mov	r1, r4
 800736e:	4640      	mov	r0, r8
 8007370:	f7ff fee2 	bl	8007138 <_printf_common>
 8007374:	3001      	adds	r0, #1
 8007376:	d14c      	bne.n	8007412 <_printf_i+0x1fe>
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	b004      	add	sp, #16
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	4835      	ldr	r0, [pc, #212]	; (8007458 <_printf_i+0x244>)
 8007384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007388:	6829      	ldr	r1, [r5, #0]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007390:	6029      	str	r1, [r5, #0]
 8007392:	061d      	lsls	r5, r3, #24
 8007394:	d514      	bpl.n	80073c0 <_printf_i+0x1ac>
 8007396:	07df      	lsls	r7, r3, #31
 8007398:	bf44      	itt	mi
 800739a:	f043 0320 	orrmi.w	r3, r3, #32
 800739e:	6023      	strmi	r3, [r4, #0]
 80073a0:	b91e      	cbnz	r6, 80073aa <_printf_i+0x196>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	f023 0320 	bic.w	r3, r3, #32
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	2310      	movs	r3, #16
 80073ac:	e7b0      	b.n	8007310 <_printf_i+0xfc>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f043 0320 	orr.w	r3, r3, #32
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	2378      	movs	r3, #120	; 0x78
 80073b8:	4828      	ldr	r0, [pc, #160]	; (800745c <_printf_i+0x248>)
 80073ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073be:	e7e3      	b.n	8007388 <_printf_i+0x174>
 80073c0:	0659      	lsls	r1, r3, #25
 80073c2:	bf48      	it	mi
 80073c4:	b2b6      	uxthmi	r6, r6
 80073c6:	e7e6      	b.n	8007396 <_printf_i+0x182>
 80073c8:	4615      	mov	r5, r2
 80073ca:	e7bb      	b.n	8007344 <_printf_i+0x130>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	6826      	ldr	r6, [r4, #0]
 80073d0:	6961      	ldr	r1, [r4, #20]
 80073d2:	1d18      	adds	r0, r3, #4
 80073d4:	6028      	str	r0, [r5, #0]
 80073d6:	0635      	lsls	r5, r6, #24
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	d501      	bpl.n	80073e0 <_printf_i+0x1cc>
 80073dc:	6019      	str	r1, [r3, #0]
 80073de:	e002      	b.n	80073e6 <_printf_i+0x1d2>
 80073e0:	0670      	lsls	r0, r6, #25
 80073e2:	d5fb      	bpl.n	80073dc <_printf_i+0x1c8>
 80073e4:	8019      	strh	r1, [r3, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	4615      	mov	r5, r2
 80073ec:	e7ba      	b.n	8007364 <_printf_i+0x150>
 80073ee:	682b      	ldr	r3, [r5, #0]
 80073f0:	1d1a      	adds	r2, r3, #4
 80073f2:	602a      	str	r2, [r5, #0]
 80073f4:	681d      	ldr	r5, [r3, #0]
 80073f6:	6862      	ldr	r2, [r4, #4]
 80073f8:	2100      	movs	r1, #0
 80073fa:	4628      	mov	r0, r5
 80073fc:	f7f8 fef0 	bl	80001e0 <memchr>
 8007400:	b108      	cbz	r0, 8007406 <_printf_i+0x1f2>
 8007402:	1b40      	subs	r0, r0, r5
 8007404:	6060      	str	r0, [r4, #4]
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	2300      	movs	r3, #0
 800740c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007410:	e7a8      	b.n	8007364 <_printf_i+0x150>
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	462a      	mov	r2, r5
 8007416:	4649      	mov	r1, r9
 8007418:	4640      	mov	r0, r8
 800741a:	47d0      	blx	sl
 800741c:	3001      	adds	r0, #1
 800741e:	d0ab      	beq.n	8007378 <_printf_i+0x164>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	079b      	lsls	r3, r3, #30
 8007424:	d413      	bmi.n	800744e <_printf_i+0x23a>
 8007426:	68e0      	ldr	r0, [r4, #12]
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	4298      	cmp	r0, r3
 800742c:	bfb8      	it	lt
 800742e:	4618      	movlt	r0, r3
 8007430:	e7a4      	b.n	800737c <_printf_i+0x168>
 8007432:	2301      	movs	r3, #1
 8007434:	4632      	mov	r2, r6
 8007436:	4649      	mov	r1, r9
 8007438:	4640      	mov	r0, r8
 800743a:	47d0      	blx	sl
 800743c:	3001      	adds	r0, #1
 800743e:	d09b      	beq.n	8007378 <_printf_i+0x164>
 8007440:	3501      	adds	r5, #1
 8007442:	68e3      	ldr	r3, [r4, #12]
 8007444:	9903      	ldr	r1, [sp, #12]
 8007446:	1a5b      	subs	r3, r3, r1
 8007448:	42ab      	cmp	r3, r5
 800744a:	dcf2      	bgt.n	8007432 <_printf_i+0x21e>
 800744c:	e7eb      	b.n	8007426 <_printf_i+0x212>
 800744e:	2500      	movs	r5, #0
 8007450:	f104 0619 	add.w	r6, r4, #25
 8007454:	e7f5      	b.n	8007442 <_printf_i+0x22e>
 8007456:	bf00      	nop
 8007458:	08009ae2 	.word	0x08009ae2
 800745c:	08009af3 	.word	0x08009af3

08007460 <siprintf>:
 8007460:	b40e      	push	{r1, r2, r3}
 8007462:	b500      	push	{lr}
 8007464:	b09c      	sub	sp, #112	; 0x70
 8007466:	ab1d      	add	r3, sp, #116	; 0x74
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9006      	str	r0, [sp, #24]
 800746c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007470:	4809      	ldr	r0, [pc, #36]	; (8007498 <siprintf+0x38>)
 8007472:	9107      	str	r1, [sp, #28]
 8007474:	9104      	str	r1, [sp, #16]
 8007476:	4909      	ldr	r1, [pc, #36]	; (800749c <siprintf+0x3c>)
 8007478:	f853 2b04 	ldr.w	r2, [r3], #4
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	a902      	add	r1, sp, #8
 8007484:	f001 fb76 	bl	8008b74 <_svfiprintf_r>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	b01c      	add	sp, #112	; 0x70
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	20000014 	.word	0x20000014
 800749c:	ffff0208 	.word	0xffff0208

080074a0 <quorem>:
 80074a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	6903      	ldr	r3, [r0, #16]
 80074a6:	690c      	ldr	r4, [r1, #16]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	4607      	mov	r7, r0
 80074ac:	f2c0 8081 	blt.w	80075b2 <quorem+0x112>
 80074b0:	3c01      	subs	r4, #1
 80074b2:	f101 0814 	add.w	r8, r1, #20
 80074b6:	f100 0514 	add.w	r5, r0, #20
 80074ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074c8:	3301      	adds	r3, #1
 80074ca:	429a      	cmp	r2, r3
 80074cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074d8:	d331      	bcc.n	800753e <quorem+0x9e>
 80074da:	f04f 0e00 	mov.w	lr, #0
 80074de:	4640      	mov	r0, r8
 80074e0:	46ac      	mov	ip, r5
 80074e2:	46f2      	mov	sl, lr
 80074e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074e8:	b293      	uxth	r3, r2
 80074ea:	fb06 e303 	mla	r3, r6, r3, lr
 80074ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ebaa 0303 	sub.w	r3, sl, r3
 80074f8:	f8dc a000 	ldr.w	sl, [ip]
 80074fc:	0c12      	lsrs	r2, r2, #16
 80074fe:	fa13 f38a 	uxtah	r3, r3, sl
 8007502:	fb06 e202 	mla	r2, r6, r2, lr
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800750e:	b292      	uxth	r2, r2
 8007510:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007518:	f8bd 3000 	ldrh.w	r3, [sp]
 800751c:	4581      	cmp	r9, r0
 800751e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007522:	f84c 3b04 	str.w	r3, [ip], #4
 8007526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800752a:	d2db      	bcs.n	80074e4 <quorem+0x44>
 800752c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007530:	b92b      	cbnz	r3, 800753e <quorem+0x9e>
 8007532:	9b01      	ldr	r3, [sp, #4]
 8007534:	3b04      	subs	r3, #4
 8007536:	429d      	cmp	r5, r3
 8007538:	461a      	mov	r2, r3
 800753a:	d32e      	bcc.n	800759a <quorem+0xfa>
 800753c:	613c      	str	r4, [r7, #16]
 800753e:	4638      	mov	r0, r7
 8007540:	f001 f8c4 	bl	80086cc <__mcmp>
 8007544:	2800      	cmp	r0, #0
 8007546:	db24      	blt.n	8007592 <quorem+0xf2>
 8007548:	3601      	adds	r6, #1
 800754a:	4628      	mov	r0, r5
 800754c:	f04f 0c00 	mov.w	ip, #0
 8007550:	f858 2b04 	ldr.w	r2, [r8], #4
 8007554:	f8d0 e000 	ldr.w	lr, [r0]
 8007558:	b293      	uxth	r3, r2
 800755a:	ebac 0303 	sub.w	r3, ip, r3
 800755e:	0c12      	lsrs	r2, r2, #16
 8007560:	fa13 f38e 	uxtah	r3, r3, lr
 8007564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007572:	45c1      	cmp	r9, r8
 8007574:	f840 3b04 	str.w	r3, [r0], #4
 8007578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800757c:	d2e8      	bcs.n	8007550 <quorem+0xb0>
 800757e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007586:	b922      	cbnz	r2, 8007592 <quorem+0xf2>
 8007588:	3b04      	subs	r3, #4
 800758a:	429d      	cmp	r5, r3
 800758c:	461a      	mov	r2, r3
 800758e:	d30a      	bcc.n	80075a6 <quorem+0x106>
 8007590:	613c      	str	r4, [r7, #16]
 8007592:	4630      	mov	r0, r6
 8007594:	b003      	add	sp, #12
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	3b04      	subs	r3, #4
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d1cc      	bne.n	800753c <quorem+0x9c>
 80075a2:	3c01      	subs	r4, #1
 80075a4:	e7c7      	b.n	8007536 <quorem+0x96>
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d1f0      	bne.n	8007590 <quorem+0xf0>
 80075ae:	3c01      	subs	r4, #1
 80075b0:	e7eb      	b.n	800758a <quorem+0xea>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e7ee      	b.n	8007594 <quorem+0xf4>
	...

080075b8 <_dtoa_r>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b04 	vpush	{d8-d9}
 80075c0:	ec57 6b10 	vmov	r6, r7, d0
 80075c4:	b093      	sub	sp, #76	; 0x4c
 80075c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075cc:	9106      	str	r1, [sp, #24]
 80075ce:	ee10 aa10 	vmov	sl, s0
 80075d2:	4604      	mov	r4, r0
 80075d4:	9209      	str	r2, [sp, #36]	; 0x24
 80075d6:	930c      	str	r3, [sp, #48]	; 0x30
 80075d8:	46bb      	mov	fp, r7
 80075da:	b975      	cbnz	r5, 80075fa <_dtoa_r+0x42>
 80075dc:	2010      	movs	r0, #16
 80075de:	f000 fddd 	bl	800819c <malloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6260      	str	r0, [r4, #36]	; 0x24
 80075e6:	b920      	cbnz	r0, 80075f2 <_dtoa_r+0x3a>
 80075e8:	4ba7      	ldr	r3, [pc, #668]	; (8007888 <_dtoa_r+0x2d0>)
 80075ea:	21ea      	movs	r1, #234	; 0xea
 80075ec:	48a7      	ldr	r0, [pc, #668]	; (800788c <_dtoa_r+0x2d4>)
 80075ee:	f001 fbd1 	bl	8008d94 <__assert_func>
 80075f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075f6:	6005      	str	r5, [r0, #0]
 80075f8:	60c5      	str	r5, [r0, #12]
 80075fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fc:	6819      	ldr	r1, [r3, #0]
 80075fe:	b151      	cbz	r1, 8007616 <_dtoa_r+0x5e>
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	604a      	str	r2, [r1, #4]
 8007604:	2301      	movs	r3, #1
 8007606:	4093      	lsls	r3, r2
 8007608:	608b      	str	r3, [r1, #8]
 800760a:	4620      	mov	r0, r4
 800760c:	f000 fe1c 	bl	8008248 <_Bfree>
 8007610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	1e3b      	subs	r3, r7, #0
 8007618:	bfaa      	itet	ge
 800761a:	2300      	movge	r3, #0
 800761c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007620:	f8c8 3000 	strge.w	r3, [r8]
 8007624:	4b9a      	ldr	r3, [pc, #616]	; (8007890 <_dtoa_r+0x2d8>)
 8007626:	bfbc      	itt	lt
 8007628:	2201      	movlt	r2, #1
 800762a:	f8c8 2000 	strlt.w	r2, [r8]
 800762e:	ea33 030b 	bics.w	r3, r3, fp
 8007632:	d11b      	bne.n	800766c <_dtoa_r+0xb4>
 8007634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007636:	f242 730f 	movw	r3, #9999	; 0x270f
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007640:	4333      	orrs	r3, r6
 8007642:	f000 8592 	beq.w	800816a <_dtoa_r+0xbb2>
 8007646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007648:	b963      	cbnz	r3, 8007664 <_dtoa_r+0xac>
 800764a:	4b92      	ldr	r3, [pc, #584]	; (8007894 <_dtoa_r+0x2dc>)
 800764c:	e022      	b.n	8007694 <_dtoa_r+0xdc>
 800764e:	4b92      	ldr	r3, [pc, #584]	; (8007898 <_dtoa_r+0x2e0>)
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	3308      	adds	r3, #8
 8007654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	9801      	ldr	r0, [sp, #4]
 800765a:	b013      	add	sp, #76	; 0x4c
 800765c:	ecbd 8b04 	vpop	{d8-d9}
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	4b8b      	ldr	r3, [pc, #556]	; (8007894 <_dtoa_r+0x2dc>)
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	3303      	adds	r3, #3
 800766a:	e7f3      	b.n	8007654 <_dtoa_r+0x9c>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	4650      	mov	r0, sl
 8007672:	4659      	mov	r1, fp
 8007674:	f7f9 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007678:	ec4b ab19 	vmov	d9, sl, fp
 800767c:	4680      	mov	r8, r0
 800767e:	b158      	cbz	r0, 8007698 <_dtoa_r+0xe0>
 8007680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007682:	2301      	movs	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 856b 	beq.w	8008164 <_dtoa_r+0xbac>
 800768e:	4883      	ldr	r0, [pc, #524]	; (800789c <_dtoa_r+0x2e4>)
 8007690:	6018      	str	r0, [r3, #0]
 8007692:	1e43      	subs	r3, r0, #1
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	e7df      	b.n	8007658 <_dtoa_r+0xa0>
 8007698:	ec4b ab10 	vmov	d0, sl, fp
 800769c:	aa10      	add	r2, sp, #64	; 0x40
 800769e:	a911      	add	r1, sp, #68	; 0x44
 80076a0:	4620      	mov	r0, r4
 80076a2:	f001 f8b9 	bl	8008818 <__d2b>
 80076a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076aa:	ee08 0a10 	vmov	s16, r0
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	f000 8084 	beq.w	80077bc <_dtoa_r+0x204>
 80076b4:	ee19 3a90 	vmov	r3, s19
 80076b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076c0:	4656      	mov	r6, sl
 80076c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80076ce:	4b74      	ldr	r3, [pc, #464]	; (80078a0 <_dtoa_r+0x2e8>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	a365      	add	r3, pc, #404	; (adr r3, 8007870 <_dtoa_r+0x2b8>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 ff8a 	bl	80005f8 <__aeabi_dmul>
 80076e4:	a364      	add	r3, pc, #400	; (adr r3, 8007878 <_dtoa_r+0x2c0>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fdcf 	bl	800028c <__adddf3>
 80076ee:	4606      	mov	r6, r0
 80076f0:	4628      	mov	r0, r5
 80076f2:	460f      	mov	r7, r1
 80076f4:	f7f8 ff16 	bl	8000524 <__aeabi_i2d>
 80076f8:	a361      	add	r3, pc, #388	; (adr r3, 8007880 <_dtoa_r+0x2c8>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	f7f8 fdbf 	bl	800028c <__adddf3>
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	f7f9 fa21 	bl	8000b58 <__aeabi_d2iz>
 8007716:	2200      	movs	r2, #0
 8007718:	9000      	str	r0, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	4630      	mov	r0, r6
 800771e:	4639      	mov	r1, r7
 8007720:	f7f9 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8007724:	b150      	cbz	r0, 800773c <_dtoa_r+0x184>
 8007726:	9800      	ldr	r0, [sp, #0]
 8007728:	f7f8 fefc 	bl	8000524 <__aeabi_i2d>
 800772c:	4632      	mov	r2, r6
 800772e:	463b      	mov	r3, r7
 8007730:	f7f9 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007734:	b910      	cbnz	r0, 800773c <_dtoa_r+0x184>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	2b16      	cmp	r3, #22
 8007740:	d85a      	bhi.n	80077f8 <_dtoa_r+0x240>
 8007742:	9a00      	ldr	r2, [sp, #0]
 8007744:	4b57      	ldr	r3, [pc, #348]	; (80078a4 <_dtoa_r+0x2ec>)
 8007746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	ec51 0b19 	vmov	r0, r1, d9
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d050      	beq.n	80077fc <_dtoa_r+0x244>
 800775a:	9b00      	ldr	r3, [sp, #0]
 800775c:	3b01      	subs	r3, #1
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	930b      	str	r3, [sp, #44]	; 0x2c
 8007764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007766:	1b5d      	subs	r5, r3, r5
 8007768:	1e6b      	subs	r3, r5, #1
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	bf45      	ittet	mi
 800776e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007772:	9304      	strmi	r3, [sp, #16]
 8007774:	2300      	movpl	r3, #0
 8007776:	2300      	movmi	r3, #0
 8007778:	bf4c      	ite	mi
 800777a:	9305      	strmi	r3, [sp, #20]
 800777c:	9304      	strpl	r3, [sp, #16]
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	db3d      	blt.n	8007800 <_dtoa_r+0x248>
 8007784:	9b05      	ldr	r3, [sp, #20]
 8007786:	9a00      	ldr	r2, [sp, #0]
 8007788:	920a      	str	r2, [sp, #40]	; 0x28
 800778a:	4413      	add	r3, r2
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	2300      	movs	r3, #0
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	2b09      	cmp	r3, #9
 8007796:	f200 8089 	bhi.w	80078ac <_dtoa_r+0x2f4>
 800779a:	2b05      	cmp	r3, #5
 800779c:	bfc4      	itt	gt
 800779e:	3b04      	subgt	r3, #4
 80077a0:	9306      	strgt	r3, [sp, #24]
 80077a2:	9b06      	ldr	r3, [sp, #24]
 80077a4:	f1a3 0302 	sub.w	r3, r3, #2
 80077a8:	bfcc      	ite	gt
 80077aa:	2500      	movgt	r5, #0
 80077ac:	2501      	movle	r5, #1
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f200 8087 	bhi.w	80078c2 <_dtoa_r+0x30a>
 80077b4:	e8df f003 	tbb	[pc, r3]
 80077b8:	59383a2d 	.word	0x59383a2d
 80077bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077c0:	441d      	add	r5, r3
 80077c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	bfc1      	itttt	gt
 80077ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077da:	bfda      	itte	le
 80077dc:	f1c3 0320 	rsble	r3, r3, #32
 80077e0:	fa06 f003 	lslle.w	r0, r6, r3
 80077e4:	4318      	orrgt	r0, r3
 80077e6:	f7f8 fe8d 	bl	8000504 <__aeabi_ui2d>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4606      	mov	r6, r0
 80077ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077f2:	3d01      	subs	r5, #1
 80077f4:	930e      	str	r3, [sp, #56]	; 0x38
 80077f6:	e76a      	b.n	80076ce <_dtoa_r+0x116>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e7b2      	b.n	8007762 <_dtoa_r+0x1aa>
 80077fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80077fe:	e7b1      	b.n	8007764 <_dtoa_r+0x1ac>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	9a00      	ldr	r2, [sp, #0]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	4253      	negs	r3, r2
 800780a:	9307      	str	r3, [sp, #28]
 800780c:	2300      	movs	r3, #0
 800780e:	930a      	str	r3, [sp, #40]	; 0x28
 8007810:	e7bf      	b.n	8007792 <_dtoa_r+0x1da>
 8007812:	2300      	movs	r3, #0
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc55      	bgt.n	80078c8 <_dtoa_r+0x310>
 800781c:	2301      	movs	r3, #1
 800781e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007822:	461a      	mov	r2, r3
 8007824:	9209      	str	r2, [sp, #36]	; 0x24
 8007826:	e00c      	b.n	8007842 <_dtoa_r+0x28a>
 8007828:	2301      	movs	r3, #1
 800782a:	e7f3      	b.n	8007814 <_dtoa_r+0x25c>
 800782c:	2300      	movs	r3, #0
 800782e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	4413      	add	r3, r2
 8007836:	9302      	str	r3, [sp, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	bfb8      	it	lt
 8007840:	2301      	movlt	r3, #1
 8007842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007844:	2200      	movs	r2, #0
 8007846:	6042      	str	r2, [r0, #4]
 8007848:	2204      	movs	r2, #4
 800784a:	f102 0614 	add.w	r6, r2, #20
 800784e:	429e      	cmp	r6, r3
 8007850:	6841      	ldr	r1, [r0, #4]
 8007852:	d93d      	bls.n	80078d0 <_dtoa_r+0x318>
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fcb7 	bl	80081c8 <_Balloc>
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	2800      	cmp	r0, #0
 800785e:	d13b      	bne.n	80078d8 <_dtoa_r+0x320>
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <_dtoa_r+0x2f0>)
 8007862:	4602      	mov	r2, r0
 8007864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007868:	e6c0      	b.n	80075ec <_dtoa_r+0x34>
 800786a:	2301      	movs	r3, #1
 800786c:	e7df      	b.n	800782e <_dtoa_r+0x276>
 800786e:	bf00      	nop
 8007870:	636f4361 	.word	0x636f4361
 8007874:	3fd287a7 	.word	0x3fd287a7
 8007878:	8b60c8b3 	.word	0x8b60c8b3
 800787c:	3fc68a28 	.word	0x3fc68a28
 8007880:	509f79fb 	.word	0x509f79fb
 8007884:	3fd34413 	.word	0x3fd34413
 8007888:	08009b11 	.word	0x08009b11
 800788c:	08009b28 	.word	0x08009b28
 8007890:	7ff00000 	.word	0x7ff00000
 8007894:	08009b0d 	.word	0x08009b0d
 8007898:	08009b04 	.word	0x08009b04
 800789c:	08009ae1 	.word	0x08009ae1
 80078a0:	3ff80000 	.word	0x3ff80000
 80078a4:	08009c18 	.word	0x08009c18
 80078a8:	08009b83 	.word	0x08009b83
 80078ac:	2501      	movs	r5, #1
 80078ae:	2300      	movs	r3, #0
 80078b0:	9306      	str	r3, [sp, #24]
 80078b2:	9508      	str	r5, [sp, #32]
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078bc:	2200      	movs	r2, #0
 80078be:	2312      	movs	r3, #18
 80078c0:	e7b0      	b.n	8007824 <_dtoa_r+0x26c>
 80078c2:	2301      	movs	r3, #1
 80078c4:	9308      	str	r3, [sp, #32]
 80078c6:	e7f5      	b.n	80078b4 <_dtoa_r+0x2fc>
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078ce:	e7b8      	b.n	8007842 <_dtoa_r+0x28a>
 80078d0:	3101      	adds	r1, #1
 80078d2:	6041      	str	r1, [r0, #4]
 80078d4:	0052      	lsls	r2, r2, #1
 80078d6:	e7b8      	b.n	800784a <_dtoa_r+0x292>
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	2b0e      	cmp	r3, #14
 80078e2:	f200 809d 	bhi.w	8007a20 <_dtoa_r+0x468>
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	f000 809a 	beq.w	8007a20 <_dtoa_r+0x468>
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd32      	ble.n	8007958 <_dtoa_r+0x3a0>
 80078f2:	4ab7      	ldr	r2, [pc, #732]	; (8007bd0 <_dtoa_r+0x618>)
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	05d8      	lsls	r0, r3, #23
 8007904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007908:	d516      	bpl.n	8007938 <_dtoa_r+0x380>
 800790a:	4bb2      	ldr	r3, [pc, #712]	; (8007bd4 <_dtoa_r+0x61c>)
 800790c:	ec51 0b19 	vmov	r0, r1, d9
 8007910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007914:	f7f8 ff9a 	bl	800084c <__aeabi_ddiv>
 8007918:	f007 070f 	and.w	r7, r7, #15
 800791c:	4682      	mov	sl, r0
 800791e:	468b      	mov	fp, r1
 8007920:	2503      	movs	r5, #3
 8007922:	4eac      	ldr	r6, [pc, #688]	; (8007bd4 <_dtoa_r+0x61c>)
 8007924:	b957      	cbnz	r7, 800793c <_dtoa_r+0x384>
 8007926:	4642      	mov	r2, r8
 8007928:	464b      	mov	r3, r9
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f8 ff8d 	bl	800084c <__aeabi_ddiv>
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	e028      	b.n	800798a <_dtoa_r+0x3d2>
 8007938:	2502      	movs	r5, #2
 800793a:	e7f2      	b.n	8007922 <_dtoa_r+0x36a>
 800793c:	07f9      	lsls	r1, r7, #31
 800793e:	d508      	bpl.n	8007952 <_dtoa_r+0x39a>
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007948:	f7f8 fe56 	bl	80005f8 <__aeabi_dmul>
 800794c:	3501      	adds	r5, #1
 800794e:	4680      	mov	r8, r0
 8007950:	4689      	mov	r9, r1
 8007952:	107f      	asrs	r7, r7, #1
 8007954:	3608      	adds	r6, #8
 8007956:	e7e5      	b.n	8007924 <_dtoa_r+0x36c>
 8007958:	f000 809b 	beq.w	8007a92 <_dtoa_r+0x4da>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	4f9d      	ldr	r7, [pc, #628]	; (8007bd4 <_dtoa_r+0x61c>)
 8007960:	425e      	negs	r6, r3
 8007962:	4b9b      	ldr	r3, [pc, #620]	; (8007bd0 <_dtoa_r+0x618>)
 8007964:	f006 020f 	and.w	r2, r6, #15
 8007968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	ec51 0b19 	vmov	r0, r1, d9
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	1136      	asrs	r6, r6, #4
 800797a:	4682      	mov	sl, r0
 800797c:	468b      	mov	fp, r1
 800797e:	2300      	movs	r3, #0
 8007980:	2502      	movs	r5, #2
 8007982:	2e00      	cmp	r6, #0
 8007984:	d17a      	bne.n	8007a7c <_dtoa_r+0x4c4>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1d3      	bne.n	8007932 <_dtoa_r+0x37a>
 800798a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8082 	beq.w	8007a96 <_dtoa_r+0x4de>
 8007992:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <_dtoa_r+0x620>)
 8007994:	2200      	movs	r2, #0
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f9 f89f 	bl	8000adc <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d079      	beq.n	8007a96 <_dtoa_r+0x4de>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d076      	beq.n	8007a96 <_dtoa_r+0x4de>
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dd36      	ble.n	8007a1c <_dtoa_r+0x464>
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	4650      	mov	r0, sl
 80079b2:	4659      	mov	r1, fp
 80079b4:	1e5f      	subs	r7, r3, #1
 80079b6:	2200      	movs	r2, #0
 80079b8:	4b88      	ldr	r3, [pc, #544]	; (8007bdc <_dtoa_r+0x624>)
 80079ba:	f7f8 fe1d 	bl	80005f8 <__aeabi_dmul>
 80079be:	9e02      	ldr	r6, [sp, #8]
 80079c0:	4682      	mov	sl, r0
 80079c2:	468b      	mov	fp, r1
 80079c4:	3501      	adds	r5, #1
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7f8 fdac 	bl	8000524 <__aeabi_i2d>
 80079cc:	4652      	mov	r2, sl
 80079ce:	465b      	mov	r3, fp
 80079d0:	f7f8 fe12 	bl	80005f8 <__aeabi_dmul>
 80079d4:	4b82      	ldr	r3, [pc, #520]	; (8007be0 <_dtoa_r+0x628>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	f7f8 fc58 	bl	800028c <__adddf3>
 80079dc:	46d0      	mov	r8, sl
 80079de:	46d9      	mov	r9, fp
 80079e0:	4682      	mov	sl, r0
 80079e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	d158      	bne.n	8007a9c <_dtoa_r+0x4e4>
 80079ea:	4b7e      	ldr	r3, [pc, #504]	; (8007be4 <_dtoa_r+0x62c>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f8 fc49 	bl	8000288 <__aeabi_dsub>
 80079f6:	4652      	mov	r2, sl
 80079f8:	465b      	mov	r3, fp
 80079fa:	4680      	mov	r8, r0
 80079fc:	4689      	mov	r9, r1
 80079fe:	f7f9 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f040 8295 	bne.w	8007f32 <_dtoa_r+0x97a>
 8007a08:	4652      	mov	r2, sl
 8007a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f9 f863 	bl	8000adc <__aeabi_dcmplt>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f040 8289 	bne.w	8007f2e <_dtoa_r+0x976>
 8007a1c:	ec5b ab19 	vmov	sl, fp, d9
 8007a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f2c0 8148 	blt.w	8007cb8 <_dtoa_r+0x700>
 8007a28:	9a00      	ldr	r2, [sp, #0]
 8007a2a:	2a0e      	cmp	r2, #14
 8007a2c:	f300 8144 	bgt.w	8007cb8 <_dtoa_r+0x700>
 8007a30:	4b67      	ldr	r3, [pc, #412]	; (8007bd0 <_dtoa_r+0x618>)
 8007a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f280 80d5 	bge.w	8007bec <_dtoa_r+0x634>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f300 80d1 	bgt.w	8007bec <_dtoa_r+0x634>
 8007a4a:	f040 826f 	bne.w	8007f2c <_dtoa_r+0x974>
 8007a4e:	4b65      	ldr	r3, [pc, #404]	; (8007be4 <_dtoa_r+0x62c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	f7f9 f851 	bl	8000b04 <__aeabi_dcmpge>
 8007a62:	9e03      	ldr	r6, [sp, #12]
 8007a64:	4637      	mov	r7, r6
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f040 8245 	bne.w	8007ef6 <_dtoa_r+0x93e>
 8007a6c:	9d01      	ldr	r5, [sp, #4]
 8007a6e:	2331      	movs	r3, #49	; 0x31
 8007a70:	f805 3b01 	strb.w	r3, [r5], #1
 8007a74:	9b00      	ldr	r3, [sp, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	e240      	b.n	8007efe <_dtoa_r+0x946>
 8007a7c:	07f2      	lsls	r2, r6, #31
 8007a7e:	d505      	bpl.n	8007a8c <_dtoa_r+0x4d4>
 8007a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a84:	f7f8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	1076      	asrs	r6, r6, #1
 8007a8e:	3708      	adds	r7, #8
 8007a90:	e777      	b.n	8007982 <_dtoa_r+0x3ca>
 8007a92:	2502      	movs	r5, #2
 8007a94:	e779      	b.n	800798a <_dtoa_r+0x3d2>
 8007a96:	9f00      	ldr	r7, [sp, #0]
 8007a98:	9e03      	ldr	r6, [sp, #12]
 8007a9a:	e794      	b.n	80079c6 <_dtoa_r+0x40e>
 8007a9c:	9901      	ldr	r1, [sp, #4]
 8007a9e:	4b4c      	ldr	r3, [pc, #304]	; (8007bd0 <_dtoa_r+0x618>)
 8007aa0:	4431      	add	r1, r6
 8007aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8007aa4:	9908      	ldr	r1, [sp, #32]
 8007aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d043      	beq.n	8007b3a <_dtoa_r+0x582>
 8007ab2:	494d      	ldr	r1, [pc, #308]	; (8007be8 <_dtoa_r+0x630>)
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f7f8 fec9 	bl	800084c <__aeabi_ddiv>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fbe3 	bl	8000288 <__aeabi_dsub>
 8007ac2:	9d01      	ldr	r5, [sp, #4]
 8007ac4:	4682      	mov	sl, r0
 8007ac6:	468b      	mov	fp, r1
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7f9 f844 	bl	8000b58 <__aeabi_d2iz>
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	f7f8 fd27 	bl	8000524 <__aeabi_i2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fbd3 	bl	8000288 <__aeabi_dsub>
 8007ae2:	3630      	adds	r6, #48	; 0x30
 8007ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	465b      	mov	r3, fp
 8007aec:	4680      	mov	r8, r0
 8007aee:	4689      	mov	r9, r1
 8007af0:	f7f8 fff4 	bl	8000adc <__aeabi_dcmplt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d163      	bne.n	8007bc0 <_dtoa_r+0x608>
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	4936      	ldr	r1, [pc, #216]	; (8007bd8 <_dtoa_r+0x620>)
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7f8 fbc2 	bl	8000288 <__aeabi_dsub>
 8007b04:	4652      	mov	r2, sl
 8007b06:	465b      	mov	r3, fp
 8007b08:	f7f8 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	f040 80b5 	bne.w	8007c7c <_dtoa_r+0x6c4>
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	429d      	cmp	r5, r3
 8007b16:	d081      	beq.n	8007a1c <_dtoa_r+0x464>
 8007b18:	4b30      	ldr	r3, [pc, #192]	; (8007bdc <_dtoa_r+0x624>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	4659      	mov	r1, fp
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <_dtoa_r+0x624>)
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	4680      	mov	r8, r0
 8007b36:	4689      	mov	r9, r1
 8007b38:	e7c6      	b.n	8007ac8 <_dtoa_r+0x510>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	f7f8 fd5b 	bl	80005f8 <__aeabi_dmul>
 8007b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b44:	9d01      	ldr	r5, [sp, #4]
 8007b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7f9 f802 	bl	8000b58 <__aeabi_d2iz>
 8007b54:	4606      	mov	r6, r0
 8007b56:	f7f8 fce5 	bl	8000524 <__aeabi_i2d>
 8007b5a:	3630      	adds	r6, #48	; 0x30
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4640      	mov	r0, r8
 8007b62:	4649      	mov	r1, r9
 8007b64:	f7f8 fb90 	bl	8000288 <__aeabi_dsub>
 8007b68:	f805 6b01 	strb.w	r6, [r5], #1
 8007b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	4680      	mov	r8, r0
 8007b72:	4689      	mov	r9, r1
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	d124      	bne.n	8007bc4 <_dtoa_r+0x60c>
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <_dtoa_r+0x630>)
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	4659      	mov	r1, fp
 8007b80:	f7f8 fb84 	bl	800028c <__adddf3>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4640      	mov	r0, r8
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	f7f8 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d173      	bne.n	8007c7c <_dtoa_r+0x6c4>
 8007b94:	4652      	mov	r2, sl
 8007b96:	465b      	mov	r3, fp
 8007b98:	4913      	ldr	r1, [pc, #76]	; (8007be8 <_dtoa_r+0x630>)
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f7f8 fb74 	bl	8000288 <__aeabi_dsub>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 ff98 	bl	8000adc <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f43f af35 	beq.w	8007a1c <_dtoa_r+0x464>
 8007bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bb4:	1e6b      	subs	r3, r5, #1
 8007bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bbc:	2b30      	cmp	r3, #48	; 0x30
 8007bbe:	d0f8      	beq.n	8007bb2 <_dtoa_r+0x5fa>
 8007bc0:	9700      	str	r7, [sp, #0]
 8007bc2:	e049      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <_dtoa_r+0x624>)
 8007bc6:	f7f8 fd17 	bl	80005f8 <__aeabi_dmul>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4689      	mov	r9, r1
 8007bce:	e7bd      	b.n	8007b4c <_dtoa_r+0x594>
 8007bd0:	08009c18 	.word	0x08009c18
 8007bd4:	08009bf0 	.word	0x08009bf0
 8007bd8:	3ff00000 	.word	0x3ff00000
 8007bdc:	40240000 	.word	0x40240000
 8007be0:	401c0000 	.word	0x401c0000
 8007be4:	40140000 	.word	0x40140000
 8007be8:	3fe00000 	.word	0x3fe00000
 8007bec:	9d01      	ldr	r5, [sp, #4]
 8007bee:	4656      	mov	r6, sl
 8007bf0:	465f      	mov	r7, fp
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fe27 	bl	800084c <__aeabi_ddiv>
 8007bfe:	f7f8 ffab 	bl	8000b58 <__aeabi_d2iz>
 8007c02:	4682      	mov	sl, r0
 8007c04:	f7f8 fc8e 	bl	8000524 <__aeabi_i2d>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c1c:	f7f8 fb34 	bl	8000288 <__aeabi_dsub>
 8007c20:	f805 6b01 	strb.w	r6, [r5], #1
 8007c24:	9e01      	ldr	r6, [sp, #4]
 8007c26:	9f03      	ldr	r7, [sp, #12]
 8007c28:	1bae      	subs	r6, r5, r6
 8007c2a:	42b7      	cmp	r7, r6
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	d135      	bne.n	8007c9e <_dtoa_r+0x6e6>
 8007c32:	f7f8 fb2b 	bl	800028c <__adddf3>
 8007c36:	4642      	mov	r2, r8
 8007c38:	464b      	mov	r3, r9
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	f7f8 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007c42:	b9d0      	cbnz	r0, 8007c7a <_dtoa_r+0x6c2>
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c50:	b110      	cbz	r0, 8007c58 <_dtoa_r+0x6a0>
 8007c52:	f01a 0f01 	tst.w	sl, #1
 8007c56:	d110      	bne.n	8007c7a <_dtoa_r+0x6c2>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	f000 faf3 	bl	8008248 <_Bfree>
 8007c62:	2300      	movs	r3, #0
 8007c64:	9800      	ldr	r0, [sp, #0]
 8007c66:	702b      	strb	r3, [r5, #0]
 8007c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	6018      	str	r0, [r3, #0]
 8007c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f43f acf1 	beq.w	8007658 <_dtoa_r+0xa0>
 8007c76:	601d      	str	r5, [r3, #0]
 8007c78:	e4ee      	b.n	8007658 <_dtoa_r+0xa0>
 8007c7a:	9f00      	ldr	r7, [sp, #0]
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	461d      	mov	r5, r3
 8007c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c84:	2a39      	cmp	r2, #57	; 0x39
 8007c86:	d106      	bne.n	8007c96 <_dtoa_r+0x6de>
 8007c88:	9a01      	ldr	r2, [sp, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d1f7      	bne.n	8007c7e <_dtoa_r+0x6c6>
 8007c8e:	9901      	ldr	r1, [sp, #4]
 8007c90:	2230      	movs	r2, #48	; 0x30
 8007c92:	3701      	adds	r7, #1
 8007c94:	700a      	strb	r2, [r1, #0]
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	3201      	adds	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e790      	b.n	8007bc0 <_dtoa_r+0x608>
 8007c9e:	4ba6      	ldr	r3, [pc, #664]	; (8007f38 <_dtoa_r+0x980>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f7f8 fca9 	bl	80005f8 <__aeabi_dmul>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	f7f8 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d09d      	beq.n	8007bf2 <_dtoa_r+0x63a>
 8007cb6:	e7cf      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007cb8:	9a08      	ldr	r2, [sp, #32]
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	f000 80d7 	beq.w	8007e6e <_dtoa_r+0x8b6>
 8007cc0:	9a06      	ldr	r2, [sp, #24]
 8007cc2:	2a01      	cmp	r2, #1
 8007cc4:	f300 80ba 	bgt.w	8007e3c <_dtoa_r+0x884>
 8007cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	f000 80b2 	beq.w	8007e34 <_dtoa_r+0x87c>
 8007cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cd4:	9e07      	ldr	r6, [sp, #28]
 8007cd6:	9d04      	ldr	r5, [sp, #16]
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	441a      	add	r2, r3
 8007cdc:	9204      	str	r2, [sp, #16]
 8007cde:	9a05      	ldr	r2, [sp, #20]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	441a      	add	r2, r3
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	9205      	str	r2, [sp, #20]
 8007ce8:	f000 fb66 	bl	80083b8 <__i2b>
 8007cec:	4607      	mov	r7, r0
 8007cee:	2d00      	cmp	r5, #0
 8007cf0:	dd0c      	ble.n	8007d0c <_dtoa_r+0x754>
 8007cf2:	9b05      	ldr	r3, [sp, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dd09      	ble.n	8007d0c <_dtoa_r+0x754>
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	9a04      	ldr	r2, [sp, #16]
 8007cfc:	bfa8      	it	ge
 8007cfe:	462b      	movge	r3, r5
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	9204      	str	r2, [sp, #16]
 8007d04:	9a05      	ldr	r2, [sp, #20]
 8007d06:	1aed      	subs	r5, r5, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	9b07      	ldr	r3, [sp, #28]
 8007d0e:	b31b      	cbz	r3, 8007d58 <_dtoa_r+0x7a0>
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80af 	beq.w	8007e76 <_dtoa_r+0x8be>
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	dd13      	ble.n	8007d44 <_dtoa_r+0x78c>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4632      	mov	r2, r6
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fc09 	bl	8008538 <__pow5mult>
 8007d26:	ee18 2a10 	vmov	r2, s16
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 fb58 	bl	80083e4 <__multiply>
 8007d34:	ee18 1a10 	vmov	r1, s16
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fa84 	bl	8008248 <_Bfree>
 8007d40:	ee08 8a10 	vmov	s16, r8
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	1b9a      	subs	r2, r3, r6
 8007d48:	d006      	beq.n	8007d58 <_dtoa_r+0x7a0>
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fbf2 	bl	8008538 <__pow5mult>
 8007d54:	ee08 0a10 	vmov	s16, r0
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fb2c 	bl	80083b8 <__i2b>
 8007d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	f340 8088 	ble.w	8007e7a <_dtoa_r+0x8c2>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 fbe2 	bl	8008538 <__pow5mult>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	4606      	mov	r6, r0
 8007d7a:	f340 8081 	ble.w	8007e80 <_dtoa_r+0x8c8>
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	6933      	ldr	r3, [r6, #16]
 8007d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d88:	6918      	ldr	r0, [r3, #16]
 8007d8a:	f000 fac5 	bl	8008318 <__hi0bits>
 8007d8e:	f1c0 0020 	rsb	r0, r0, #32
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	4418      	add	r0, r3
 8007d96:	f010 001f 	ands.w	r0, r0, #31
 8007d9a:	f000 8092 	beq.w	8007ec2 <_dtoa_r+0x90a>
 8007d9e:	f1c0 0320 	rsb	r3, r0, #32
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	f340 808a 	ble.w	8007ebc <_dtoa_r+0x904>
 8007da8:	f1c0 001c 	rsb	r0, r0, #28
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	4403      	add	r3, r0
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9b05      	ldr	r3, [sp, #20]
 8007db4:	4403      	add	r3, r0
 8007db6:	4405      	add	r5, r0
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	9b04      	ldr	r3, [sp, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd07      	ble.n	8007dd0 <_dtoa_r+0x818>
 8007dc0:	ee18 1a10 	vmov	r1, s16
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fc10 	bl	80085ec <__lshift>
 8007dcc:	ee08 0a10 	vmov	s16, r0
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd05      	ble.n	8007de2 <_dtoa_r+0x82a>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fc06 	bl	80085ec <__lshift>
 8007de0:	4606      	mov	r6, r0
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d06e      	beq.n	8007ec6 <_dtoa_r+0x90e>
 8007de8:	ee18 0a10 	vmov	r0, s16
 8007dec:	4631      	mov	r1, r6
 8007dee:	f000 fc6d 	bl	80086cc <__mcmp>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	da67      	bge.n	8007ec6 <_dtoa_r+0x90e>
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	ee18 1a10 	vmov	r1, s16
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	220a      	movs	r2, #10
 8007e02:	2300      	movs	r3, #0
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fa41 	bl	800828c <__multadd>
 8007e0a:	9b08      	ldr	r3, [sp, #32]
 8007e0c:	ee08 0a10 	vmov	s16, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 81b1 	beq.w	8008178 <_dtoa_r+0xbc0>
 8007e16:	2300      	movs	r3, #0
 8007e18:	4639      	mov	r1, r7
 8007e1a:	220a      	movs	r2, #10
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fa35 	bl	800828c <__multadd>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	4607      	mov	r7, r0
 8007e28:	f300 808e 	bgt.w	8007f48 <_dtoa_r+0x990>
 8007e2c:	9b06      	ldr	r3, [sp, #24]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dc51      	bgt.n	8007ed6 <_dtoa_r+0x91e>
 8007e32:	e089      	b.n	8007f48 <_dtoa_r+0x990>
 8007e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e3a:	e74b      	b.n	8007cd4 <_dtoa_r+0x71c>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	1e5e      	subs	r6, r3, #1
 8007e40:	9b07      	ldr	r3, [sp, #28]
 8007e42:	42b3      	cmp	r3, r6
 8007e44:	bfbf      	itttt	lt
 8007e46:	9b07      	ldrlt	r3, [sp, #28]
 8007e48:	9607      	strlt	r6, [sp, #28]
 8007e4a:	1af2      	sublt	r2, r6, r3
 8007e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e4e:	bfb6      	itet	lt
 8007e50:	189b      	addlt	r3, r3, r2
 8007e52:	1b9e      	subge	r6, r3, r6
 8007e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	bfb8      	it	lt
 8007e5a:	2600      	movlt	r6, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfb7      	itett	lt
 8007e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e68:	1a9d      	sublt	r5, r3, r2
 8007e6a:	2300      	movlt	r3, #0
 8007e6c:	e734      	b.n	8007cd8 <_dtoa_r+0x720>
 8007e6e:	9e07      	ldr	r6, [sp, #28]
 8007e70:	9d04      	ldr	r5, [sp, #16]
 8007e72:	9f08      	ldr	r7, [sp, #32]
 8007e74:	e73b      	b.n	8007cee <_dtoa_r+0x736>
 8007e76:	9a07      	ldr	r2, [sp, #28]
 8007e78:	e767      	b.n	8007d4a <_dtoa_r+0x792>
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	dc18      	bgt.n	8007eb2 <_dtoa_r+0x8fa>
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	d115      	bne.n	8007eb2 <_dtoa_r+0x8fa>
 8007e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e8a:	b993      	cbnz	r3, 8007eb2 <_dtoa_r+0x8fa>
 8007e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e90:	0d1b      	lsrs	r3, r3, #20
 8007e92:	051b      	lsls	r3, r3, #20
 8007e94:	b183      	cbz	r3, 8007eb8 <_dtoa_r+0x900>
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	9b05      	ldr	r3, [sp, #20]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f04f 0801 	mov.w	r8, #1
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f af6a 	bne.w	8007d82 <_dtoa_r+0x7ca>
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e76f      	b.n	8007d92 <_dtoa_r+0x7da>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	e7f6      	b.n	8007ea6 <_dtoa_r+0x8ee>
 8007eb8:	4698      	mov	r8, r3
 8007eba:	e7f4      	b.n	8007ea6 <_dtoa_r+0x8ee>
 8007ebc:	f43f af7d 	beq.w	8007dba <_dtoa_r+0x802>
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	301c      	adds	r0, #28
 8007ec4:	e772      	b.n	8007dac <_dtoa_r+0x7f4>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc37      	bgt.n	8007f3c <_dtoa_r+0x984>
 8007ecc:	9b06      	ldr	r3, [sp, #24]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	dd34      	ble.n	8007f3c <_dtoa_r+0x984>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	b96b      	cbnz	r3, 8007ef6 <_dtoa_r+0x93e>
 8007eda:	4631      	mov	r1, r6
 8007edc:	2205      	movs	r2, #5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f9d4 	bl	800828c <__multadd>
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	ee18 0a10 	vmov	r0, s16
 8007eec:	f000 fbee 	bl	80086cc <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f73f adbb 	bgt.w	8007a6c <_dtoa_r+0x4b4>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	9d01      	ldr	r5, [sp, #4]
 8007efa:	43db      	mvns	r3, r3
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	f04f 0800 	mov.w	r8, #0
 8007f02:	4631      	mov	r1, r6
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 f99f 	bl	8008248 <_Bfree>
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	f43f aea4 	beq.w	8007c58 <_dtoa_r+0x6a0>
 8007f10:	f1b8 0f00 	cmp.w	r8, #0
 8007f14:	d005      	beq.n	8007f22 <_dtoa_r+0x96a>
 8007f16:	45b8      	cmp	r8, r7
 8007f18:	d003      	beq.n	8007f22 <_dtoa_r+0x96a>
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 f993 	bl	8008248 <_Bfree>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 f98f 	bl	8008248 <_Bfree>
 8007f2a:	e695      	b.n	8007c58 <_dtoa_r+0x6a0>
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	4637      	mov	r7, r6
 8007f30:	e7e1      	b.n	8007ef6 <_dtoa_r+0x93e>
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	4637      	mov	r7, r6
 8007f36:	e599      	b.n	8007a6c <_dtoa_r+0x4b4>
 8007f38:	40240000 	.word	0x40240000
 8007f3c:	9b08      	ldr	r3, [sp, #32]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80ca 	beq.w	80080d8 <_dtoa_r+0xb20>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	dd05      	ble.n	8007f58 <_dtoa_r+0x9a0>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	462a      	mov	r2, r5
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fb4b 	bl	80085ec <__lshift>
 8007f56:	4607      	mov	r7, r0
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	d05b      	beq.n	8008016 <_dtoa_r+0xa5e>
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 f931 	bl	80081c8 <_Balloc>
 8007f66:	4605      	mov	r5, r0
 8007f68:	b928      	cbnz	r0, 8007f76 <_dtoa_r+0x9be>
 8007f6a:	4b87      	ldr	r3, [pc, #540]	; (8008188 <_dtoa_r+0xbd0>)
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f72:	f7ff bb3b 	b.w	80075ec <_dtoa_r+0x34>
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	3202      	adds	r2, #2
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	f107 010c 	add.w	r1, r7, #12
 8007f80:	300c      	adds	r0, #12
 8007f82:	f000 f913 	bl	80081ac <memcpy>
 8007f86:	2201      	movs	r2, #1
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fb2e 	bl	80085ec <__lshift>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	f103 0901 	add.w	r9, r3, #1
 8007f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	f00a 0301 	and.w	r3, sl, #1
 8007fa2:	46b8      	mov	r8, r7
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	4631      	mov	r1, r6
 8007faa:	ee18 0a10 	vmov	r0, s16
 8007fae:	f7ff fa77 	bl	80074a0 <quorem>
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fba:	ee18 0a10 	vmov	r0, s16
 8007fbe:	f000 fb85 	bl	80086cc <__mcmp>
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	9003      	str	r0, [sp, #12]
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fb9b 	bl	8008704 <__mdiff>
 8007fce:	68c2      	ldr	r2, [r0, #12]
 8007fd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	bb02      	cbnz	r2, 800801a <_dtoa_r+0xa62>
 8007fd8:	4601      	mov	r1, r0
 8007fda:	ee18 0a10 	vmov	r0, s16
 8007fde:	f000 fb75 	bl	80086cc <__mcmp>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	9207      	str	r2, [sp, #28]
 8007fea:	f000 f92d 	bl	8008248 <_Bfree>
 8007fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ff2:	ea43 0102 	orr.w	r1, r3, r2
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	464d      	mov	r5, r9
 8007ffc:	d10f      	bne.n	800801e <_dtoa_r+0xa66>
 8007ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008002:	d02a      	beq.n	800805a <_dtoa_r+0xaa2>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd02      	ble.n	8008010 <_dtoa_r+0xa58>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008010:	f88b a000 	strb.w	sl, [fp]
 8008014:	e775      	b.n	8007f02 <_dtoa_r+0x94a>
 8008016:	4638      	mov	r0, r7
 8008018:	e7ba      	b.n	8007f90 <_dtoa_r+0x9d8>
 800801a:	2201      	movs	r2, #1
 800801c:	e7e2      	b.n	8007fe4 <_dtoa_r+0xa2c>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	db04      	blt.n	800802e <_dtoa_r+0xa76>
 8008024:	9906      	ldr	r1, [sp, #24]
 8008026:	430b      	orrs	r3, r1
 8008028:	9904      	ldr	r1, [sp, #16]
 800802a:	430b      	orrs	r3, r1
 800802c:	d122      	bne.n	8008074 <_dtoa_r+0xabc>
 800802e:	2a00      	cmp	r2, #0
 8008030:	ddee      	ble.n	8008010 <_dtoa_r+0xa58>
 8008032:	ee18 1a10 	vmov	r1, s16
 8008036:	2201      	movs	r2, #1
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fad7 	bl	80085ec <__lshift>
 800803e:	4631      	mov	r1, r6
 8008040:	ee08 0a10 	vmov	s16, r0
 8008044:	f000 fb42 	bl	80086cc <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	dc03      	bgt.n	8008054 <_dtoa_r+0xa9c>
 800804c:	d1e0      	bne.n	8008010 <_dtoa_r+0xa58>
 800804e:	f01a 0f01 	tst.w	sl, #1
 8008052:	d0dd      	beq.n	8008010 <_dtoa_r+0xa58>
 8008054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008058:	d1d7      	bne.n	800800a <_dtoa_r+0xa52>
 800805a:	2339      	movs	r3, #57	; 0x39
 800805c:	f88b 3000 	strb.w	r3, [fp]
 8008060:	462b      	mov	r3, r5
 8008062:	461d      	mov	r5, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800806a:	2a39      	cmp	r2, #57	; 0x39
 800806c:	d071      	beq.n	8008152 <_dtoa_r+0xb9a>
 800806e:	3201      	adds	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e746      	b.n	8007f02 <_dtoa_r+0x94a>
 8008074:	2a00      	cmp	r2, #0
 8008076:	dd07      	ble.n	8008088 <_dtoa_r+0xad0>
 8008078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800807c:	d0ed      	beq.n	800805a <_dtoa_r+0xaa2>
 800807e:	f10a 0301 	add.w	r3, sl, #1
 8008082:	f88b 3000 	strb.w	r3, [fp]
 8008086:	e73c      	b.n	8007f02 <_dtoa_r+0x94a>
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800808e:	4599      	cmp	r9, r3
 8008090:	d047      	beq.n	8008122 <_dtoa_r+0xb6a>
 8008092:	ee18 1a10 	vmov	r1, s16
 8008096:	2300      	movs	r3, #0
 8008098:	220a      	movs	r2, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f8f6 	bl	800828c <__multadd>
 80080a0:	45b8      	cmp	r8, r7
 80080a2:	ee08 0a10 	vmov	s16, r0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	f04f 020a 	mov.w	r2, #10
 80080ae:	4641      	mov	r1, r8
 80080b0:	4620      	mov	r0, r4
 80080b2:	d106      	bne.n	80080c2 <_dtoa_r+0xb0a>
 80080b4:	f000 f8ea 	bl	800828c <__multadd>
 80080b8:	4680      	mov	r8, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	f109 0901 	add.w	r9, r9, #1
 80080c0:	e772      	b.n	8007fa8 <_dtoa_r+0x9f0>
 80080c2:	f000 f8e3 	bl	800828c <__multadd>
 80080c6:	4639      	mov	r1, r7
 80080c8:	4680      	mov	r8, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	220a      	movs	r2, #10
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 f8dc 	bl	800828c <__multadd>
 80080d4:	4607      	mov	r7, r0
 80080d6:	e7f1      	b.n	80080bc <_dtoa_r+0xb04>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	9d01      	ldr	r5, [sp, #4]
 80080de:	ee18 0a10 	vmov	r0, s16
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7ff f9dc 	bl	80074a0 <quorem>
 80080e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	f805 ab01 	strb.w	sl, [r5], #1
 80080f2:	1aea      	subs	r2, r5, r3
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	dd09      	ble.n	800810e <_dtoa_r+0xb56>
 80080fa:	ee18 1a10 	vmov	r1, s16
 80080fe:	2300      	movs	r3, #0
 8008100:	220a      	movs	r2, #10
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f8c2 	bl	800828c <__multadd>
 8008108:	ee08 0a10 	vmov	s16, r0
 800810c:	e7e7      	b.n	80080de <_dtoa_r+0xb26>
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfc8      	it	gt
 8008114:	461d      	movgt	r5, r3
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	bfd8      	it	le
 800811a:	2501      	movle	r5, #1
 800811c:	441d      	add	r5, r3
 800811e:	f04f 0800 	mov.w	r8, #0
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	2201      	movs	r2, #1
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fa5f 	bl	80085ec <__lshift>
 800812e:	4631      	mov	r1, r6
 8008130:	ee08 0a10 	vmov	s16, r0
 8008134:	f000 faca 	bl	80086cc <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dc91      	bgt.n	8008060 <_dtoa_r+0xaa8>
 800813c:	d102      	bne.n	8008144 <_dtoa_r+0xb8c>
 800813e:	f01a 0f01 	tst.w	sl, #1
 8008142:	d18d      	bne.n	8008060 <_dtoa_r+0xaa8>
 8008144:	462b      	mov	r3, r5
 8008146:	461d      	mov	r5, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a30      	cmp	r2, #48	; 0x30
 800814e:	d0fa      	beq.n	8008146 <_dtoa_r+0xb8e>
 8008150:	e6d7      	b.n	8007f02 <_dtoa_r+0x94a>
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d184      	bne.n	8008062 <_dtoa_r+0xaaa>
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	7013      	strb	r3, [r2, #0]
 8008162:	e6ce      	b.n	8007f02 <_dtoa_r+0x94a>
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <_dtoa_r+0xbd4>)
 8008166:	f7ff ba95 	b.w	8007694 <_dtoa_r+0xdc>
 800816a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f aa6e 	bne.w	800764e <_dtoa_r+0x96>
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <_dtoa_r+0xbd8>)
 8008174:	f7ff ba8e 	b.w	8007694 <_dtoa_r+0xdc>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dcae      	bgt.n	80080dc <_dtoa_r+0xb24>
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	2b02      	cmp	r3, #2
 8008182:	f73f aea8 	bgt.w	8007ed6 <_dtoa_r+0x91e>
 8008186:	e7a9      	b.n	80080dc <_dtoa_r+0xb24>
 8008188:	08009b83 	.word	0x08009b83
 800818c:	08009ae0 	.word	0x08009ae0
 8008190:	08009b04 	.word	0x08009b04

08008194 <_localeconv_r>:
 8008194:	4800      	ldr	r0, [pc, #0]	; (8008198 <_localeconv_r+0x4>)
 8008196:	4770      	bx	lr
 8008198:	20000168 	.word	0x20000168

0800819c <malloc>:
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <malloc+0xc>)
 800819e:	4601      	mov	r1, r0
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	f000 bc17 	b.w	80089d4 <_malloc_r>
 80081a6:	bf00      	nop
 80081a8:	20000014 	.word	0x20000014

080081ac <memcpy>:
 80081ac:	440a      	add	r2, r1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b4:	d100      	bne.n	80081b8 <memcpy+0xc>
 80081b6:	4770      	bx	lr
 80081b8:	b510      	push	{r4, lr}
 80081ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c2:	4291      	cmp	r1, r2
 80081c4:	d1f9      	bne.n	80081ba <memcpy+0xe>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <_Balloc>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081cc:	4604      	mov	r4, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	b976      	cbnz	r6, 80081f0 <_Balloc+0x28>
 80081d2:	2010      	movs	r0, #16
 80081d4:	f7ff ffe2 	bl	800819c <malloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	6260      	str	r0, [r4, #36]	; 0x24
 80081dc:	b920      	cbnz	r0, 80081e8 <_Balloc+0x20>
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <_Balloc+0x78>)
 80081e0:	4818      	ldr	r0, [pc, #96]	; (8008244 <_Balloc+0x7c>)
 80081e2:	2166      	movs	r1, #102	; 0x66
 80081e4:	f000 fdd6 	bl	8008d94 <__assert_func>
 80081e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081ec:	6006      	str	r6, [r0, #0]
 80081ee:	60c6      	str	r6, [r0, #12]
 80081f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081f2:	68f3      	ldr	r3, [r6, #12]
 80081f4:	b183      	cbz	r3, 8008218 <_Balloc+0x50>
 80081f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081fe:	b9b8      	cbnz	r0, 8008230 <_Balloc+0x68>
 8008200:	2101      	movs	r1, #1
 8008202:	fa01 f605 	lsl.w	r6, r1, r5
 8008206:	1d72      	adds	r2, r6, #5
 8008208:	0092      	lsls	r2, r2, #2
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fb60 	bl	80088d0 <_calloc_r>
 8008210:	b160      	cbz	r0, 800822c <_Balloc+0x64>
 8008212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008216:	e00e      	b.n	8008236 <_Balloc+0x6e>
 8008218:	2221      	movs	r2, #33	; 0x21
 800821a:	2104      	movs	r1, #4
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fb57 	bl	80088d0 <_calloc_r>
 8008222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008224:	60f0      	str	r0, [r6, #12]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e4      	bne.n	80081f6 <_Balloc+0x2e>
 800822c:	2000      	movs	r0, #0
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	6802      	ldr	r2, [r0, #0]
 8008232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008236:	2300      	movs	r3, #0
 8008238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800823c:	e7f7      	b.n	800822e <_Balloc+0x66>
 800823e:	bf00      	nop
 8008240:	08009b11 	.word	0x08009b11
 8008244:	08009b94 	.word	0x08009b94

08008248 <_Bfree>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b976      	cbnz	r6, 8008270 <_Bfree+0x28>
 8008252:	2010      	movs	r0, #16
 8008254:	f7ff ffa2 	bl	800819c <malloc>
 8008258:	4602      	mov	r2, r0
 800825a:	6268      	str	r0, [r5, #36]	; 0x24
 800825c:	b920      	cbnz	r0, 8008268 <_Bfree+0x20>
 800825e:	4b09      	ldr	r3, [pc, #36]	; (8008284 <_Bfree+0x3c>)
 8008260:	4809      	ldr	r0, [pc, #36]	; (8008288 <_Bfree+0x40>)
 8008262:	218a      	movs	r1, #138	; 0x8a
 8008264:	f000 fd96 	bl	8008d94 <__assert_func>
 8008268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800826c:	6006      	str	r6, [r0, #0]
 800826e:	60c6      	str	r6, [r0, #12]
 8008270:	b13c      	cbz	r4, 8008282 <_Bfree+0x3a>
 8008272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008274:	6862      	ldr	r2, [r4, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800827c:	6021      	str	r1, [r4, #0]
 800827e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	08009b11 	.word	0x08009b11
 8008288:	08009b94 	.word	0x08009b94

0800828c <__multadd>:
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	690d      	ldr	r5, [r1, #16]
 8008292:	4607      	mov	r7, r0
 8008294:	460c      	mov	r4, r1
 8008296:	461e      	mov	r6, r3
 8008298:	f101 0c14 	add.w	ip, r1, #20
 800829c:	2000      	movs	r0, #0
 800829e:	f8dc 3000 	ldr.w	r3, [ip]
 80082a2:	b299      	uxth	r1, r3
 80082a4:	fb02 6101 	mla	r1, r2, r1, r6
 80082a8:	0c1e      	lsrs	r6, r3, #16
 80082aa:	0c0b      	lsrs	r3, r1, #16
 80082ac:	fb02 3306 	mla	r3, r2, r6, r3
 80082b0:	b289      	uxth	r1, r1
 80082b2:	3001      	adds	r0, #1
 80082b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082b8:	4285      	cmp	r5, r0
 80082ba:	f84c 1b04 	str.w	r1, [ip], #4
 80082be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082c2:	dcec      	bgt.n	800829e <__multadd+0x12>
 80082c4:	b30e      	cbz	r6, 800830a <__multadd+0x7e>
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc19      	bgt.n	8008300 <__multadd+0x74>
 80082cc:	6861      	ldr	r1, [r4, #4]
 80082ce:	4638      	mov	r0, r7
 80082d0:	3101      	adds	r1, #1
 80082d2:	f7ff ff79 	bl	80081c8 <_Balloc>
 80082d6:	4680      	mov	r8, r0
 80082d8:	b928      	cbnz	r0, 80082e6 <__multadd+0x5a>
 80082da:	4602      	mov	r2, r0
 80082dc:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <__multadd+0x84>)
 80082de:	480d      	ldr	r0, [pc, #52]	; (8008314 <__multadd+0x88>)
 80082e0:	21b5      	movs	r1, #181	; 0xb5
 80082e2:	f000 fd57 	bl	8008d94 <__assert_func>
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	3202      	adds	r2, #2
 80082ea:	f104 010c 	add.w	r1, r4, #12
 80082ee:	0092      	lsls	r2, r2, #2
 80082f0:	300c      	adds	r0, #12
 80082f2:	f7ff ff5b 	bl	80081ac <memcpy>
 80082f6:	4621      	mov	r1, r4
 80082f8:	4638      	mov	r0, r7
 80082fa:	f7ff ffa5 	bl	8008248 <_Bfree>
 80082fe:	4644      	mov	r4, r8
 8008300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008304:	3501      	adds	r5, #1
 8008306:	615e      	str	r6, [r3, #20]
 8008308:	6125      	str	r5, [r4, #16]
 800830a:	4620      	mov	r0, r4
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	08009b83 	.word	0x08009b83
 8008314:	08009b94 	.word	0x08009b94

08008318 <__hi0bits>:
 8008318:	0c03      	lsrs	r3, r0, #16
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	b9d3      	cbnz	r3, 8008354 <__hi0bits+0x3c>
 800831e:	0400      	lsls	r0, r0, #16
 8008320:	2310      	movs	r3, #16
 8008322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008326:	bf04      	itt	eq
 8008328:	0200      	lsleq	r0, r0, #8
 800832a:	3308      	addeq	r3, #8
 800832c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008330:	bf04      	itt	eq
 8008332:	0100      	lsleq	r0, r0, #4
 8008334:	3304      	addeq	r3, #4
 8008336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800833a:	bf04      	itt	eq
 800833c:	0080      	lsleq	r0, r0, #2
 800833e:	3302      	addeq	r3, #2
 8008340:	2800      	cmp	r0, #0
 8008342:	db05      	blt.n	8008350 <__hi0bits+0x38>
 8008344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008348:	f103 0301 	add.w	r3, r3, #1
 800834c:	bf08      	it	eq
 800834e:	2320      	moveq	r3, #32
 8008350:	4618      	mov	r0, r3
 8008352:	4770      	bx	lr
 8008354:	2300      	movs	r3, #0
 8008356:	e7e4      	b.n	8008322 <__hi0bits+0xa>

08008358 <__lo0bits>:
 8008358:	6803      	ldr	r3, [r0, #0]
 800835a:	f013 0207 	ands.w	r2, r3, #7
 800835e:	4601      	mov	r1, r0
 8008360:	d00b      	beq.n	800837a <__lo0bits+0x22>
 8008362:	07da      	lsls	r2, r3, #31
 8008364:	d423      	bmi.n	80083ae <__lo0bits+0x56>
 8008366:	0798      	lsls	r0, r3, #30
 8008368:	bf49      	itett	mi
 800836a:	085b      	lsrmi	r3, r3, #1
 800836c:	089b      	lsrpl	r3, r3, #2
 800836e:	2001      	movmi	r0, #1
 8008370:	600b      	strmi	r3, [r1, #0]
 8008372:	bf5c      	itt	pl
 8008374:	600b      	strpl	r3, [r1, #0]
 8008376:	2002      	movpl	r0, #2
 8008378:	4770      	bx	lr
 800837a:	b298      	uxth	r0, r3
 800837c:	b9a8      	cbnz	r0, 80083aa <__lo0bits+0x52>
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	2010      	movs	r0, #16
 8008382:	b2da      	uxtb	r2, r3
 8008384:	b90a      	cbnz	r2, 800838a <__lo0bits+0x32>
 8008386:	3008      	adds	r0, #8
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	071a      	lsls	r2, r3, #28
 800838c:	bf04      	itt	eq
 800838e:	091b      	lsreq	r3, r3, #4
 8008390:	3004      	addeq	r0, #4
 8008392:	079a      	lsls	r2, r3, #30
 8008394:	bf04      	itt	eq
 8008396:	089b      	lsreq	r3, r3, #2
 8008398:	3002      	addeq	r0, #2
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d403      	bmi.n	80083a6 <__lo0bits+0x4e>
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	f100 0001 	add.w	r0, r0, #1
 80083a4:	d005      	beq.n	80083b2 <__lo0bits+0x5a>
 80083a6:	600b      	str	r3, [r1, #0]
 80083a8:	4770      	bx	lr
 80083aa:	4610      	mov	r0, r2
 80083ac:	e7e9      	b.n	8008382 <__lo0bits+0x2a>
 80083ae:	2000      	movs	r0, #0
 80083b0:	4770      	bx	lr
 80083b2:	2020      	movs	r0, #32
 80083b4:	4770      	bx	lr
	...

080083b8 <__i2b>:
 80083b8:	b510      	push	{r4, lr}
 80083ba:	460c      	mov	r4, r1
 80083bc:	2101      	movs	r1, #1
 80083be:	f7ff ff03 	bl	80081c8 <_Balloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	b928      	cbnz	r0, 80083d2 <__i2b+0x1a>
 80083c6:	4b05      	ldr	r3, [pc, #20]	; (80083dc <__i2b+0x24>)
 80083c8:	4805      	ldr	r0, [pc, #20]	; (80083e0 <__i2b+0x28>)
 80083ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083ce:	f000 fce1 	bl	8008d94 <__assert_func>
 80083d2:	2301      	movs	r3, #1
 80083d4:	6144      	str	r4, [r0, #20]
 80083d6:	6103      	str	r3, [r0, #16]
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	bf00      	nop
 80083dc:	08009b83 	.word	0x08009b83
 80083e0:	08009b94 	.word	0x08009b94

080083e4 <__multiply>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	4691      	mov	r9, r2
 80083ea:	690a      	ldr	r2, [r1, #16]
 80083ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bfb8      	it	lt
 80083f4:	460b      	movlt	r3, r1
 80083f6:	460c      	mov	r4, r1
 80083f8:	bfbc      	itt	lt
 80083fa:	464c      	movlt	r4, r9
 80083fc:	4699      	movlt	r9, r3
 80083fe:	6927      	ldr	r7, [r4, #16]
 8008400:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008404:	68a3      	ldr	r3, [r4, #8]
 8008406:	6861      	ldr	r1, [r4, #4]
 8008408:	eb07 060a 	add.w	r6, r7, sl
 800840c:	42b3      	cmp	r3, r6
 800840e:	b085      	sub	sp, #20
 8008410:	bfb8      	it	lt
 8008412:	3101      	addlt	r1, #1
 8008414:	f7ff fed8 	bl	80081c8 <_Balloc>
 8008418:	b930      	cbnz	r0, 8008428 <__multiply+0x44>
 800841a:	4602      	mov	r2, r0
 800841c:	4b44      	ldr	r3, [pc, #272]	; (8008530 <__multiply+0x14c>)
 800841e:	4845      	ldr	r0, [pc, #276]	; (8008534 <__multiply+0x150>)
 8008420:	f240 115d 	movw	r1, #349	; 0x15d
 8008424:	f000 fcb6 	bl	8008d94 <__assert_func>
 8008428:	f100 0514 	add.w	r5, r0, #20
 800842c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008430:	462b      	mov	r3, r5
 8008432:	2200      	movs	r2, #0
 8008434:	4543      	cmp	r3, r8
 8008436:	d321      	bcc.n	800847c <__multiply+0x98>
 8008438:	f104 0314 	add.w	r3, r4, #20
 800843c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008440:	f109 0314 	add.w	r3, r9, #20
 8008444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008448:	9202      	str	r2, [sp, #8]
 800844a:	1b3a      	subs	r2, r7, r4
 800844c:	3a15      	subs	r2, #21
 800844e:	f022 0203 	bic.w	r2, r2, #3
 8008452:	3204      	adds	r2, #4
 8008454:	f104 0115 	add.w	r1, r4, #21
 8008458:	428f      	cmp	r7, r1
 800845a:	bf38      	it	cc
 800845c:	2204      	movcc	r2, #4
 800845e:	9201      	str	r2, [sp, #4]
 8008460:	9a02      	ldr	r2, [sp, #8]
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d80c      	bhi.n	8008482 <__multiply+0x9e>
 8008468:	2e00      	cmp	r6, #0
 800846a:	dd03      	ble.n	8008474 <__multiply+0x90>
 800846c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008470:	2b00      	cmp	r3, #0
 8008472:	d05a      	beq.n	800852a <__multiply+0x146>
 8008474:	6106      	str	r6, [r0, #16]
 8008476:	b005      	add	sp, #20
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	f843 2b04 	str.w	r2, [r3], #4
 8008480:	e7d8      	b.n	8008434 <__multiply+0x50>
 8008482:	f8b3 a000 	ldrh.w	sl, [r3]
 8008486:	f1ba 0f00 	cmp.w	sl, #0
 800848a:	d024      	beq.n	80084d6 <__multiply+0xf2>
 800848c:	f104 0e14 	add.w	lr, r4, #20
 8008490:	46a9      	mov	r9, r5
 8008492:	f04f 0c00 	mov.w	ip, #0
 8008496:	f85e 2b04 	ldr.w	r2, [lr], #4
 800849a:	f8d9 1000 	ldr.w	r1, [r9]
 800849e:	fa1f fb82 	uxth.w	fp, r2
 80084a2:	b289      	uxth	r1, r1
 80084a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80084a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084ac:	f8d9 2000 	ldr.w	r2, [r9]
 80084b0:	4461      	add	r1, ip
 80084b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084be:	b289      	uxth	r1, r1
 80084c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084c4:	4577      	cmp	r7, lr
 80084c6:	f849 1b04 	str.w	r1, [r9], #4
 80084ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ce:	d8e2      	bhi.n	8008496 <__multiply+0xb2>
 80084d0:	9a01      	ldr	r2, [sp, #4]
 80084d2:	f845 c002 	str.w	ip, [r5, r2]
 80084d6:	9a03      	ldr	r2, [sp, #12]
 80084d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084dc:	3304      	adds	r3, #4
 80084de:	f1b9 0f00 	cmp.w	r9, #0
 80084e2:	d020      	beq.n	8008526 <__multiply+0x142>
 80084e4:	6829      	ldr	r1, [r5, #0]
 80084e6:	f104 0c14 	add.w	ip, r4, #20
 80084ea:	46ae      	mov	lr, r5
 80084ec:	f04f 0a00 	mov.w	sl, #0
 80084f0:	f8bc b000 	ldrh.w	fp, [ip]
 80084f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084f8:	fb09 220b 	mla	r2, r9, fp, r2
 80084fc:	4492      	add	sl, r2
 80084fe:	b289      	uxth	r1, r1
 8008500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008504:	f84e 1b04 	str.w	r1, [lr], #4
 8008508:	f85c 2b04 	ldr.w	r2, [ip], #4
 800850c:	f8be 1000 	ldrh.w	r1, [lr]
 8008510:	0c12      	lsrs	r2, r2, #16
 8008512:	fb09 1102 	mla	r1, r9, r2, r1
 8008516:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800851a:	4567      	cmp	r7, ip
 800851c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008520:	d8e6      	bhi.n	80084f0 <__multiply+0x10c>
 8008522:	9a01      	ldr	r2, [sp, #4]
 8008524:	50a9      	str	r1, [r5, r2]
 8008526:	3504      	adds	r5, #4
 8008528:	e79a      	b.n	8008460 <__multiply+0x7c>
 800852a:	3e01      	subs	r6, #1
 800852c:	e79c      	b.n	8008468 <__multiply+0x84>
 800852e:	bf00      	nop
 8008530:	08009b83 	.word	0x08009b83
 8008534:	08009b94 	.word	0x08009b94

08008538 <__pow5mult>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	4615      	mov	r5, r2
 800853e:	f012 0203 	ands.w	r2, r2, #3
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	d007      	beq.n	8008558 <__pow5mult+0x20>
 8008548:	4c25      	ldr	r4, [pc, #148]	; (80085e0 <__pow5mult+0xa8>)
 800854a:	3a01      	subs	r2, #1
 800854c:	2300      	movs	r3, #0
 800854e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008552:	f7ff fe9b 	bl	800828c <__multadd>
 8008556:	4607      	mov	r7, r0
 8008558:	10ad      	asrs	r5, r5, #2
 800855a:	d03d      	beq.n	80085d8 <__pow5mult+0xa0>
 800855c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800855e:	b97c      	cbnz	r4, 8008580 <__pow5mult+0x48>
 8008560:	2010      	movs	r0, #16
 8008562:	f7ff fe1b 	bl	800819c <malloc>
 8008566:	4602      	mov	r2, r0
 8008568:	6270      	str	r0, [r6, #36]	; 0x24
 800856a:	b928      	cbnz	r0, 8008578 <__pow5mult+0x40>
 800856c:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <__pow5mult+0xac>)
 800856e:	481e      	ldr	r0, [pc, #120]	; (80085e8 <__pow5mult+0xb0>)
 8008570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008574:	f000 fc0e 	bl	8008d94 <__assert_func>
 8008578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800857c:	6004      	str	r4, [r0, #0]
 800857e:	60c4      	str	r4, [r0, #12]
 8008580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008588:	b94c      	cbnz	r4, 800859e <__pow5mult+0x66>
 800858a:	f240 2171 	movw	r1, #625	; 0x271
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ff12 	bl	80083b8 <__i2b>
 8008594:	2300      	movs	r3, #0
 8008596:	f8c8 0008 	str.w	r0, [r8, #8]
 800859a:	4604      	mov	r4, r0
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	f04f 0900 	mov.w	r9, #0
 80085a2:	07eb      	lsls	r3, r5, #31
 80085a4:	d50a      	bpl.n	80085bc <__pow5mult+0x84>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4622      	mov	r2, r4
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7ff ff1a 	bl	80083e4 <__multiply>
 80085b0:	4639      	mov	r1, r7
 80085b2:	4680      	mov	r8, r0
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff fe47 	bl	8008248 <_Bfree>
 80085ba:	4647      	mov	r7, r8
 80085bc:	106d      	asrs	r5, r5, #1
 80085be:	d00b      	beq.n	80085d8 <__pow5mult+0xa0>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	b938      	cbnz	r0, 80085d4 <__pow5mult+0x9c>
 80085c4:	4622      	mov	r2, r4
 80085c6:	4621      	mov	r1, r4
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7ff ff0b 	bl	80083e4 <__multiply>
 80085ce:	6020      	str	r0, [r4, #0]
 80085d0:	f8c0 9000 	str.w	r9, [r0]
 80085d4:	4604      	mov	r4, r0
 80085d6:	e7e4      	b.n	80085a2 <__pow5mult+0x6a>
 80085d8:	4638      	mov	r0, r7
 80085da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085de:	bf00      	nop
 80085e0:	08009ce0 	.word	0x08009ce0
 80085e4:	08009b11 	.word	0x08009b11
 80085e8:	08009b94 	.word	0x08009b94

080085ec <__lshift>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	460c      	mov	r4, r1
 80085f2:	6849      	ldr	r1, [r1, #4]
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	4607      	mov	r7, r0
 80085fe:	4691      	mov	r9, r2
 8008600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008604:	f108 0601 	add.w	r6, r8, #1
 8008608:	42b3      	cmp	r3, r6
 800860a:	db0b      	blt.n	8008624 <__lshift+0x38>
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff fddb 	bl	80081c8 <_Balloc>
 8008612:	4605      	mov	r5, r0
 8008614:	b948      	cbnz	r0, 800862a <__lshift+0x3e>
 8008616:	4602      	mov	r2, r0
 8008618:	4b2a      	ldr	r3, [pc, #168]	; (80086c4 <__lshift+0xd8>)
 800861a:	482b      	ldr	r0, [pc, #172]	; (80086c8 <__lshift+0xdc>)
 800861c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008620:	f000 fbb8 	bl	8008d94 <__assert_func>
 8008624:	3101      	adds	r1, #1
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	e7ee      	b.n	8008608 <__lshift+0x1c>
 800862a:	2300      	movs	r3, #0
 800862c:	f100 0114 	add.w	r1, r0, #20
 8008630:	f100 0210 	add.w	r2, r0, #16
 8008634:	4618      	mov	r0, r3
 8008636:	4553      	cmp	r3, sl
 8008638:	db37      	blt.n	80086aa <__lshift+0xbe>
 800863a:	6920      	ldr	r0, [r4, #16]
 800863c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008640:	f104 0314 	add.w	r3, r4, #20
 8008644:	f019 091f 	ands.w	r9, r9, #31
 8008648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800864c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008650:	d02f      	beq.n	80086b2 <__lshift+0xc6>
 8008652:	f1c9 0e20 	rsb	lr, r9, #32
 8008656:	468a      	mov	sl, r1
 8008658:	f04f 0c00 	mov.w	ip, #0
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	fa02 f209 	lsl.w	r2, r2, r9
 8008662:	ea42 020c 	orr.w	r2, r2, ip
 8008666:	f84a 2b04 	str.w	r2, [sl], #4
 800866a:	f853 2b04 	ldr.w	r2, [r3], #4
 800866e:	4298      	cmp	r0, r3
 8008670:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008674:	d8f2      	bhi.n	800865c <__lshift+0x70>
 8008676:	1b03      	subs	r3, r0, r4
 8008678:	3b15      	subs	r3, #21
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	3304      	adds	r3, #4
 8008680:	f104 0215 	add.w	r2, r4, #21
 8008684:	4290      	cmp	r0, r2
 8008686:	bf38      	it	cc
 8008688:	2304      	movcc	r3, #4
 800868a:	f841 c003 	str.w	ip, [r1, r3]
 800868e:	f1bc 0f00 	cmp.w	ip, #0
 8008692:	d001      	beq.n	8008698 <__lshift+0xac>
 8008694:	f108 0602 	add.w	r6, r8, #2
 8008698:	3e01      	subs	r6, #1
 800869a:	4638      	mov	r0, r7
 800869c:	612e      	str	r6, [r5, #16]
 800869e:	4621      	mov	r1, r4
 80086a0:	f7ff fdd2 	bl	8008248 <_Bfree>
 80086a4:	4628      	mov	r0, r5
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ae:	3301      	adds	r3, #1
 80086b0:	e7c1      	b.n	8008636 <__lshift+0x4a>
 80086b2:	3904      	subs	r1, #4
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086bc:	4298      	cmp	r0, r3
 80086be:	d8f9      	bhi.n	80086b4 <__lshift+0xc8>
 80086c0:	e7ea      	b.n	8008698 <__lshift+0xac>
 80086c2:	bf00      	nop
 80086c4:	08009b83 	.word	0x08009b83
 80086c8:	08009b94 	.word	0x08009b94

080086cc <__mcmp>:
 80086cc:	b530      	push	{r4, r5, lr}
 80086ce:	6902      	ldr	r2, [r0, #16]
 80086d0:	690c      	ldr	r4, [r1, #16]
 80086d2:	1b12      	subs	r2, r2, r4
 80086d4:	d10e      	bne.n	80086f4 <__mcmp+0x28>
 80086d6:	f100 0314 	add.w	r3, r0, #20
 80086da:	3114      	adds	r1, #20
 80086dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086ec:	42a5      	cmp	r5, r4
 80086ee:	d003      	beq.n	80086f8 <__mcmp+0x2c>
 80086f0:	d305      	bcc.n	80086fe <__mcmp+0x32>
 80086f2:	2201      	movs	r2, #1
 80086f4:	4610      	mov	r0, r2
 80086f6:	bd30      	pop	{r4, r5, pc}
 80086f8:	4283      	cmp	r3, r0
 80086fa:	d3f3      	bcc.n	80086e4 <__mcmp+0x18>
 80086fc:	e7fa      	b.n	80086f4 <__mcmp+0x28>
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	e7f7      	b.n	80086f4 <__mcmp+0x28>

08008704 <__mdiff>:
 8008704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4606      	mov	r6, r0
 800870c:	4611      	mov	r1, r2
 800870e:	4620      	mov	r0, r4
 8008710:	4690      	mov	r8, r2
 8008712:	f7ff ffdb 	bl	80086cc <__mcmp>
 8008716:	1e05      	subs	r5, r0, #0
 8008718:	d110      	bne.n	800873c <__mdiff+0x38>
 800871a:	4629      	mov	r1, r5
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff fd53 	bl	80081c8 <_Balloc>
 8008722:	b930      	cbnz	r0, 8008732 <__mdiff+0x2e>
 8008724:	4b3a      	ldr	r3, [pc, #232]	; (8008810 <__mdiff+0x10c>)
 8008726:	4602      	mov	r2, r0
 8008728:	f240 2132 	movw	r1, #562	; 0x232
 800872c:	4839      	ldr	r0, [pc, #228]	; (8008814 <__mdiff+0x110>)
 800872e:	f000 fb31 	bl	8008d94 <__assert_func>
 8008732:	2301      	movs	r3, #1
 8008734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	bfa4      	itt	ge
 800873e:	4643      	movge	r3, r8
 8008740:	46a0      	movge	r8, r4
 8008742:	4630      	mov	r0, r6
 8008744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008748:	bfa6      	itte	ge
 800874a:	461c      	movge	r4, r3
 800874c:	2500      	movge	r5, #0
 800874e:	2501      	movlt	r5, #1
 8008750:	f7ff fd3a 	bl	80081c8 <_Balloc>
 8008754:	b920      	cbnz	r0, 8008760 <__mdiff+0x5c>
 8008756:	4b2e      	ldr	r3, [pc, #184]	; (8008810 <__mdiff+0x10c>)
 8008758:	4602      	mov	r2, r0
 800875a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800875e:	e7e5      	b.n	800872c <__mdiff+0x28>
 8008760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008764:	6926      	ldr	r6, [r4, #16]
 8008766:	60c5      	str	r5, [r0, #12]
 8008768:	f104 0914 	add.w	r9, r4, #20
 800876c:	f108 0514 	add.w	r5, r8, #20
 8008770:	f100 0e14 	add.w	lr, r0, #20
 8008774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800877c:	f108 0210 	add.w	r2, r8, #16
 8008780:	46f2      	mov	sl, lr
 8008782:	2100      	movs	r1, #0
 8008784:	f859 3b04 	ldr.w	r3, [r9], #4
 8008788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800878c:	fa1f f883 	uxth.w	r8, r3
 8008790:	fa11 f18b 	uxtah	r1, r1, fp
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	eba1 0808 	sub.w	r8, r1, r8
 800879a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800879e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087a2:	fa1f f888 	uxth.w	r8, r8
 80087a6:	1419      	asrs	r1, r3, #16
 80087a8:	454e      	cmp	r6, r9
 80087aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087ae:	f84a 3b04 	str.w	r3, [sl], #4
 80087b2:	d8e7      	bhi.n	8008784 <__mdiff+0x80>
 80087b4:	1b33      	subs	r3, r6, r4
 80087b6:	3b15      	subs	r3, #21
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	3304      	adds	r3, #4
 80087be:	3415      	adds	r4, #21
 80087c0:	42a6      	cmp	r6, r4
 80087c2:	bf38      	it	cc
 80087c4:	2304      	movcc	r3, #4
 80087c6:	441d      	add	r5, r3
 80087c8:	4473      	add	r3, lr
 80087ca:	469e      	mov	lr, r3
 80087cc:	462e      	mov	r6, r5
 80087ce:	4566      	cmp	r6, ip
 80087d0:	d30e      	bcc.n	80087f0 <__mdiff+0xec>
 80087d2:	f10c 0203 	add.w	r2, ip, #3
 80087d6:	1b52      	subs	r2, r2, r5
 80087d8:	f022 0203 	bic.w	r2, r2, #3
 80087dc:	3d03      	subs	r5, #3
 80087de:	45ac      	cmp	ip, r5
 80087e0:	bf38      	it	cc
 80087e2:	2200      	movcc	r2, #0
 80087e4:	441a      	add	r2, r3
 80087e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087ea:	b17b      	cbz	r3, 800880c <__mdiff+0x108>
 80087ec:	6107      	str	r7, [r0, #16]
 80087ee:	e7a3      	b.n	8008738 <__mdiff+0x34>
 80087f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80087f4:	fa11 f288 	uxtah	r2, r1, r8
 80087f8:	1414      	asrs	r4, r2, #16
 80087fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087fe:	b292      	uxth	r2, r2
 8008800:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008804:	f84e 2b04 	str.w	r2, [lr], #4
 8008808:	1421      	asrs	r1, r4, #16
 800880a:	e7e0      	b.n	80087ce <__mdiff+0xca>
 800880c:	3f01      	subs	r7, #1
 800880e:	e7ea      	b.n	80087e6 <__mdiff+0xe2>
 8008810:	08009b83 	.word	0x08009b83
 8008814:	08009b94 	.word	0x08009b94

08008818 <__d2b>:
 8008818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4689      	mov	r9, r1
 800881e:	2101      	movs	r1, #1
 8008820:	ec57 6b10 	vmov	r6, r7, d0
 8008824:	4690      	mov	r8, r2
 8008826:	f7ff fccf 	bl	80081c8 <_Balloc>
 800882a:	4604      	mov	r4, r0
 800882c:	b930      	cbnz	r0, 800883c <__d2b+0x24>
 800882e:	4602      	mov	r2, r0
 8008830:	4b25      	ldr	r3, [pc, #148]	; (80088c8 <__d2b+0xb0>)
 8008832:	4826      	ldr	r0, [pc, #152]	; (80088cc <__d2b+0xb4>)
 8008834:	f240 310a 	movw	r1, #778	; 0x30a
 8008838:	f000 faac 	bl	8008d94 <__assert_func>
 800883c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008844:	bb35      	cbnz	r5, 8008894 <__d2b+0x7c>
 8008846:	2e00      	cmp	r6, #0
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	d028      	beq.n	800889e <__d2b+0x86>
 800884c:	4668      	mov	r0, sp
 800884e:	9600      	str	r6, [sp, #0]
 8008850:	f7ff fd82 	bl	8008358 <__lo0bits>
 8008854:	9900      	ldr	r1, [sp, #0]
 8008856:	b300      	cbz	r0, 800889a <__d2b+0x82>
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	f1c0 0320 	rsb	r3, r0, #32
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	430b      	orrs	r3, r1
 8008864:	40c2      	lsrs	r2, r0
 8008866:	6163      	str	r3, [r4, #20]
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	61a3      	str	r3, [r4, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf14      	ite	ne
 8008872:	2202      	movne	r2, #2
 8008874:	2201      	moveq	r2, #1
 8008876:	6122      	str	r2, [r4, #16]
 8008878:	b1d5      	cbz	r5, 80088b0 <__d2b+0x98>
 800887a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800887e:	4405      	add	r5, r0
 8008880:	f8c9 5000 	str.w	r5, [r9]
 8008884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008888:	f8c8 0000 	str.w	r0, [r8]
 800888c:	4620      	mov	r0, r4
 800888e:	b003      	add	sp, #12
 8008890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008898:	e7d5      	b.n	8008846 <__d2b+0x2e>
 800889a:	6161      	str	r1, [r4, #20]
 800889c:	e7e5      	b.n	800886a <__d2b+0x52>
 800889e:	a801      	add	r0, sp, #4
 80088a0:	f7ff fd5a 	bl	8008358 <__lo0bits>
 80088a4:	9b01      	ldr	r3, [sp, #4]
 80088a6:	6163      	str	r3, [r4, #20]
 80088a8:	2201      	movs	r2, #1
 80088aa:	6122      	str	r2, [r4, #16]
 80088ac:	3020      	adds	r0, #32
 80088ae:	e7e3      	b.n	8008878 <__d2b+0x60>
 80088b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088b8:	f8c9 0000 	str.w	r0, [r9]
 80088bc:	6918      	ldr	r0, [r3, #16]
 80088be:	f7ff fd2b 	bl	8008318 <__hi0bits>
 80088c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088c6:	e7df      	b.n	8008888 <__d2b+0x70>
 80088c8:	08009b83 	.word	0x08009b83
 80088cc:	08009b94 	.word	0x08009b94

080088d0 <_calloc_r>:
 80088d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088d2:	fba1 2402 	umull	r2, r4, r1, r2
 80088d6:	b94c      	cbnz	r4, 80088ec <_calloc_r+0x1c>
 80088d8:	4611      	mov	r1, r2
 80088da:	9201      	str	r2, [sp, #4]
 80088dc:	f000 f87a 	bl	80089d4 <_malloc_r>
 80088e0:	9a01      	ldr	r2, [sp, #4]
 80088e2:	4605      	mov	r5, r0
 80088e4:	b930      	cbnz	r0, 80088f4 <_calloc_r+0x24>
 80088e6:	4628      	mov	r0, r5
 80088e8:	b003      	add	sp, #12
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	220c      	movs	r2, #12
 80088ee:	6002      	str	r2, [r0, #0]
 80088f0:	2500      	movs	r5, #0
 80088f2:	e7f8      	b.n	80088e6 <_calloc_r+0x16>
 80088f4:	4621      	mov	r1, r4
 80088f6:	f7fe f941 	bl	8006b7c <memset>
 80088fa:	e7f4      	b.n	80088e6 <_calloc_r+0x16>

080088fc <_free_r>:
 80088fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088fe:	2900      	cmp	r1, #0
 8008900:	d044      	beq.n	800898c <_free_r+0x90>
 8008902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008906:	9001      	str	r0, [sp, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f1a1 0404 	sub.w	r4, r1, #4
 800890e:	bfb8      	it	lt
 8008910:	18e4      	addlt	r4, r4, r3
 8008912:	f000 fa9b 	bl	8008e4c <__malloc_lock>
 8008916:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <_free_r+0x94>)
 8008918:	9801      	ldr	r0, [sp, #4]
 800891a:	6813      	ldr	r3, [r2, #0]
 800891c:	b933      	cbnz	r3, 800892c <_free_r+0x30>
 800891e:	6063      	str	r3, [r4, #4]
 8008920:	6014      	str	r4, [r2, #0]
 8008922:	b003      	add	sp, #12
 8008924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008928:	f000 ba96 	b.w	8008e58 <__malloc_unlock>
 800892c:	42a3      	cmp	r3, r4
 800892e:	d908      	bls.n	8008942 <_free_r+0x46>
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	1961      	adds	r1, r4, r5
 8008934:	428b      	cmp	r3, r1
 8008936:	bf01      	itttt	eq
 8008938:	6819      	ldreq	r1, [r3, #0]
 800893a:	685b      	ldreq	r3, [r3, #4]
 800893c:	1949      	addeq	r1, r1, r5
 800893e:	6021      	streq	r1, [r4, #0]
 8008940:	e7ed      	b.n	800891e <_free_r+0x22>
 8008942:	461a      	mov	r2, r3
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	b10b      	cbz	r3, 800894c <_free_r+0x50>
 8008948:	42a3      	cmp	r3, r4
 800894a:	d9fa      	bls.n	8008942 <_free_r+0x46>
 800894c:	6811      	ldr	r1, [r2, #0]
 800894e:	1855      	adds	r5, r2, r1
 8008950:	42a5      	cmp	r5, r4
 8008952:	d10b      	bne.n	800896c <_free_r+0x70>
 8008954:	6824      	ldr	r4, [r4, #0]
 8008956:	4421      	add	r1, r4
 8008958:	1854      	adds	r4, r2, r1
 800895a:	42a3      	cmp	r3, r4
 800895c:	6011      	str	r1, [r2, #0]
 800895e:	d1e0      	bne.n	8008922 <_free_r+0x26>
 8008960:	681c      	ldr	r4, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	6053      	str	r3, [r2, #4]
 8008966:	4421      	add	r1, r4
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	e7da      	b.n	8008922 <_free_r+0x26>
 800896c:	d902      	bls.n	8008974 <_free_r+0x78>
 800896e:	230c      	movs	r3, #12
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	e7d6      	b.n	8008922 <_free_r+0x26>
 8008974:	6825      	ldr	r5, [r4, #0]
 8008976:	1961      	adds	r1, r4, r5
 8008978:	428b      	cmp	r3, r1
 800897a:	bf04      	itt	eq
 800897c:	6819      	ldreq	r1, [r3, #0]
 800897e:	685b      	ldreq	r3, [r3, #4]
 8008980:	6063      	str	r3, [r4, #4]
 8008982:	bf04      	itt	eq
 8008984:	1949      	addeq	r1, r1, r5
 8008986:	6021      	streq	r1, [r4, #0]
 8008988:	6054      	str	r4, [r2, #4]
 800898a:	e7ca      	b.n	8008922 <_free_r+0x26>
 800898c:	b003      	add	sp, #12
 800898e:	bd30      	pop	{r4, r5, pc}
 8008990:	200004e0 	.word	0x200004e0

08008994 <sbrk_aligned>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	4e0e      	ldr	r6, [pc, #56]	; (80089d0 <sbrk_aligned+0x3c>)
 8008998:	460c      	mov	r4, r1
 800899a:	6831      	ldr	r1, [r6, #0]
 800899c:	4605      	mov	r5, r0
 800899e:	b911      	cbnz	r1, 80089a6 <sbrk_aligned+0x12>
 80089a0:	f000 f9e8 	bl	8008d74 <_sbrk_r>
 80089a4:	6030      	str	r0, [r6, #0]
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f9e3 	bl	8008d74 <_sbrk_r>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d00a      	beq.n	80089c8 <sbrk_aligned+0x34>
 80089b2:	1cc4      	adds	r4, r0, #3
 80089b4:	f024 0403 	bic.w	r4, r4, #3
 80089b8:	42a0      	cmp	r0, r4
 80089ba:	d007      	beq.n	80089cc <sbrk_aligned+0x38>
 80089bc:	1a21      	subs	r1, r4, r0
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 f9d8 	bl	8008d74 <_sbrk_r>
 80089c4:	3001      	adds	r0, #1
 80089c6:	d101      	bne.n	80089cc <sbrk_aligned+0x38>
 80089c8:	f04f 34ff 	mov.w	r4, #4294967295
 80089cc:	4620      	mov	r0, r4
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	200004e4 	.word	0x200004e4

080089d4 <_malloc_r>:
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	1ccd      	adds	r5, r1, #3
 80089da:	f025 0503 	bic.w	r5, r5, #3
 80089de:	3508      	adds	r5, #8
 80089e0:	2d0c      	cmp	r5, #12
 80089e2:	bf38      	it	cc
 80089e4:	250c      	movcc	r5, #12
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	4607      	mov	r7, r0
 80089ea:	db01      	blt.n	80089f0 <_malloc_r+0x1c>
 80089ec:	42a9      	cmp	r1, r5
 80089ee:	d905      	bls.n	80089fc <_malloc_r+0x28>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	2600      	movs	r6, #0
 80089f6:	4630      	mov	r0, r6
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fc:	4e2e      	ldr	r6, [pc, #184]	; (8008ab8 <_malloc_r+0xe4>)
 80089fe:	f000 fa25 	bl	8008e4c <__malloc_lock>
 8008a02:	6833      	ldr	r3, [r6, #0]
 8008a04:	461c      	mov	r4, r3
 8008a06:	bb34      	cbnz	r4, 8008a56 <_malloc_r+0x82>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f7ff ffc2 	bl	8008994 <sbrk_aligned>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	4604      	mov	r4, r0
 8008a14:	d14d      	bne.n	8008ab2 <_malloc_r+0xde>
 8008a16:	6834      	ldr	r4, [r6, #0]
 8008a18:	4626      	mov	r6, r4
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d140      	bne.n	8008aa0 <_malloc_r+0xcc>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	4631      	mov	r1, r6
 8008a22:	4638      	mov	r0, r7
 8008a24:	eb04 0803 	add.w	r8, r4, r3
 8008a28:	f000 f9a4 	bl	8008d74 <_sbrk_r>
 8008a2c:	4580      	cmp	r8, r0
 8008a2e:	d13a      	bne.n	8008aa6 <_malloc_r+0xd2>
 8008a30:	6821      	ldr	r1, [r4, #0]
 8008a32:	3503      	adds	r5, #3
 8008a34:	1a6d      	subs	r5, r5, r1
 8008a36:	f025 0503 	bic.w	r5, r5, #3
 8008a3a:	3508      	adds	r5, #8
 8008a3c:	2d0c      	cmp	r5, #12
 8008a3e:	bf38      	it	cc
 8008a40:	250c      	movcc	r5, #12
 8008a42:	4629      	mov	r1, r5
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff ffa5 	bl	8008994 <sbrk_aligned>
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d02b      	beq.n	8008aa6 <_malloc_r+0xd2>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	442b      	add	r3, r5
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	e00e      	b.n	8008a74 <_malloc_r+0xa0>
 8008a56:	6822      	ldr	r2, [r4, #0]
 8008a58:	1b52      	subs	r2, r2, r5
 8008a5a:	d41e      	bmi.n	8008a9a <_malloc_r+0xc6>
 8008a5c:	2a0b      	cmp	r2, #11
 8008a5e:	d916      	bls.n	8008a8e <_malloc_r+0xba>
 8008a60:	1961      	adds	r1, r4, r5
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	6025      	str	r5, [r4, #0]
 8008a66:	bf18      	it	ne
 8008a68:	6059      	strne	r1, [r3, #4]
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	bf08      	it	eq
 8008a6e:	6031      	streq	r1, [r6, #0]
 8008a70:	5162      	str	r2, [r4, r5]
 8008a72:	604b      	str	r3, [r1, #4]
 8008a74:	4638      	mov	r0, r7
 8008a76:	f104 060b 	add.w	r6, r4, #11
 8008a7a:	f000 f9ed 	bl	8008e58 <__malloc_unlock>
 8008a7e:	f026 0607 	bic.w	r6, r6, #7
 8008a82:	1d23      	adds	r3, r4, #4
 8008a84:	1af2      	subs	r2, r6, r3
 8008a86:	d0b6      	beq.n	80089f6 <_malloc_r+0x22>
 8008a88:	1b9b      	subs	r3, r3, r6
 8008a8a:	50a3      	str	r3, [r4, r2]
 8008a8c:	e7b3      	b.n	80089f6 <_malloc_r+0x22>
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	bf0c      	ite	eq
 8008a94:	6032      	streq	r2, [r6, #0]
 8008a96:	605a      	strne	r2, [r3, #4]
 8008a98:	e7ec      	b.n	8008a74 <_malloc_r+0xa0>
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	6864      	ldr	r4, [r4, #4]
 8008a9e:	e7b2      	b.n	8008a06 <_malloc_r+0x32>
 8008aa0:	4634      	mov	r4, r6
 8008aa2:	6876      	ldr	r6, [r6, #4]
 8008aa4:	e7b9      	b.n	8008a1a <_malloc_r+0x46>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f000 f9d4 	bl	8008e58 <__malloc_unlock>
 8008ab0:	e7a1      	b.n	80089f6 <_malloc_r+0x22>
 8008ab2:	6025      	str	r5, [r4, #0]
 8008ab4:	e7de      	b.n	8008a74 <_malloc_r+0xa0>
 8008ab6:	bf00      	nop
 8008ab8:	200004e0 	.word	0x200004e0

08008abc <__ssputs_r>:
 8008abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	688e      	ldr	r6, [r1, #8]
 8008ac2:	429e      	cmp	r6, r3
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4690      	mov	r8, r2
 8008aca:	461f      	mov	r7, r3
 8008acc:	d838      	bhi.n	8008b40 <__ssputs_r+0x84>
 8008ace:	898a      	ldrh	r2, [r1, #12]
 8008ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ad4:	d032      	beq.n	8008b3c <__ssputs_r+0x80>
 8008ad6:	6825      	ldr	r5, [r4, #0]
 8008ad8:	6909      	ldr	r1, [r1, #16]
 8008ada:	eba5 0901 	sub.w	r9, r5, r1
 8008ade:	6965      	ldr	r5, [r4, #20]
 8008ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ae8:	3301      	adds	r3, #1
 8008aea:	444b      	add	r3, r9
 8008aec:	106d      	asrs	r5, r5, #1
 8008aee:	429d      	cmp	r5, r3
 8008af0:	bf38      	it	cc
 8008af2:	461d      	movcc	r5, r3
 8008af4:	0553      	lsls	r3, r2, #21
 8008af6:	d531      	bpl.n	8008b5c <__ssputs_r+0xa0>
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7ff ff6b 	bl	80089d4 <_malloc_r>
 8008afe:	4606      	mov	r6, r0
 8008b00:	b950      	cbnz	r0, 8008b18 <__ssputs_r+0x5c>
 8008b02:	230c      	movs	r3, #12
 8008b04:	f8ca 3000 	str.w	r3, [sl]
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b18:	6921      	ldr	r1, [r4, #16]
 8008b1a:	464a      	mov	r2, r9
 8008b1c:	f7ff fb46 	bl	80081ac <memcpy>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	6126      	str	r6, [r4, #16]
 8008b2e:	6165      	str	r5, [r4, #20]
 8008b30:	444e      	add	r6, r9
 8008b32:	eba5 0509 	sub.w	r5, r5, r9
 8008b36:	6026      	str	r6, [r4, #0]
 8008b38:	60a5      	str	r5, [r4, #8]
 8008b3a:	463e      	mov	r6, r7
 8008b3c:	42be      	cmp	r6, r7
 8008b3e:	d900      	bls.n	8008b42 <__ssputs_r+0x86>
 8008b40:	463e      	mov	r6, r7
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	4632      	mov	r2, r6
 8008b46:	4641      	mov	r1, r8
 8008b48:	f000 f966 	bl	8008e18 <memmove>
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	1b9b      	subs	r3, r3, r6
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	4433      	add	r3, r6
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e7db      	b.n	8008b14 <__ssputs_r+0x58>
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	f000 f981 	bl	8008e64 <_realloc_r>
 8008b62:	4606      	mov	r6, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1e1      	bne.n	8008b2c <__ssputs_r+0x70>
 8008b68:	6921      	ldr	r1, [r4, #16]
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f7ff fec6 	bl	80088fc <_free_r>
 8008b70:	e7c7      	b.n	8008b02 <__ssputs_r+0x46>
	...

08008b74 <_svfiprintf_r>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4698      	mov	r8, r3
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	b09d      	sub	sp, #116	; 0x74
 8008b80:	4607      	mov	r7, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	d50e      	bpl.n	8008ba6 <_svfiprintf_r+0x32>
 8008b88:	690b      	ldr	r3, [r1, #16]
 8008b8a:	b963      	cbnz	r3, 8008ba6 <_svfiprintf_r+0x32>
 8008b8c:	2140      	movs	r1, #64	; 0x40
 8008b8e:	f7ff ff21 	bl	80089d4 <_malloc_r>
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	6128      	str	r0, [r5, #16]
 8008b96:	b920      	cbnz	r0, 8008ba2 <_svfiprintf_r+0x2e>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e0d1      	b.n	8008d46 <_svfiprintf_r+0x1d2>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	616b      	str	r3, [r5, #20]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	2320      	movs	r3, #32
 8008bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d60 <_svfiprintf_r+0x1ec>
 8008bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bbe:	f04f 0901 	mov.w	r9, #1
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bca:	b10a      	cbz	r2, 8008bd0 <_svfiprintf_r+0x5c>
 8008bcc:	2a25      	cmp	r2, #37	; 0x25
 8008bce:	d1f9      	bne.n	8008bc4 <_svfiprintf_r+0x50>
 8008bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd4:	d00b      	beq.n	8008bee <_svfiprintf_r+0x7a>
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff ff6d 	bl	8008abc <__ssputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80aa 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bea:	445a      	add	r2, fp
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80a2 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	f10a 0a01 	add.w	sl, sl, #1
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c10:	4654      	mov	r4, sl
 8008c12:	2205      	movs	r2, #5
 8008c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c18:	4851      	ldr	r0, [pc, #324]	; (8008d60 <_svfiprintf_r+0x1ec>)
 8008c1a:	f7f7 fae1 	bl	80001e0 <memchr>
 8008c1e:	9a04      	ldr	r2, [sp, #16]
 8008c20:	b9d8      	cbnz	r0, 8008c5a <_svfiprintf_r+0xe6>
 8008c22:	06d0      	lsls	r0, r2, #27
 8008c24:	bf44      	itt	mi
 8008c26:	2320      	movmi	r3, #32
 8008c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c2c:	0711      	lsls	r1, r2, #28
 8008c2e:	bf44      	itt	mi
 8008c30:	232b      	movmi	r3, #43	; 0x2b
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3c:	d015      	beq.n	8008c6a <_svfiprintf_r+0xf6>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4e:	3b30      	subs	r3, #48	; 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d94e      	bls.n	8008cf2 <_svfiprintf_r+0x17e>
 8008c54:	b1b0      	cbz	r0, 8008c84 <_svfiprintf_r+0x110>
 8008c56:	9207      	str	r2, [sp, #28]
 8008c58:	e014      	b.n	8008c84 <_svfiprintf_r+0x110>
 8008c5a:	eba0 0308 	sub.w	r3, r0, r8
 8008c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	46a2      	mov	sl, r4
 8008c68:	e7d2      	b.n	8008c10 <_svfiprintf_r+0x9c>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9103      	str	r1, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	425b      	neglt	r3, r3
 8008c78:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7c:	9307      	strge	r3, [sp, #28]
 8008c7e:	9307      	strlt	r3, [sp, #28]
 8008c80:	bfb8      	it	lt
 8008c82:	9204      	strlt	r2, [sp, #16]
 8008c84:	7823      	ldrb	r3, [r4, #0]
 8008c86:	2b2e      	cmp	r3, #46	; 0x2e
 8008c88:	d10c      	bne.n	8008ca4 <_svfiprintf_r+0x130>
 8008c8a:	7863      	ldrb	r3, [r4, #1]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d135      	bne.n	8008cfc <_svfiprintf_r+0x188>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb8      	it	lt
 8008c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca0:	3402      	adds	r4, #2
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d70 <_svfiprintf_r+0x1fc>
 8008ca8:	7821      	ldrb	r1, [r4, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7f7 fa97 	bl	80001e0 <memchr>
 8008cb2:	b140      	cbz	r0, 8008cc6 <_svfiprintf_r+0x152>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	fa03 f000 	lsl.w	r0, r3, r0
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	4303      	orrs	r3, r0
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4826      	ldr	r0, [pc, #152]	; (8008d64 <_svfiprintf_r+0x1f0>)
 8008ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	f7f7 fa85 	bl	80001e0 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d038      	beq.n	8008d4c <_svfiprintf_r+0x1d8>
 8008cda:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <_svfiprintf_r+0x1f4>)
 8008cdc:	bb1b      	cbnz	r3, 8008d26 <_svfiprintf_r+0x1b2>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	4433      	add	r3, r6
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	e767      	b.n	8008bc2 <_svfiprintf_r+0x4e>
 8008cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	e7a5      	b.n	8008c48 <_svfiprintf_r+0xd4>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	4619      	mov	r1, r3
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0e:	3a30      	subs	r2, #48	; 0x30
 8008d10:	2a09      	cmp	r2, #9
 8008d12:	d903      	bls.n	8008d1c <_svfiprintf_r+0x1a8>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c5      	beq.n	8008ca4 <_svfiprintf_r+0x130>
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	e7c3      	b.n	8008ca4 <_svfiprintf_r+0x130>
 8008d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d20:	4604      	mov	r4, r0
 8008d22:	2301      	movs	r3, #1
 8008d24:	e7f0      	b.n	8008d08 <_svfiprintf_r+0x194>
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d2e:	a904      	add	r1, sp, #16
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7fd ffcb 	bl	8006ccc <_printf_float>
 8008d36:	1c42      	adds	r2, r0, #1
 8008d38:	4606      	mov	r6, r0
 8008d3a:	d1d6      	bne.n	8008cea <_svfiprintf_r+0x176>
 8008d3c:	89ab      	ldrh	r3, [r5, #12]
 8008d3e:	065b      	lsls	r3, r3, #25
 8008d40:	f53f af2c 	bmi.w	8008b9c <_svfiprintf_r+0x28>
 8008d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d46:	b01d      	add	sp, #116	; 0x74
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7fe fa5c 	bl	8007214 <_printf_i>
 8008d5c:	e7eb      	b.n	8008d36 <_svfiprintf_r+0x1c2>
 8008d5e:	bf00      	nop
 8008d60:	08009cec 	.word	0x08009cec
 8008d64:	08009cf6 	.word	0x08009cf6
 8008d68:	08006ccd 	.word	0x08006ccd
 8008d6c:	08008abd 	.word	0x08008abd
 8008d70:	08009cf2 	.word	0x08009cf2

08008d74 <_sbrk_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d06      	ldr	r5, [pc, #24]	; (8008d90 <_sbrk_r+0x1c>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	f7f8 feee 	bl	8001b60 <_sbrk>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_sbrk_r+0x1a>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_sbrk_r+0x1a>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	200004e8 	.word	0x200004e8

08008d94 <__assert_func>:
 8008d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d96:	4614      	mov	r4, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <__assert_func+0x2c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	68d8      	ldr	r0, [r3, #12]
 8008da2:	b14c      	cbz	r4, 8008db8 <__assert_func+0x24>
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <__assert_func+0x30>)
 8008da6:	9100      	str	r1, [sp, #0]
 8008da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dac:	4906      	ldr	r1, [pc, #24]	; (8008dc8 <__assert_func+0x34>)
 8008dae:	462b      	mov	r3, r5
 8008db0:	f000 f80e 	bl	8008dd0 <fiprintf>
 8008db4:	f000 faac 	bl	8009310 <abort>
 8008db8:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <__assert_func+0x38>)
 8008dba:	461c      	mov	r4, r3
 8008dbc:	e7f3      	b.n	8008da6 <__assert_func+0x12>
 8008dbe:	bf00      	nop
 8008dc0:	20000014 	.word	0x20000014
 8008dc4:	08009cfd 	.word	0x08009cfd
 8008dc8:	08009d0a 	.word	0x08009d0a
 8008dcc:	08009d38 	.word	0x08009d38

08008dd0 <fiprintf>:
 8008dd0:	b40e      	push	{r1, r2, r3}
 8008dd2:	b503      	push	{r0, r1, lr}
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	ab03      	add	r3, sp, #12
 8008dd8:	4805      	ldr	r0, [pc, #20]	; (8008df0 <fiprintf+0x20>)
 8008dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dde:	6800      	ldr	r0, [r0, #0]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	f000 f897 	bl	8008f14 <_vfiprintf_r>
 8008de6:	b002      	add	sp, #8
 8008de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dec:	b003      	add	sp, #12
 8008dee:	4770      	bx	lr
 8008df0:	20000014 	.word	0x20000014

08008df4 <__ascii_mbtowc>:
 8008df4:	b082      	sub	sp, #8
 8008df6:	b901      	cbnz	r1, 8008dfa <__ascii_mbtowc+0x6>
 8008df8:	a901      	add	r1, sp, #4
 8008dfa:	b142      	cbz	r2, 8008e0e <__ascii_mbtowc+0x1a>
 8008dfc:	b14b      	cbz	r3, 8008e12 <__ascii_mbtowc+0x1e>
 8008dfe:	7813      	ldrb	r3, [r2, #0]
 8008e00:	600b      	str	r3, [r1, #0]
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	1e10      	subs	r0, r2, #0
 8008e06:	bf18      	it	ne
 8008e08:	2001      	movne	r0, #1
 8008e0a:	b002      	add	sp, #8
 8008e0c:	4770      	bx	lr
 8008e0e:	4610      	mov	r0, r2
 8008e10:	e7fb      	b.n	8008e0a <__ascii_mbtowc+0x16>
 8008e12:	f06f 0001 	mvn.w	r0, #1
 8008e16:	e7f8      	b.n	8008e0a <__ascii_mbtowc+0x16>

08008e18 <memmove>:
 8008e18:	4288      	cmp	r0, r1
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	eb01 0402 	add.w	r4, r1, r2
 8008e20:	d902      	bls.n	8008e28 <memmove+0x10>
 8008e22:	4284      	cmp	r4, r0
 8008e24:	4623      	mov	r3, r4
 8008e26:	d807      	bhi.n	8008e38 <memmove+0x20>
 8008e28:	1e43      	subs	r3, r0, #1
 8008e2a:	42a1      	cmp	r1, r4
 8008e2c:	d008      	beq.n	8008e40 <memmove+0x28>
 8008e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e36:	e7f8      	b.n	8008e2a <memmove+0x12>
 8008e38:	4402      	add	r2, r0
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	428a      	cmp	r2, r1
 8008e3e:	d100      	bne.n	8008e42 <memmove+0x2a>
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e4a:	e7f7      	b.n	8008e3c <memmove+0x24>

08008e4c <__malloc_lock>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__malloc_lock+0x8>)
 8008e4e:	f000 bc1f 	b.w	8009690 <__retarget_lock_acquire_recursive>
 8008e52:	bf00      	nop
 8008e54:	200004ec 	.word	0x200004ec

08008e58 <__malloc_unlock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_unlock+0x8>)
 8008e5a:	f000 bc1a 	b.w	8009692 <__retarget_lock_release_recursive>
 8008e5e:	bf00      	nop
 8008e60:	200004ec 	.word	0x200004ec

08008e64 <_realloc_r>:
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	4680      	mov	r8, r0
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	b921      	cbnz	r1, 8008e7a <_realloc_r+0x16>
 8008e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4611      	mov	r1, r2
 8008e76:	f7ff bdad 	b.w	80089d4 <_malloc_r>
 8008e7a:	b92a      	cbnz	r2, 8008e88 <_realloc_r+0x24>
 8008e7c:	f7ff fd3e 	bl	80088fc <_free_r>
 8008e80:	4625      	mov	r5, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e88:	f000 fc6a 	bl	8009760 <_malloc_usable_size_r>
 8008e8c:	4284      	cmp	r4, r0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	d802      	bhi.n	8008e98 <_realloc_r+0x34>
 8008e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e96:	d812      	bhi.n	8008ebe <_realloc_r+0x5a>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f7ff fd9a 	bl	80089d4 <_malloc_r>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0ed      	beq.n	8008e82 <_realloc_r+0x1e>
 8008ea6:	42bc      	cmp	r4, r7
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4631      	mov	r1, r6
 8008eac:	bf28      	it	cs
 8008eae:	463a      	movcs	r2, r7
 8008eb0:	f7ff f97c 	bl	80081ac <memcpy>
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f7ff fd20 	bl	80088fc <_free_r>
 8008ebc:	e7e1      	b.n	8008e82 <_realloc_r+0x1e>
 8008ebe:	4635      	mov	r5, r6
 8008ec0:	e7df      	b.n	8008e82 <_realloc_r+0x1e>

08008ec2 <__sfputc_r>:
 8008ec2:	6893      	ldr	r3, [r2, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	b410      	push	{r4}
 8008eca:	6093      	str	r3, [r2, #8]
 8008ecc:	da08      	bge.n	8008ee0 <__sfputc_r+0x1e>
 8008ece:	6994      	ldr	r4, [r2, #24]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	db01      	blt.n	8008ed8 <__sfputc_r+0x16>
 8008ed4:	290a      	cmp	r1, #10
 8008ed6:	d103      	bne.n	8008ee0 <__sfputc_r+0x1e>
 8008ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008edc:	f000 b94a 	b.w	8009174 <__swbuf_r>
 8008ee0:	6813      	ldr	r3, [r2, #0]
 8008ee2:	1c58      	adds	r0, r3, #1
 8008ee4:	6010      	str	r0, [r2, #0]
 8008ee6:	7019      	strb	r1, [r3, #0]
 8008ee8:	4608      	mov	r0, r1
 8008eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <__sfputs_r>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	4614      	mov	r4, r2
 8008ef8:	18d5      	adds	r5, r2, r3
 8008efa:	42ac      	cmp	r4, r5
 8008efc:	d101      	bne.n	8008f02 <__sfputs_r+0x12>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e007      	b.n	8008f12 <__sfputs_r+0x22>
 8008f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f06:	463a      	mov	r2, r7
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7ff ffda 	bl	8008ec2 <__sfputc_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d1f3      	bne.n	8008efa <__sfputs_r+0xa>
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f14 <_vfiprintf_r>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	460d      	mov	r5, r1
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	4698      	mov	r8, r3
 8008f20:	4606      	mov	r6, r0
 8008f22:	b118      	cbz	r0, 8008f2c <_vfiprintf_r+0x18>
 8008f24:	6983      	ldr	r3, [r0, #24]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_vfiprintf_r+0x18>
 8008f28:	f000 fb14 	bl	8009554 <__sinit>
 8008f2c:	4b89      	ldr	r3, [pc, #548]	; (8009154 <_vfiprintf_r+0x240>)
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	d11b      	bne.n	8008f6a <_vfiprintf_r+0x56>
 8008f32:	6875      	ldr	r5, [r6, #4]
 8008f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f36:	07d9      	lsls	r1, r3, #31
 8008f38:	d405      	bmi.n	8008f46 <_vfiprintf_r+0x32>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_vfiprintf_r+0x32>
 8008f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f42:	f000 fba5 	bl	8009690 <__retarget_lock_acquire_recursive>
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	071b      	lsls	r3, r3, #28
 8008f4a:	d501      	bpl.n	8008f50 <_vfiprintf_r+0x3c>
 8008f4c:	692b      	ldr	r3, [r5, #16]
 8008f4e:	b9eb      	cbnz	r3, 8008f8c <_vfiprintf_r+0x78>
 8008f50:	4629      	mov	r1, r5
 8008f52:	4630      	mov	r0, r6
 8008f54:	f000 f96e 	bl	8009234 <__swsetup_r>
 8008f58:	b1c0      	cbz	r0, 8008f8c <_vfiprintf_r+0x78>
 8008f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f5c:	07dc      	lsls	r4, r3, #31
 8008f5e:	d50e      	bpl.n	8008f7e <_vfiprintf_r+0x6a>
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	b01d      	add	sp, #116	; 0x74
 8008f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6a:	4b7b      	ldr	r3, [pc, #492]	; (8009158 <_vfiprintf_r+0x244>)
 8008f6c:	429d      	cmp	r5, r3
 8008f6e:	d101      	bne.n	8008f74 <_vfiprintf_r+0x60>
 8008f70:	68b5      	ldr	r5, [r6, #8]
 8008f72:	e7df      	b.n	8008f34 <_vfiprintf_r+0x20>
 8008f74:	4b79      	ldr	r3, [pc, #484]	; (800915c <_vfiprintf_r+0x248>)
 8008f76:	429d      	cmp	r5, r3
 8008f78:	bf08      	it	eq
 8008f7a:	68f5      	ldreq	r5, [r6, #12]
 8008f7c:	e7da      	b.n	8008f34 <_vfiprintf_r+0x20>
 8008f7e:	89ab      	ldrh	r3, [r5, #12]
 8008f80:	0598      	lsls	r0, r3, #22
 8008f82:	d4ed      	bmi.n	8008f60 <_vfiprintf_r+0x4c>
 8008f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f86:	f000 fb84 	bl	8009692 <__retarget_lock_release_recursive>
 8008f8a:	e7e9      	b.n	8008f60 <_vfiprintf_r+0x4c>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f90:	2320      	movs	r3, #32
 8008f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9a:	2330      	movs	r3, #48	; 0x30
 8008f9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009160 <_vfiprintf_r+0x24c>
 8008fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa4:	f04f 0901 	mov.w	r9, #1
 8008fa8:	4623      	mov	r3, r4
 8008faa:	469a      	mov	sl, r3
 8008fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb0:	b10a      	cbz	r2, 8008fb6 <_vfiprintf_r+0xa2>
 8008fb2:	2a25      	cmp	r2, #37	; 0x25
 8008fb4:	d1f9      	bne.n	8008faa <_vfiprintf_r+0x96>
 8008fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008fba:	d00b      	beq.n	8008fd4 <_vfiprintf_r+0xc0>
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7ff ff94 	bl	8008ef0 <__sfputs_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f000 80aa 	beq.w	8009122 <_vfiprintf_r+0x20e>
 8008fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd0:	445a      	add	r2, fp
 8008fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 80a2 	beq.w	8009122 <_vfiprintf_r+0x20e>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe8:	f10a 0a01 	add.w	sl, sl, #1
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff6:	4654      	mov	r4, sl
 8008ff8:	2205      	movs	r2, #5
 8008ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffe:	4858      	ldr	r0, [pc, #352]	; (8009160 <_vfiprintf_r+0x24c>)
 8009000:	f7f7 f8ee 	bl	80001e0 <memchr>
 8009004:	9a04      	ldr	r2, [sp, #16]
 8009006:	b9d8      	cbnz	r0, 8009040 <_vfiprintf_r+0x12c>
 8009008:	06d1      	lsls	r1, r2, #27
 800900a:	bf44      	itt	mi
 800900c:	2320      	movmi	r3, #32
 800900e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009012:	0713      	lsls	r3, r2, #28
 8009014:	bf44      	itt	mi
 8009016:	232b      	movmi	r3, #43	; 0x2b
 8009018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b2a      	cmp	r3, #42	; 0x2a
 8009022:	d015      	beq.n	8009050 <_vfiprintf_r+0x13c>
 8009024:	9a07      	ldr	r2, [sp, #28]
 8009026:	4654      	mov	r4, sl
 8009028:	2000      	movs	r0, #0
 800902a:	f04f 0c0a 	mov.w	ip, #10
 800902e:	4621      	mov	r1, r4
 8009030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009034:	3b30      	subs	r3, #48	; 0x30
 8009036:	2b09      	cmp	r3, #9
 8009038:	d94e      	bls.n	80090d8 <_vfiprintf_r+0x1c4>
 800903a:	b1b0      	cbz	r0, 800906a <_vfiprintf_r+0x156>
 800903c:	9207      	str	r2, [sp, #28]
 800903e:	e014      	b.n	800906a <_vfiprintf_r+0x156>
 8009040:	eba0 0308 	sub.w	r3, r0, r8
 8009044:	fa09 f303 	lsl.w	r3, r9, r3
 8009048:	4313      	orrs	r3, r2
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	46a2      	mov	sl, r4
 800904e:	e7d2      	b.n	8008ff6 <_vfiprintf_r+0xe2>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	1d19      	adds	r1, r3, #4
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	9103      	str	r1, [sp, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	bfbb      	ittet	lt
 800905c:	425b      	neglt	r3, r3
 800905e:	f042 0202 	orrlt.w	r2, r2, #2
 8009062:	9307      	strge	r3, [sp, #28]
 8009064:	9307      	strlt	r3, [sp, #28]
 8009066:	bfb8      	it	lt
 8009068:	9204      	strlt	r2, [sp, #16]
 800906a:	7823      	ldrb	r3, [r4, #0]
 800906c:	2b2e      	cmp	r3, #46	; 0x2e
 800906e:	d10c      	bne.n	800908a <_vfiprintf_r+0x176>
 8009070:	7863      	ldrb	r3, [r4, #1]
 8009072:	2b2a      	cmp	r3, #42	; 0x2a
 8009074:	d135      	bne.n	80090e2 <_vfiprintf_r+0x1ce>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	9203      	str	r2, [sp, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	bfb8      	it	lt
 8009082:	f04f 33ff 	movlt.w	r3, #4294967295
 8009086:	3402      	adds	r4, #2
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009170 <_vfiprintf_r+0x25c>
 800908e:	7821      	ldrb	r1, [r4, #0]
 8009090:	2203      	movs	r2, #3
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 f8a4 	bl	80001e0 <memchr>
 8009098:	b140      	cbz	r0, 80090ac <_vfiprintf_r+0x198>
 800909a:	2340      	movs	r3, #64	; 0x40
 800909c:	eba0 000a 	sub.w	r0, r0, sl
 80090a0:	fa03 f000 	lsl.w	r0, r3, r0
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	4303      	orrs	r3, r0
 80090a8:	3401      	adds	r4, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	482c      	ldr	r0, [pc, #176]	; (8009164 <_vfiprintf_r+0x250>)
 80090b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b6:	2206      	movs	r2, #6
 80090b8:	f7f7 f892 	bl	80001e0 <memchr>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d03f      	beq.n	8009140 <_vfiprintf_r+0x22c>
 80090c0:	4b29      	ldr	r3, [pc, #164]	; (8009168 <_vfiprintf_r+0x254>)
 80090c2:	bb1b      	cbnz	r3, 800910c <_vfiprintf_r+0x1f8>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	3307      	adds	r3, #7
 80090c8:	f023 0307 	bic.w	r3, r3, #7
 80090cc:	3308      	adds	r3, #8
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	443b      	add	r3, r7
 80090d4:	9309      	str	r3, [sp, #36]	; 0x24
 80090d6:	e767      	b.n	8008fa8 <_vfiprintf_r+0x94>
 80090d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090dc:	460c      	mov	r4, r1
 80090de:	2001      	movs	r0, #1
 80090e0:	e7a5      	b.n	800902e <_vfiprintf_r+0x11a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	3401      	adds	r4, #1
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	4619      	mov	r1, r3
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	4620      	mov	r0, r4
 80090f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f4:	3a30      	subs	r2, #48	; 0x30
 80090f6:	2a09      	cmp	r2, #9
 80090f8:	d903      	bls.n	8009102 <_vfiprintf_r+0x1ee>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c5      	beq.n	800908a <_vfiprintf_r+0x176>
 80090fe:	9105      	str	r1, [sp, #20]
 8009100:	e7c3      	b.n	800908a <_vfiprintf_r+0x176>
 8009102:	fb0c 2101 	mla	r1, ip, r1, r2
 8009106:	4604      	mov	r4, r0
 8009108:	2301      	movs	r3, #1
 800910a:	e7f0      	b.n	80090ee <_vfiprintf_r+0x1da>
 800910c:	ab03      	add	r3, sp, #12
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	462a      	mov	r2, r5
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <_vfiprintf_r+0x258>)
 8009114:	a904      	add	r1, sp, #16
 8009116:	4630      	mov	r0, r6
 8009118:	f7fd fdd8 	bl	8006ccc <_printf_float>
 800911c:	4607      	mov	r7, r0
 800911e:	1c78      	adds	r0, r7, #1
 8009120:	d1d6      	bne.n	80090d0 <_vfiprintf_r+0x1bc>
 8009122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009124:	07d9      	lsls	r1, r3, #31
 8009126:	d405      	bmi.n	8009134 <_vfiprintf_r+0x220>
 8009128:	89ab      	ldrh	r3, [r5, #12]
 800912a:	059a      	lsls	r2, r3, #22
 800912c:	d402      	bmi.n	8009134 <_vfiprintf_r+0x220>
 800912e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009130:	f000 faaf 	bl	8009692 <__retarget_lock_release_recursive>
 8009134:	89ab      	ldrh	r3, [r5, #12]
 8009136:	065b      	lsls	r3, r3, #25
 8009138:	f53f af12 	bmi.w	8008f60 <_vfiprintf_r+0x4c>
 800913c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913e:	e711      	b.n	8008f64 <_vfiprintf_r+0x50>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	462a      	mov	r2, r5
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <_vfiprintf_r+0x258>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4630      	mov	r0, r6
 800914c:	f7fe f862 	bl	8007214 <_printf_i>
 8009150:	e7e4      	b.n	800911c <_vfiprintf_r+0x208>
 8009152:	bf00      	nop
 8009154:	08009e64 	.word	0x08009e64
 8009158:	08009e84 	.word	0x08009e84
 800915c:	08009e44 	.word	0x08009e44
 8009160:	08009cec 	.word	0x08009cec
 8009164:	08009cf6 	.word	0x08009cf6
 8009168:	08006ccd 	.word	0x08006ccd
 800916c:	08008ef1 	.word	0x08008ef1
 8009170:	08009cf2 	.word	0x08009cf2

08009174 <__swbuf_r>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	460e      	mov	r6, r1
 8009178:	4614      	mov	r4, r2
 800917a:	4605      	mov	r5, r0
 800917c:	b118      	cbz	r0, 8009186 <__swbuf_r+0x12>
 800917e:	6983      	ldr	r3, [r0, #24]
 8009180:	b90b      	cbnz	r3, 8009186 <__swbuf_r+0x12>
 8009182:	f000 f9e7 	bl	8009554 <__sinit>
 8009186:	4b21      	ldr	r3, [pc, #132]	; (800920c <__swbuf_r+0x98>)
 8009188:	429c      	cmp	r4, r3
 800918a:	d12b      	bne.n	80091e4 <__swbuf_r+0x70>
 800918c:	686c      	ldr	r4, [r5, #4]
 800918e:	69a3      	ldr	r3, [r4, #24]
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	071a      	lsls	r2, r3, #28
 8009196:	d52f      	bpl.n	80091f8 <__swbuf_r+0x84>
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	b36b      	cbz	r3, 80091f8 <__swbuf_r+0x84>
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	1ac0      	subs	r0, r0, r3
 80091a2:	6963      	ldr	r3, [r4, #20]
 80091a4:	b2f6      	uxtb	r6, r6
 80091a6:	4283      	cmp	r3, r0
 80091a8:	4637      	mov	r7, r6
 80091aa:	dc04      	bgt.n	80091b6 <__swbuf_r+0x42>
 80091ac:	4621      	mov	r1, r4
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 f93c 	bl	800942c <_fflush_r>
 80091b4:	bb30      	cbnz	r0, 8009204 <__swbuf_r+0x90>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	701e      	strb	r6, [r3, #0]
 80091c4:	6963      	ldr	r3, [r4, #20]
 80091c6:	3001      	adds	r0, #1
 80091c8:	4283      	cmp	r3, r0
 80091ca:	d004      	beq.n	80091d6 <__swbuf_r+0x62>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d506      	bpl.n	80091e0 <__swbuf_r+0x6c>
 80091d2:	2e0a      	cmp	r6, #10
 80091d4:	d104      	bne.n	80091e0 <__swbuf_r+0x6c>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 f927 	bl	800942c <_fflush_r>
 80091de:	b988      	cbnz	r0, 8009204 <__swbuf_r+0x90>
 80091e0:	4638      	mov	r0, r7
 80091e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e4:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <__swbuf_r+0x9c>)
 80091e6:	429c      	cmp	r4, r3
 80091e8:	d101      	bne.n	80091ee <__swbuf_r+0x7a>
 80091ea:	68ac      	ldr	r4, [r5, #8]
 80091ec:	e7cf      	b.n	800918e <__swbuf_r+0x1a>
 80091ee:	4b09      	ldr	r3, [pc, #36]	; (8009214 <__swbuf_r+0xa0>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	bf08      	it	eq
 80091f4:	68ec      	ldreq	r4, [r5, #12]
 80091f6:	e7ca      	b.n	800918e <__swbuf_r+0x1a>
 80091f8:	4621      	mov	r1, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 f81a 	bl	8009234 <__swsetup_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	d0cb      	beq.n	800919c <__swbuf_r+0x28>
 8009204:	f04f 37ff 	mov.w	r7, #4294967295
 8009208:	e7ea      	b.n	80091e0 <__swbuf_r+0x6c>
 800920a:	bf00      	nop
 800920c:	08009e64 	.word	0x08009e64
 8009210:	08009e84 	.word	0x08009e84
 8009214:	08009e44 	.word	0x08009e44

08009218 <__ascii_wctomb>:
 8009218:	b149      	cbz	r1, 800922e <__ascii_wctomb+0x16>
 800921a:	2aff      	cmp	r2, #255	; 0xff
 800921c:	bf85      	ittet	hi
 800921e:	238a      	movhi	r3, #138	; 0x8a
 8009220:	6003      	strhi	r3, [r0, #0]
 8009222:	700a      	strbls	r2, [r1, #0]
 8009224:	f04f 30ff 	movhi.w	r0, #4294967295
 8009228:	bf98      	it	ls
 800922a:	2001      	movls	r0, #1
 800922c:	4770      	bx	lr
 800922e:	4608      	mov	r0, r1
 8009230:	4770      	bx	lr
	...

08009234 <__swsetup_r>:
 8009234:	4b32      	ldr	r3, [pc, #200]	; (8009300 <__swsetup_r+0xcc>)
 8009236:	b570      	push	{r4, r5, r6, lr}
 8009238:	681d      	ldr	r5, [r3, #0]
 800923a:	4606      	mov	r6, r0
 800923c:	460c      	mov	r4, r1
 800923e:	b125      	cbz	r5, 800924a <__swsetup_r+0x16>
 8009240:	69ab      	ldr	r3, [r5, #24]
 8009242:	b913      	cbnz	r3, 800924a <__swsetup_r+0x16>
 8009244:	4628      	mov	r0, r5
 8009246:	f000 f985 	bl	8009554 <__sinit>
 800924a:	4b2e      	ldr	r3, [pc, #184]	; (8009304 <__swsetup_r+0xd0>)
 800924c:	429c      	cmp	r4, r3
 800924e:	d10f      	bne.n	8009270 <__swsetup_r+0x3c>
 8009250:	686c      	ldr	r4, [r5, #4]
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009258:	0719      	lsls	r1, r3, #28
 800925a:	d42c      	bmi.n	80092b6 <__swsetup_r+0x82>
 800925c:	06dd      	lsls	r5, r3, #27
 800925e:	d411      	bmi.n	8009284 <__swsetup_r+0x50>
 8009260:	2309      	movs	r3, #9
 8009262:	6033      	str	r3, [r6, #0]
 8009264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	e03e      	b.n	80092ee <__swsetup_r+0xba>
 8009270:	4b25      	ldr	r3, [pc, #148]	; (8009308 <__swsetup_r+0xd4>)
 8009272:	429c      	cmp	r4, r3
 8009274:	d101      	bne.n	800927a <__swsetup_r+0x46>
 8009276:	68ac      	ldr	r4, [r5, #8]
 8009278:	e7eb      	b.n	8009252 <__swsetup_r+0x1e>
 800927a:	4b24      	ldr	r3, [pc, #144]	; (800930c <__swsetup_r+0xd8>)
 800927c:	429c      	cmp	r4, r3
 800927e:	bf08      	it	eq
 8009280:	68ec      	ldreq	r4, [r5, #12]
 8009282:	e7e6      	b.n	8009252 <__swsetup_r+0x1e>
 8009284:	0758      	lsls	r0, r3, #29
 8009286:	d512      	bpl.n	80092ae <__swsetup_r+0x7a>
 8009288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800928a:	b141      	cbz	r1, 800929e <__swsetup_r+0x6a>
 800928c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009290:	4299      	cmp	r1, r3
 8009292:	d002      	beq.n	800929a <__swsetup_r+0x66>
 8009294:	4630      	mov	r0, r6
 8009296:	f7ff fb31 	bl	80088fc <_free_r>
 800929a:	2300      	movs	r3, #0
 800929c:	6363      	str	r3, [r4, #52]	; 0x34
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	2300      	movs	r3, #0
 80092a8:	6063      	str	r3, [r4, #4]
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f043 0308 	orr.w	r3, r3, #8
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	6923      	ldr	r3, [r4, #16]
 80092b8:	b94b      	cbnz	r3, 80092ce <__swsetup_r+0x9a>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c4:	d003      	beq.n	80092ce <__swsetup_r+0x9a>
 80092c6:	4621      	mov	r1, r4
 80092c8:	4630      	mov	r0, r6
 80092ca:	f000 fa09 	bl	80096e0 <__smakebuf_r>
 80092ce:	89a0      	ldrh	r0, [r4, #12]
 80092d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092d4:	f010 0301 	ands.w	r3, r0, #1
 80092d8:	d00a      	beq.n	80092f0 <__swsetup_r+0xbc>
 80092da:	2300      	movs	r3, #0
 80092dc:	60a3      	str	r3, [r4, #8]
 80092de:	6963      	ldr	r3, [r4, #20]
 80092e0:	425b      	negs	r3, r3
 80092e2:	61a3      	str	r3, [r4, #24]
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	b943      	cbnz	r3, 80092fa <__swsetup_r+0xc6>
 80092e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092ec:	d1ba      	bne.n	8009264 <__swsetup_r+0x30>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	0781      	lsls	r1, r0, #30
 80092f2:	bf58      	it	pl
 80092f4:	6963      	ldrpl	r3, [r4, #20]
 80092f6:	60a3      	str	r3, [r4, #8]
 80092f8:	e7f4      	b.n	80092e4 <__swsetup_r+0xb0>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e7f7      	b.n	80092ee <__swsetup_r+0xba>
 80092fe:	bf00      	nop
 8009300:	20000014 	.word	0x20000014
 8009304:	08009e64 	.word	0x08009e64
 8009308:	08009e84 	.word	0x08009e84
 800930c:	08009e44 	.word	0x08009e44

08009310 <abort>:
 8009310:	b508      	push	{r3, lr}
 8009312:	2006      	movs	r0, #6
 8009314:	f000 fa54 	bl	80097c0 <raise>
 8009318:	2001      	movs	r0, #1
 800931a:	f7f8 fba9 	bl	8001a70 <_exit>
	...

08009320 <__sflush_r>:
 8009320:	898a      	ldrh	r2, [r1, #12]
 8009322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009326:	4605      	mov	r5, r0
 8009328:	0710      	lsls	r0, r2, #28
 800932a:	460c      	mov	r4, r1
 800932c:	d458      	bmi.n	80093e0 <__sflush_r+0xc0>
 800932e:	684b      	ldr	r3, [r1, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	dc05      	bgt.n	8009340 <__sflush_r+0x20>
 8009334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	dc02      	bgt.n	8009340 <__sflush_r+0x20>
 800933a:	2000      	movs	r0, #0
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009342:	2e00      	cmp	r6, #0
 8009344:	d0f9      	beq.n	800933a <__sflush_r+0x1a>
 8009346:	2300      	movs	r3, #0
 8009348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800934c:	682f      	ldr	r7, [r5, #0]
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	d032      	beq.n	80093b8 <__sflush_r+0x98>
 8009352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	075a      	lsls	r2, r3, #29
 8009358:	d505      	bpl.n	8009366 <__sflush_r+0x46>
 800935a:	6863      	ldr	r3, [r4, #4]
 800935c:	1ac0      	subs	r0, r0, r3
 800935e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009360:	b10b      	cbz	r3, 8009366 <__sflush_r+0x46>
 8009362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009364:	1ac0      	subs	r0, r0, r3
 8009366:	2300      	movs	r3, #0
 8009368:	4602      	mov	r2, r0
 800936a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800936c:	6a21      	ldr	r1, [r4, #32]
 800936e:	4628      	mov	r0, r5
 8009370:	47b0      	blx	r6
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	d106      	bne.n	8009386 <__sflush_r+0x66>
 8009378:	6829      	ldr	r1, [r5, #0]
 800937a:	291d      	cmp	r1, #29
 800937c:	d82c      	bhi.n	80093d8 <__sflush_r+0xb8>
 800937e:	4a2a      	ldr	r2, [pc, #168]	; (8009428 <__sflush_r+0x108>)
 8009380:	40ca      	lsrs	r2, r1
 8009382:	07d6      	lsls	r6, r2, #31
 8009384:	d528      	bpl.n	80093d8 <__sflush_r+0xb8>
 8009386:	2200      	movs	r2, #0
 8009388:	6062      	str	r2, [r4, #4]
 800938a:	04d9      	lsls	r1, r3, #19
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	6022      	str	r2, [r4, #0]
 8009390:	d504      	bpl.n	800939c <__sflush_r+0x7c>
 8009392:	1c42      	adds	r2, r0, #1
 8009394:	d101      	bne.n	800939a <__sflush_r+0x7a>
 8009396:	682b      	ldr	r3, [r5, #0]
 8009398:	b903      	cbnz	r3, 800939c <__sflush_r+0x7c>
 800939a:	6560      	str	r0, [r4, #84]	; 0x54
 800939c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800939e:	602f      	str	r7, [r5, #0]
 80093a0:	2900      	cmp	r1, #0
 80093a2:	d0ca      	beq.n	800933a <__sflush_r+0x1a>
 80093a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a8:	4299      	cmp	r1, r3
 80093aa:	d002      	beq.n	80093b2 <__sflush_r+0x92>
 80093ac:	4628      	mov	r0, r5
 80093ae:	f7ff faa5 	bl	80088fc <_free_r>
 80093b2:	2000      	movs	r0, #0
 80093b4:	6360      	str	r0, [r4, #52]	; 0x34
 80093b6:	e7c1      	b.n	800933c <__sflush_r+0x1c>
 80093b8:	6a21      	ldr	r1, [r4, #32]
 80093ba:	2301      	movs	r3, #1
 80093bc:	4628      	mov	r0, r5
 80093be:	47b0      	blx	r6
 80093c0:	1c41      	adds	r1, r0, #1
 80093c2:	d1c7      	bne.n	8009354 <__sflush_r+0x34>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0c4      	beq.n	8009354 <__sflush_r+0x34>
 80093ca:	2b1d      	cmp	r3, #29
 80093cc:	d001      	beq.n	80093d2 <__sflush_r+0xb2>
 80093ce:	2b16      	cmp	r3, #22
 80093d0:	d101      	bne.n	80093d6 <__sflush_r+0xb6>
 80093d2:	602f      	str	r7, [r5, #0]
 80093d4:	e7b1      	b.n	800933a <__sflush_r+0x1a>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	e7ad      	b.n	800933c <__sflush_r+0x1c>
 80093e0:	690f      	ldr	r7, [r1, #16]
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	d0a9      	beq.n	800933a <__sflush_r+0x1a>
 80093e6:	0793      	lsls	r3, r2, #30
 80093e8:	680e      	ldr	r6, [r1, #0]
 80093ea:	bf08      	it	eq
 80093ec:	694b      	ldreq	r3, [r1, #20]
 80093ee:	600f      	str	r7, [r1, #0]
 80093f0:	bf18      	it	ne
 80093f2:	2300      	movne	r3, #0
 80093f4:	eba6 0807 	sub.w	r8, r6, r7
 80093f8:	608b      	str	r3, [r1, #8]
 80093fa:	f1b8 0f00 	cmp.w	r8, #0
 80093fe:	dd9c      	ble.n	800933a <__sflush_r+0x1a>
 8009400:	6a21      	ldr	r1, [r4, #32]
 8009402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009404:	4643      	mov	r3, r8
 8009406:	463a      	mov	r2, r7
 8009408:	4628      	mov	r0, r5
 800940a:	47b0      	blx	r6
 800940c:	2800      	cmp	r0, #0
 800940e:	dc06      	bgt.n	800941e <__sflush_r+0xfe>
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e78e      	b.n	800933c <__sflush_r+0x1c>
 800941e:	4407      	add	r7, r0
 8009420:	eba8 0800 	sub.w	r8, r8, r0
 8009424:	e7e9      	b.n	80093fa <__sflush_r+0xda>
 8009426:	bf00      	nop
 8009428:	20400001 	.word	0x20400001

0800942c <_fflush_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	4605      	mov	r5, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b913      	cbnz	r3, 800943c <_fflush_r+0x10>
 8009436:	2500      	movs	r5, #0
 8009438:	4628      	mov	r0, r5
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	b118      	cbz	r0, 8009446 <_fflush_r+0x1a>
 800943e:	6983      	ldr	r3, [r0, #24]
 8009440:	b90b      	cbnz	r3, 8009446 <_fflush_r+0x1a>
 8009442:	f000 f887 	bl	8009554 <__sinit>
 8009446:	4b14      	ldr	r3, [pc, #80]	; (8009498 <_fflush_r+0x6c>)
 8009448:	429c      	cmp	r4, r3
 800944a:	d11b      	bne.n	8009484 <_fflush_r+0x58>
 800944c:	686c      	ldr	r4, [r5, #4]
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0ef      	beq.n	8009436 <_fflush_r+0xa>
 8009456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d404      	bmi.n	8009466 <_fflush_r+0x3a>
 800945c:	0599      	lsls	r1, r3, #22
 800945e:	d402      	bmi.n	8009466 <_fflush_r+0x3a>
 8009460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009462:	f000 f915 	bl	8009690 <__retarget_lock_acquire_recursive>
 8009466:	4628      	mov	r0, r5
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff ff59 	bl	8009320 <__sflush_r>
 800946e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	4605      	mov	r5, r0
 8009474:	d4e0      	bmi.n	8009438 <_fflush_r+0xc>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	059b      	lsls	r3, r3, #22
 800947a:	d4dd      	bmi.n	8009438 <_fflush_r+0xc>
 800947c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947e:	f000 f908 	bl	8009692 <__retarget_lock_release_recursive>
 8009482:	e7d9      	b.n	8009438 <_fflush_r+0xc>
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <_fflush_r+0x70>)
 8009486:	429c      	cmp	r4, r3
 8009488:	d101      	bne.n	800948e <_fflush_r+0x62>
 800948a:	68ac      	ldr	r4, [r5, #8]
 800948c:	e7df      	b.n	800944e <_fflush_r+0x22>
 800948e:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <_fflush_r+0x74>)
 8009490:	429c      	cmp	r4, r3
 8009492:	bf08      	it	eq
 8009494:	68ec      	ldreq	r4, [r5, #12]
 8009496:	e7da      	b.n	800944e <_fflush_r+0x22>
 8009498:	08009e64 	.word	0x08009e64
 800949c:	08009e84 	.word	0x08009e84
 80094a0:	08009e44 	.word	0x08009e44

080094a4 <std>:
 80094a4:	2300      	movs	r3, #0
 80094a6:	b510      	push	{r4, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	e9c0 3300 	strd	r3, r3, [r0]
 80094ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094b2:	6083      	str	r3, [r0, #8]
 80094b4:	8181      	strh	r1, [r0, #12]
 80094b6:	6643      	str	r3, [r0, #100]	; 0x64
 80094b8:	81c2      	strh	r2, [r0, #14]
 80094ba:	6183      	str	r3, [r0, #24]
 80094bc:	4619      	mov	r1, r3
 80094be:	2208      	movs	r2, #8
 80094c0:	305c      	adds	r0, #92	; 0x5c
 80094c2:	f7fd fb5b 	bl	8006b7c <memset>
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <std+0x38>)
 80094c8:	6263      	str	r3, [r4, #36]	; 0x24
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <std+0x3c>)
 80094cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <std+0x40>)
 80094d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <std+0x44>)
 80094d4:	6224      	str	r4, [r4, #32]
 80094d6:	6323      	str	r3, [r4, #48]	; 0x30
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	bf00      	nop
 80094dc:	080097f9 	.word	0x080097f9
 80094e0:	0800981b 	.word	0x0800981b
 80094e4:	08009853 	.word	0x08009853
 80094e8:	08009877 	.word	0x08009877

080094ec <_cleanup_r>:
 80094ec:	4901      	ldr	r1, [pc, #4]	; (80094f4 <_cleanup_r+0x8>)
 80094ee:	f000 b8af 	b.w	8009650 <_fwalk_reent>
 80094f2:	bf00      	nop
 80094f4:	0800942d 	.word	0x0800942d

080094f8 <__sfmoreglue>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	2268      	movs	r2, #104	; 0x68
 80094fc:	1e4d      	subs	r5, r1, #1
 80094fe:	4355      	muls	r5, r2
 8009500:	460e      	mov	r6, r1
 8009502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009506:	f7ff fa65 	bl	80089d4 <_malloc_r>
 800950a:	4604      	mov	r4, r0
 800950c:	b140      	cbz	r0, 8009520 <__sfmoreglue+0x28>
 800950e:	2100      	movs	r1, #0
 8009510:	e9c0 1600 	strd	r1, r6, [r0]
 8009514:	300c      	adds	r0, #12
 8009516:	60a0      	str	r0, [r4, #8]
 8009518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800951c:	f7fd fb2e 	bl	8006b7c <memset>
 8009520:	4620      	mov	r0, r4
 8009522:	bd70      	pop	{r4, r5, r6, pc}

08009524 <__sfp_lock_acquire>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__sfp_lock_acquire+0x8>)
 8009526:	f000 b8b3 	b.w	8009690 <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	200004ed 	.word	0x200004ed

08009530 <__sfp_lock_release>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sfp_lock_release+0x8>)
 8009532:	f000 b8ae 	b.w	8009692 <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	200004ed 	.word	0x200004ed

0800953c <__sinit_lock_acquire>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__sinit_lock_acquire+0x8>)
 800953e:	f000 b8a7 	b.w	8009690 <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	200004ee 	.word	0x200004ee

08009548 <__sinit_lock_release>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__sinit_lock_release+0x8>)
 800954a:	f000 b8a2 	b.w	8009692 <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	200004ee 	.word	0x200004ee

08009554 <__sinit>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4604      	mov	r4, r0
 8009558:	f7ff fff0 	bl	800953c <__sinit_lock_acquire>
 800955c:	69a3      	ldr	r3, [r4, #24]
 800955e:	b11b      	cbz	r3, 8009568 <__sinit+0x14>
 8009560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009564:	f7ff bff0 	b.w	8009548 <__sinit_lock_release>
 8009568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800956c:	6523      	str	r3, [r4, #80]	; 0x50
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <__sinit+0x68>)
 8009570:	4a13      	ldr	r2, [pc, #76]	; (80095c0 <__sinit+0x6c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	62a2      	str	r2, [r4, #40]	; 0x28
 8009576:	42a3      	cmp	r3, r4
 8009578:	bf04      	itt	eq
 800957a:	2301      	moveq	r3, #1
 800957c:	61a3      	streq	r3, [r4, #24]
 800957e:	4620      	mov	r0, r4
 8009580:	f000 f820 	bl	80095c4 <__sfp>
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	4620      	mov	r0, r4
 8009588:	f000 f81c 	bl	80095c4 <__sfp>
 800958c:	60a0      	str	r0, [r4, #8]
 800958e:	4620      	mov	r0, r4
 8009590:	f000 f818 	bl	80095c4 <__sfp>
 8009594:	2200      	movs	r2, #0
 8009596:	60e0      	str	r0, [r4, #12]
 8009598:	2104      	movs	r1, #4
 800959a:	6860      	ldr	r0, [r4, #4]
 800959c:	f7ff ff82 	bl	80094a4 <std>
 80095a0:	68a0      	ldr	r0, [r4, #8]
 80095a2:	2201      	movs	r2, #1
 80095a4:	2109      	movs	r1, #9
 80095a6:	f7ff ff7d 	bl	80094a4 <std>
 80095aa:	68e0      	ldr	r0, [r4, #12]
 80095ac:	2202      	movs	r2, #2
 80095ae:	2112      	movs	r1, #18
 80095b0:	f7ff ff78 	bl	80094a4 <std>
 80095b4:	2301      	movs	r3, #1
 80095b6:	61a3      	str	r3, [r4, #24]
 80095b8:	e7d2      	b.n	8009560 <__sinit+0xc>
 80095ba:	bf00      	nop
 80095bc:	08009acc 	.word	0x08009acc
 80095c0:	080094ed 	.word	0x080094ed

080095c4 <__sfp>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	4607      	mov	r7, r0
 80095c8:	f7ff ffac 	bl	8009524 <__sfp_lock_acquire>
 80095cc:	4b1e      	ldr	r3, [pc, #120]	; (8009648 <__sfp+0x84>)
 80095ce:	681e      	ldr	r6, [r3, #0]
 80095d0:	69b3      	ldr	r3, [r6, #24]
 80095d2:	b913      	cbnz	r3, 80095da <__sfp+0x16>
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff ffbd 	bl	8009554 <__sinit>
 80095da:	3648      	adds	r6, #72	; 0x48
 80095dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	d503      	bpl.n	80095ec <__sfp+0x28>
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	b30b      	cbz	r3, 800962c <__sfp+0x68>
 80095e8:	6836      	ldr	r6, [r6, #0]
 80095ea:	e7f7      	b.n	80095dc <__sfp+0x18>
 80095ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095f0:	b9d5      	cbnz	r5, 8009628 <__sfp+0x64>
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <__sfp+0x88>)
 80095f4:	60e3      	str	r3, [r4, #12]
 80095f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095fa:	6665      	str	r5, [r4, #100]	; 0x64
 80095fc:	f000 f847 	bl	800968e <__retarget_lock_init_recursive>
 8009600:	f7ff ff96 	bl	8009530 <__sfp_lock_release>
 8009604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800960c:	6025      	str	r5, [r4, #0]
 800960e:	61a5      	str	r5, [r4, #24]
 8009610:	2208      	movs	r2, #8
 8009612:	4629      	mov	r1, r5
 8009614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009618:	f7fd fab0 	bl	8006b7c <memset>
 800961c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009624:	4620      	mov	r0, r4
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	3468      	adds	r4, #104	; 0x68
 800962a:	e7d9      	b.n	80095e0 <__sfp+0x1c>
 800962c:	2104      	movs	r1, #4
 800962e:	4638      	mov	r0, r7
 8009630:	f7ff ff62 	bl	80094f8 <__sfmoreglue>
 8009634:	4604      	mov	r4, r0
 8009636:	6030      	str	r0, [r6, #0]
 8009638:	2800      	cmp	r0, #0
 800963a:	d1d5      	bne.n	80095e8 <__sfp+0x24>
 800963c:	f7ff ff78 	bl	8009530 <__sfp_lock_release>
 8009640:	230c      	movs	r3, #12
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	e7ee      	b.n	8009624 <__sfp+0x60>
 8009646:	bf00      	nop
 8009648:	08009acc 	.word	0x08009acc
 800964c:	ffff0001 	.word	0xffff0001

08009650 <_fwalk_reent>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4606      	mov	r6, r0
 8009656:	4688      	mov	r8, r1
 8009658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800965c:	2700      	movs	r7, #0
 800965e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009662:	f1b9 0901 	subs.w	r9, r9, #1
 8009666:	d505      	bpl.n	8009674 <_fwalk_reent+0x24>
 8009668:	6824      	ldr	r4, [r4, #0]
 800966a:	2c00      	cmp	r4, #0
 800966c:	d1f7      	bne.n	800965e <_fwalk_reent+0xe>
 800966e:	4638      	mov	r0, r7
 8009670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009674:	89ab      	ldrh	r3, [r5, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d907      	bls.n	800968a <_fwalk_reent+0x3a>
 800967a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800967e:	3301      	adds	r3, #1
 8009680:	d003      	beq.n	800968a <_fwalk_reent+0x3a>
 8009682:	4629      	mov	r1, r5
 8009684:	4630      	mov	r0, r6
 8009686:	47c0      	blx	r8
 8009688:	4307      	orrs	r7, r0
 800968a:	3568      	adds	r5, #104	; 0x68
 800968c:	e7e9      	b.n	8009662 <_fwalk_reent+0x12>

0800968e <__retarget_lock_init_recursive>:
 800968e:	4770      	bx	lr

08009690 <__retarget_lock_acquire_recursive>:
 8009690:	4770      	bx	lr

08009692 <__retarget_lock_release_recursive>:
 8009692:	4770      	bx	lr

08009694 <__swhatbuf_r>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	460e      	mov	r6, r1
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	2900      	cmp	r1, #0
 800969e:	b096      	sub	sp, #88	; 0x58
 80096a0:	4614      	mov	r4, r2
 80096a2:	461d      	mov	r5, r3
 80096a4:	da08      	bge.n	80096b8 <__swhatbuf_r+0x24>
 80096a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	602a      	str	r2, [r5, #0]
 80096ae:	061a      	lsls	r2, r3, #24
 80096b0:	d410      	bmi.n	80096d4 <__swhatbuf_r+0x40>
 80096b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096b6:	e00e      	b.n	80096d6 <__swhatbuf_r+0x42>
 80096b8:	466a      	mov	r2, sp
 80096ba:	f000 f903 	bl	80098c4 <_fstat_r>
 80096be:	2800      	cmp	r0, #0
 80096c0:	dbf1      	blt.n	80096a6 <__swhatbuf_r+0x12>
 80096c2:	9a01      	ldr	r2, [sp, #4]
 80096c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096cc:	425a      	negs	r2, r3
 80096ce:	415a      	adcs	r2, r3
 80096d0:	602a      	str	r2, [r5, #0]
 80096d2:	e7ee      	b.n	80096b2 <__swhatbuf_r+0x1e>
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	2000      	movs	r0, #0
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	b016      	add	sp, #88	; 0x58
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096e0 <__smakebuf_r>:
 80096e0:	898b      	ldrh	r3, [r1, #12]
 80096e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096e4:	079d      	lsls	r5, r3, #30
 80096e6:	4606      	mov	r6, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	d507      	bpl.n	80096fc <__smakebuf_r+0x1c>
 80096ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	6123      	str	r3, [r4, #16]
 80096f4:	2301      	movs	r3, #1
 80096f6:	6163      	str	r3, [r4, #20]
 80096f8:	b002      	add	sp, #8
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	ab01      	add	r3, sp, #4
 80096fe:	466a      	mov	r2, sp
 8009700:	f7ff ffc8 	bl	8009694 <__swhatbuf_r>
 8009704:	9900      	ldr	r1, [sp, #0]
 8009706:	4605      	mov	r5, r0
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff f963 	bl	80089d4 <_malloc_r>
 800970e:	b948      	cbnz	r0, 8009724 <__smakebuf_r+0x44>
 8009710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d4ef      	bmi.n	80096f8 <__smakebuf_r+0x18>
 8009718:	f023 0303 	bic.w	r3, r3, #3
 800971c:	f043 0302 	orr.w	r3, r3, #2
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e7e3      	b.n	80096ec <__smakebuf_r+0xc>
 8009724:	4b0d      	ldr	r3, [pc, #52]	; (800975c <__smakebuf_r+0x7c>)
 8009726:	62b3      	str	r3, [r6, #40]	; 0x28
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	6020      	str	r0, [r4, #0]
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	9b00      	ldr	r3, [sp, #0]
 8009734:	6163      	str	r3, [r4, #20]
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	6120      	str	r0, [r4, #16]
 800973a:	b15b      	cbz	r3, 8009754 <__smakebuf_r+0x74>
 800973c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009740:	4630      	mov	r0, r6
 8009742:	f000 f8d1 	bl	80098e8 <_isatty_r>
 8009746:	b128      	cbz	r0, 8009754 <__smakebuf_r+0x74>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	f043 0301 	orr.w	r3, r3, #1
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	89a0      	ldrh	r0, [r4, #12]
 8009756:	4305      	orrs	r5, r0
 8009758:	81a5      	strh	r5, [r4, #12]
 800975a:	e7cd      	b.n	80096f8 <__smakebuf_r+0x18>
 800975c:	080094ed 	.word	0x080094ed

08009760 <_malloc_usable_size_r>:
 8009760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009764:	1f18      	subs	r0, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfbc      	itt	lt
 800976a:	580b      	ldrlt	r3, [r1, r0]
 800976c:	18c0      	addlt	r0, r0, r3
 800976e:	4770      	bx	lr

08009770 <_raise_r>:
 8009770:	291f      	cmp	r1, #31
 8009772:	b538      	push	{r3, r4, r5, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	d904      	bls.n	8009784 <_raise_r+0x14>
 800977a:	2316      	movs	r3, #22
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	f04f 30ff 	mov.w	r0, #4294967295
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009786:	b112      	cbz	r2, 800978e <_raise_r+0x1e>
 8009788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800978c:	b94b      	cbnz	r3, 80097a2 <_raise_r+0x32>
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f830 	bl	80097f4 <_getpid_r>
 8009794:	462a      	mov	r2, r5
 8009796:	4601      	mov	r1, r0
 8009798:	4620      	mov	r0, r4
 800979a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800979e:	f000 b817 	b.w	80097d0 <_kill_r>
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d00a      	beq.n	80097bc <_raise_r+0x4c>
 80097a6:	1c59      	adds	r1, r3, #1
 80097a8:	d103      	bne.n	80097b2 <_raise_r+0x42>
 80097aa:	2316      	movs	r3, #22
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7e7      	b.n	8009782 <_raise_r+0x12>
 80097b2:	2400      	movs	r4, #0
 80097b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097b8:	4628      	mov	r0, r5
 80097ba:	4798      	blx	r3
 80097bc:	2000      	movs	r0, #0
 80097be:	e7e0      	b.n	8009782 <_raise_r+0x12>

080097c0 <raise>:
 80097c0:	4b02      	ldr	r3, [pc, #8]	; (80097cc <raise+0xc>)
 80097c2:	4601      	mov	r1, r0
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f7ff bfd3 	b.w	8009770 <_raise_r>
 80097ca:	bf00      	nop
 80097cc:	20000014 	.word	0x20000014

080097d0 <_kill_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d07      	ldr	r5, [pc, #28]	; (80097f0 <_kill_r+0x20>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	f7f8 f937 	bl	8001a50 <_kill>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d102      	bne.n	80097ec <_kill_r+0x1c>
 80097e6:	682b      	ldr	r3, [r5, #0]
 80097e8:	b103      	cbz	r3, 80097ec <_kill_r+0x1c>
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	bf00      	nop
 80097f0:	200004e8 	.word	0x200004e8

080097f4 <_getpid_r>:
 80097f4:	f7f8 b924 	b.w	8001a40 <_getpid>

080097f8 <__sread>:
 80097f8:	b510      	push	{r4, lr}
 80097fa:	460c      	mov	r4, r1
 80097fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009800:	f000 f894 	bl	800992c <_read_r>
 8009804:	2800      	cmp	r0, #0
 8009806:	bfab      	itete	ge
 8009808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800980a:	89a3      	ldrhlt	r3, [r4, #12]
 800980c:	181b      	addge	r3, r3, r0
 800980e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009812:	bfac      	ite	ge
 8009814:	6563      	strge	r3, [r4, #84]	; 0x54
 8009816:	81a3      	strhlt	r3, [r4, #12]
 8009818:	bd10      	pop	{r4, pc}

0800981a <__swrite>:
 800981a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981e:	461f      	mov	r7, r3
 8009820:	898b      	ldrh	r3, [r1, #12]
 8009822:	05db      	lsls	r3, r3, #23
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	4616      	mov	r6, r2
 800982a:	d505      	bpl.n	8009838 <__swrite+0x1e>
 800982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009830:	2302      	movs	r3, #2
 8009832:	2200      	movs	r2, #0
 8009834:	f000 f868 	bl	8009908 <_lseek_r>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800983e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	4632      	mov	r2, r6
 8009846:	463b      	mov	r3, r7
 8009848:	4628      	mov	r0, r5
 800984a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800984e:	f000 b817 	b.w	8009880 <_write_r>

08009852 <__sseek>:
 8009852:	b510      	push	{r4, lr}
 8009854:	460c      	mov	r4, r1
 8009856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985a:	f000 f855 	bl	8009908 <_lseek_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	bf15      	itete	ne
 8009864:	6560      	strne	r0, [r4, #84]	; 0x54
 8009866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800986a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800986e:	81a3      	strheq	r3, [r4, #12]
 8009870:	bf18      	it	ne
 8009872:	81a3      	strhne	r3, [r4, #12]
 8009874:	bd10      	pop	{r4, pc}

08009876 <__sclose>:
 8009876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987a:	f000 b813 	b.w	80098a4 <_close_r>
	...

08009880 <_write_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d07      	ldr	r5, [pc, #28]	; (80098a0 <_write_r+0x20>)
 8009884:	4604      	mov	r4, r0
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	2200      	movs	r2, #0
 800988c:	602a      	str	r2, [r5, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f7f8 f915 	bl	8001abe <_write>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_write_r+0x1e>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_write_r+0x1e>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	200004e8 	.word	0x200004e8

080098a4 <_close_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d06      	ldr	r5, [pc, #24]	; (80098c0 <_close_r+0x1c>)
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	f7f8 f921 	bl	8001af6 <_close>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_close_r+0x1a>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_close_r+0x1a>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	200004e8 	.word	0x200004e8

080098c4 <_fstat_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4d07      	ldr	r5, [pc, #28]	; (80098e4 <_fstat_r+0x20>)
 80098c8:	2300      	movs	r3, #0
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	4611      	mov	r1, r2
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	f7f8 f91c 	bl	8001b0e <_fstat>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	d102      	bne.n	80098e0 <_fstat_r+0x1c>
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	b103      	cbz	r3, 80098e0 <_fstat_r+0x1c>
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
 80098e2:	bf00      	nop
 80098e4:	200004e8 	.word	0x200004e8

080098e8 <_isatty_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d06      	ldr	r5, [pc, #24]	; (8009904 <_isatty_r+0x1c>)
 80098ec:	2300      	movs	r3, #0
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	602b      	str	r3, [r5, #0]
 80098f4:	f7f8 f91b 	bl	8001b2e <_isatty>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_isatty_r+0x1a>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_isatty_r+0x1a>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	200004e8 	.word	0x200004e8

08009908 <_lseek_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	; (8009928 <_lseek_r+0x20>)
 800990c:	4604      	mov	r4, r0
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f7f8 f914 	bl	8001b44 <_lseek>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_lseek_r+0x1e>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_lseek_r+0x1e>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	200004e8 	.word	0x200004e8

0800992c <_read_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d07      	ldr	r5, [pc, #28]	; (800994c <_read_r+0x20>)
 8009930:	4604      	mov	r4, r0
 8009932:	4608      	mov	r0, r1
 8009934:	4611      	mov	r1, r2
 8009936:	2200      	movs	r2, #0
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	f7f8 f8a2 	bl	8001a84 <_read>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_read_r+0x1e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_read_r+0x1e>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	200004e8 	.word	0x200004e8

08009950 <_init>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr

0800995c <_fini>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr
