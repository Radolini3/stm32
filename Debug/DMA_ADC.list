
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009808  08009808  00019808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd4  08009cd4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009cd4  08009cd4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cd4  08009cd4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd4  08009cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cd8  08009cd8  00019cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000304  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017927  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003694  00000000  00000000  00037b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e10  00000000  00000000  0003d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b99b  00000000  00000000  00061600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0dc  00000000  00000000  0007cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a077  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006354  00000000  00000000  0014a0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097f0 	.word	0x080097f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080097f0 	.word	0x080097f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Set_Pin_Output>:

	/*Zmienne do obsługi czujnika DTH11 */


	/*=============================Ustaw PA6 jako wyjście=============================*/
	void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f002 fd72 	bl	80036c0 <HAL_GPIO_Init>
	}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Set_Pin_Input>:
	/*=============================Ustaw PA6 jako wejście=============================*/
	void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f002 fd54 	bl	80036c0 <HAL_GPIO_Init>
	}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DHT11sensorInit>:


	/*=============================Inicjalizuj czujnik=============================*/
	void DHT11sensorInit(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
		Set_Pin_Output (PORT_A, DHT11_PIN);  // set the pin as output
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f7ff ffbd 	bl	8000ba8 <Set_Pin_Output>
		HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 0);   // pull the pin low
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 fecd 	bl	80039d4 <HAL_GPIO_WritePin>
		delay_us (18000);   // wait for 18ms
 8000c3a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c3e:	f001 f925 	bl	8001e8c <delay_us>
	    HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 1);   // pull the pin high
 8000c42:	2201      	movs	r2, #1
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f002 fec3 	bl	80039d4 <HAL_GPIO_WritePin>
		delay_us (20);   // wait for 20us
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f001 f91c 	bl	8001e8c <delay_us>
		Set_Pin_Input(PORT_A, DHT11_PIN);    // set as input
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f7ff ffc3 	bl	8000be4 <Set_Pin_Input>
	}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <sensorResponse>:


	/*=============================Odpowiedź czujnika=============================*/
	uint8_t sensorResponse(void){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
		uint8_t Response = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
		delay_us (40);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f001 f90d 	bl	8001e8c <delay_us>
		if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))){
 8000c72:	2140      	movs	r1, #64	; 0x40
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f002 fe94 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <sensorResponse+0x40>
			delay_us (80);
 8000c82:	2050      	movs	r0, #80	; 0x50
 8000c84:	f001 f902 	bl	8001e8c <delay_us>
			if ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))) Response = 1;
 8000c88:	2140      	movs	r1, #64	; 0x40
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f002 fe89 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <sensorResponse+0x3c>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e001      	b.n	8000ca2 <sensorResponse+0x40>
			else Response = -1; // 255
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // wait for the pin to go low
 8000ca2:	bf00      	nop
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f002 fe7b 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f7      	bne.n	8000ca4 <sensorResponse+0x42>

		return Response;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
	}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <sensorRead>:

	/*=============================Odczyt=============================*/
	uint8_t sensorRead(void){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
		uint8_t i,j;
		for (j=0;j<8;j++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71bb      	strb	r3, [r7, #6]
 8000cc8:	e03a      	b.n	8000d40 <sensorRead+0x82>
		{
			while (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // wait for the pin to go high
 8000cca:	bf00      	nop
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 fe67 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f7      	beq.n	8000ccc <sensorRead+0xe>
			delay_us (40);   // wait for 40 us
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f001 f8d5 	bl	8001e8c <delay_us>
			if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)))   // if the pin is low
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 fe5c 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10e      	bne.n	8000d10 <sensorRead+0x52>
			{
				i&= ~(1<<(7-j));   // write 0
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f1c3 0307 	rsb	r3, r3, #7
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e00b      	b.n	8000d28 <sensorRead+0x6a>
			}
			else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));  // wait for the pin to go low
 8000d28:	bf00      	nop
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f002 fe38 	bl	80039a4 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f7      	bne.n	8000d2a <sensorRead+0x6c>
		for (j=0;j<8;j++)
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	71bb      	strb	r3, [r7, #6]
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	d9c1      	bls.n	8000cca <sensorRead+0xc>
		}
		return i;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
	}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DHT11_allData>:

	void DHT11_allData(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
		  DHT11sensorInit();
 8000d54:	f7ff ff64 	bl	8000c20 <DHT11sensorInit>
		  Presence = sensorResponse();
 8000d58:	f7ff ff83 	bl	8000c62 <sensorResponse>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <DHT11_allData+0x8c>)
 8000d62:	701a      	strb	r2, [r3, #0]
		  Rh_byte1 = sensorRead ();
 8000d64:	f7ff ffab 	bl	8000cbe <sensorRead>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <DHT11_allData+0x90>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = sensorRead ();
 8000d70:	f7ff ffa5 	bl	8000cbe <sensorRead>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <DHT11_allData+0x94>)
 8000d7a:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = sensorRead ();
 8000d7c:	f7ff ff9f 	bl	8000cbe <sensorRead>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <DHT11_allData+0x98>)
 8000d86:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = sensorRead ();
 8000d88:	f7ff ff99 	bl	8000cbe <sensorRead>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <DHT11_allData+0x9c>)
 8000d92:	701a      	strb	r2, [r3, #0]
		  SUM = sensorRead();
 8000d94:	f7ff ff93 	bl	8000cbe <sensorRead>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <DHT11_allData+0xa0>)
 8000d9e:	801a      	strh	r2, [r3, #0]
		  TEMP = Temp_byte1;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <DHT11_allData+0x98>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <DHT11_allData+0xa4>)
 8000da8:	801a      	strh	r2, [r3, #0]
		  RH = Rh_byte1;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <DHT11_allData+0x90>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <DHT11_allData+0xa8>)
 8000db2:	801a      	strh	r2, [r3, #0]
		  Temperature = (float) TEMP;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <DHT11_allData+0xa4>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <DHT11_allData+0xac>)
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
		  Humidity = (float) RH;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <DHT11_allData+0xa8>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <DHT11_allData+0xb0>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
	}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000336 	.word	0x20000336
 8000de0:	2000032c 	.word	0x2000032c
 8000de4:	2000032d 	.word	0x2000032d
 8000de8:	2000032e 	.word	0x2000032e
 8000dec:	2000032f 	.word	0x2000032f
 8000df0:	20000330 	.word	0x20000330
 8000df4:	20000334 	.word	0x20000334
 8000df8:	20000332 	.word	0x20000332
 8000dfc:	20000338 	.word	0x20000338
 8000e00:	2000033c 	.word	0x2000033c

08000e04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e2e:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e46:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5a:	4b4b      	ldr	r3, [pc, #300]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e62:	2207      	movs	r2, #7
 8000e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e74:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e80:	4841      	ldr	r0, [pc, #260]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e82:	f001 f901 	bl	8002088 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f000 fd44 	bl	8001918 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	483b      	ldr	r0, [pc, #236]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000e9c:	f001 fe82 	bl	8002ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ea6:	f000 fd37 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4830      	ldr	r0, [pc, #192]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000ec8:	f001 fbac 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ed2:	f000 fd21 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4829      	ldr	r0, [pc, #164]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000ee4:	f001 fb9e 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000eee:	f000 fd13 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000f00:	f001 fb90 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000f0a:	f000 fd05 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000f1c:	f001 fb82 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f26:	f000 fcf7 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000f38:	f001 fb74 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000f42:	f000 fce9 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f46:	2309      	movs	r3, #9
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000f54:	f001 fb66 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000f5e:	f000 fcdb 	bl	8001918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f62:	230b      	movs	r3, #11
 8000f64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f66:	2307      	movs	r3, #7
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0x184>)
 8000f70:	f001 fb58 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000f7a:	f000 fccd 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001fc 	.word	0x200001fc

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fac:	d17c      	bne.n	80010a8 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_ADC_MspInit+0x124>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800100e:	230f      	movs	r3, #15
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0x128>)
 8001022:	f002 fb4d 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001026:	2303      	movs	r3, #3
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f002 fb40 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <HAL_ADC_MspInit+0x12c>)
 8001054:	f002 fb34 	bl	80036c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_ADC_MspInit+0x130>)
 800105a:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x134>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_ADC_MspInit+0x130>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_ADC_MspInit+0x130>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_ADC_MspInit+0x130>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_ADC_MspInit+0x130>)
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_ADC_MspInit+0x130>)
 800107a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_ADC_MspInit+0x130>)
 8001082:	2220      	movs	r2, #32
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x130>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <HAL_ADC_MspInit+0x130>)
 800108e:	f002 f946 	bl	800331e <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001098:	f000 fc3e 	bl	8001918 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_ADC_MspInit+0x130>)
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_ADC_MspInit+0x130>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000400 	.word	0x48000400
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	40020008 	.word	0x40020008

080010c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_DMA_Init+0x38>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MX_DMA_Init+0x38>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_DMA_Init+0x38>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	200b      	movs	r0, #11
 80010e8:	f002 f8e3 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010ec:	200b      	movs	r0, #11
 80010ee:	f002 f8fc 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <MX_GPIO_Init+0xd4>)
 800111c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_GPIO_Init+0xd4>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <MX_GPIO_Init+0xd4>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xd4>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_GPIO_Init+0xd4>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f002 fc29 	bl	80039d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001188:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <MX_GPIO_Init+0xd8>)
 800119a:	f002 fa91 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800119e:	2320      	movs	r3, #32
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f002 fa82 	bl	80036c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2028      	movs	r0, #40	; 0x28
 80011c2:	f002 f876 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f002 f88f 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000800 	.word	0x48000800

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	f240 220b 	movw	r2, #523	; 0x20b
 80011ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_I2C1_Init+0x74>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_I2C1_Init+0x74>)
 800121a:	f002 fc0b 	bl	8003a34 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 fb78 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_I2C1_Init+0x74>)
 800122c:	f002 ff0a 	bl	8004044 <HAL_I2CEx_ConfigAnalogFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001236:	f000 fb6f 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C1_Init+0x74>)
 800123e:	f002 ff4c 	bl	80040da <HAL_I2CEx_ConfigDigitalFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 fb66 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000364 	.word	0x20000364
 8001254:	40005400 	.word	0x40005400

08001258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_I2C_MspInit+0xb8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d145      	bne.n	8001306 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6153      	str	r3, [r2, #20]
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f002 f9f9 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012de:	2304      	movs	r3, #4
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <HAL_I2C_MspInit+0xc0>)
 80012ea:	f002 f9e9 	bl	80036c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_I2C_MspInit+0xbc>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400

0800131c <lcd_init>:

#include "globalVars.h"
#include "stdio.h"
#include "string.h"

void lcd_init(struct lcd_disp * lcd){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <lcd_init+0x1a>
		xpin = BL_PIN;
 8001332:	2308      	movs	r3, #8
 8001334:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	delay_us(40000);
 8001336:	f649 4040 	movw	r0, #40000	; 0x9c40
 800133a:	f000 fda7 	bl	8001e8c <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	2130      	movs	r1, #48	; 0x30
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f82c 	bl	80013a4 <lcd_write>
	delay_us(5000);
 800134c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001350:	f000 fd9c 	bl	8001e8c <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	2130      	movs	r1, #48	; 0x30
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f821 	bl	80013a4 <lcd_write>
	delay_us(10000);
 8001362:	f242 7010 	movw	r0, #10000	; 0x2710
 8001366:	f000 fd91 	bl	8001e8c <delay_us>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	2130      	movs	r1, #48	; 0x30
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f816 	bl	80013a4 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	2102      	movs	r1, #2
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f80f 	bl	80013a4 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	210c      	movs	r1, #12
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f808 	bl	80013a4 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f8a0 	bl	80014da <lcd_clear>

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	f023 030f 	bic.w	r3, r3, #15
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80013cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013d0:	f023 030f 	bic.w	r3, r3, #15
 80013d4:	b25a      	sxtb	r2, r3
 80013d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	b299      	uxth	r1, r3
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	2364      	movs	r3, #100	; 0x64
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2304      	movs	r3, #4
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <lcd_write+0x88>)
 8001418:	f002 fb9c 	bl	8003b54 <HAL_I2C_Master_Transmit>

	delay_us(750);
 800141c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001420:	f000 fd34 	bl	8001e8c <delay_us>
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000364 	.word	0x20000364

08001430 <lcd_display>:

void lcd_display(struct lcd_disp * lcd){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	2300      	movs	r3, #0
 800143e:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <lcd_display+0x1e>
		xpin = BL_PIN;
 800144a:	2308      	movs	r3, #8
 800144c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f843 	bl	80014da <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ffa1 	bl	80013a4 <lcd_write>

	while(lcd->f_line[i]){
 8001462:	e00f      	b.n	8001484 <lcd_display+0x54>
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7818      	ldrb	r0, [r3, #0]
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	7859      	ldrb	r1, [r3, #1]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	f7ff ff93 	bl	80013a4 <lcd_write>
		i++;
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	3301      	adds	r3, #1
 8001482:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i]){
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e9      	bne.n	8001464 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	21c0      	movs	r1, #192	; 0xc0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff81 	bl	80013a4 <lcd_write>

	while(lcd->s_line[i]){
 80014a2:	e00f      	b.n	80014c4 <lcd_display+0x94>
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7818      	ldrb	r0, [r3, #0]
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	7c99      	ldrb	r1, [r3, #18]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	f7ff ff73 	bl	80013a4 <lcd_write>
		i++;
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i]){
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	7c9b      	ldrb	r3, [r3, #18]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e9      	bne.n	80014a4 <lcd_display+0x74>
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <lcd_clear+0x1a>
		xpin = BL_PIN;
 80014f0:	2308      	movs	r3, #8
 80014f2:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2101      	movs	r1, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff51 	bl	80013a4 <lcd_write>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <displayReadings>:
void displayReadings(int disp_No){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	switch(disp_No){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	2b04      	cmp	r3, #4
 800151a:	d879      	bhi.n	8001610 <displayReadings+0x104>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <displayReadings+0x18>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001539 	.word	0x08001539
 8001528:	08001567 	.word	0x08001567
 800152c:	08001595 	.word	0x08001595
 8001530:	080015c3 	.word	0x080015c3
 8001534:	080015f1 	.word	0x080015f1
	case 1:
	  sprintf((char *)disp.f_line, "HSens1: %2.f%%", moisture_percentage[0]);
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <displayReadings+0x114>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4937      	ldr	r1, [pc, #220]	; (8001624 <displayReadings+0x118>)
 8001548:	4837      	ldr	r0, [pc, #220]	; (8001628 <displayReadings+0x11c>)
 800154a:	f005 fed7 	bl	80072fc <siprintf>
	  sprintf((char *)disp.s_line, "HSens2: %2.f%%", moisture_percentage[1]);
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <displayReadings+0x114>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fff8 	bl	8000548 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4933      	ldr	r1, [pc, #204]	; (800162c <displayReadings+0x120>)
 800155e:	4834      	ldr	r0, [pc, #208]	; (8001630 <displayReadings+0x124>)
 8001560:	f005 fecc 	bl	80072fc <siprintf>
		break;
 8001564:	e055      	b.n	8001612 <displayReadings+0x106>
	case 2:
	  sprintf((char *)disp.f_line, "HSens3: %2.f%%", moisture_percentage[2]);
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <displayReadings+0x114>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	492f      	ldr	r1, [pc, #188]	; (8001634 <displayReadings+0x128>)
 8001576:	482c      	ldr	r0, [pc, #176]	; (8001628 <displayReadings+0x11c>)
 8001578:	f005 fec0 	bl	80072fc <siprintf>
	  sprintf((char *)disp.s_line, "HSens4: %2.f%%", moisture_percentage[3]);
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <displayReadings+0x114>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	492b      	ldr	r1, [pc, #172]	; (8001638 <displayReadings+0x12c>)
 800158c:	4828      	ldr	r0, [pc, #160]	; (8001630 <displayReadings+0x124>)
 800158e:	f005 feb5 	bl	80072fc <siprintf>
		break;
 8001592:	e03e      	b.n	8001612 <displayReadings+0x106>
	case 3:
	  sprintf((char *)disp.f_line, "HSens5: %2.f%%", moisture_percentage[4]);
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <displayReadings+0x114>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4926      	ldr	r1, [pc, #152]	; (800163c <displayReadings+0x130>)
 80015a4:	4820      	ldr	r0, [pc, #128]	; (8001628 <displayReadings+0x11c>)
 80015a6:	f005 fea9 	bl	80072fc <siprintf>
	  sprintf((char *)disp.s_line, "HSens6: %2.f%%", moisture_percentage[5]);
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <displayReadings+0x114>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffca 	bl	8000548 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4921      	ldr	r1, [pc, #132]	; (8001640 <displayReadings+0x134>)
 80015ba:	481d      	ldr	r0, [pc, #116]	; (8001630 <displayReadings+0x124>)
 80015bc:	f005 fe9e 	bl	80072fc <siprintf>
		break;
 80015c0:	e027      	b.n	8001612 <displayReadings+0x106>
	case 4:
	  sprintf((char *)disp.f_line, "AirT: %2.f degC", Temperature);
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <displayReadings+0x138>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffbe 	bl	8000548 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	491d      	ldr	r1, [pc, #116]	; (8001648 <displayReadings+0x13c>)
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <displayReadings+0x11c>)
 80015d4:	f005 fe92 	bl	80072fc <siprintf>
	  sprintf((char *)disp.s_line, "AirH: %2.f%% ", Humidity);
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <displayReadings+0x140>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb3 	bl	8000548 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	491a      	ldr	r1, [pc, #104]	; (8001650 <displayReadings+0x144>)
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <displayReadings+0x124>)
 80015ea:	f005 fe87 	bl	80072fc <siprintf>
		break;
 80015ee:	e010      	b.n	8001612 <displayReadings+0x106>
	case 5:
	  sprintf((char *)disp.f_line, "LightInt: %2.f%%", lightIntensity);
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <displayReadings+0x148>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4916      	ldr	r1, [pc, #88]	; (8001658 <displayReadings+0x14c>)
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <displayReadings+0x11c>)
 8001602:	f005 fe7b 	bl	80072fc <siprintf>
	  sprintf((char *)disp.s_line, " ");
 8001606:	4915      	ldr	r1, [pc, #84]	; (800165c <displayReadings+0x150>)
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <displayReadings+0x124>)
 800160a:	f005 fe77 	bl	80072fc <siprintf>
		break;
 800160e:	e000      	b.n	8001612 <displayReadings+0x106>
	default:
		break;
 8001610:	bf00      	nop
	}
	lcd_display(&disp);
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <displayReadings+0x154>)
 8001614:	f7ff ff0c 	bl	8001430 <lcd_display>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000310 	.word	0x20000310
 8001624:	08009808 	.word	0x08009808
 8001628:	20000341 	.word	0x20000341
 800162c:	08009818 	.word	0x08009818
 8001630:	20000352 	.word	0x20000352
 8001634:	08009828 	.word	0x08009828
 8001638:	08009838 	.word	0x08009838
 800163c:	08009848 	.word	0x08009848
 8001640:	08009858 	.word	0x08009858
 8001644:	20000338 	.word	0x20000338
 8001648:	08009868 	.word	0x08009868
 800164c:	2000033c 	.word	0x2000033c
 8001650:	08009878 	.word	0x08009878
 8001654:	20000328 	.word	0x20000328
 8001658:	08009888 	.word	0x08009888
 800165c:	0800989c 	.word	0x0800989c
 8001660:	20000340 	.word	0x20000340

08001664 <dirtHumRead>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dirtHumRead(){
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af02      	add	r7, sp, #8
	  HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 7);
 800166a:	2207      	movs	r2, #7
 800166c:	4933      	ldr	r1, [pc, #204]	; (800173c <dirtHumRead+0xd8>)
 800166e:	4834      	ldr	r0, [pc, #208]	; (8001740 <dirtHumRead+0xdc>)
 8001670:	f000 fe9c 	bl	80023ac <HAL_ADC_Start_DMA>
	  delay_us(100000);
 8001674:	4833      	ldr	r0, [pc, #204]	; (8001744 <dirtHumRead+0xe0>)
 8001676:	f000 fc09 	bl	8001e8c <delay_us>
	  HAL_ADC_Stop_DMA(&hadc1);
 800167a:	4831      	ldr	r0, [pc, #196]	; (8001740 <dirtHumRead+0xdc>)
 800167c:	f000 ff70 	bl	8002560 <HAL_ADC_Stop_DMA>

	  for(int i = 0; i<6; i++){
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	e041      	b.n	800170a <dirtHumRead+0xa6>
	  		  moisture_percentage[i] = 100-( map(ADC_VAL[i], 1000, 3970, 0, 100));
 8001686:	4a2d      	ldr	r2, [pc, #180]	; (800173c <dirtHumRead+0xd8>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	b298      	uxth	r0, r3
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	f640 7282 	movw	r2, #3970	; 0xf82
 800169a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800169e:	f000 fc23 	bl	8001ee8 <map>
 80016a2:	eef0 7a40 	vmov.f32	s15, s0
 80016a6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001748 <dirtHumRead+0xe4>
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	4a27      	ldr	r2, [pc, #156]	; (800174c <dirtHumRead+0xe8>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	edc3 7a00 	vstr	s15, [r3]

	  		  if (moisture_percentage[i]>100){moisture_percentage[i] = 100;}
 80016ba:	4a24      	ldr	r2, [pc, #144]	; (800174c <dirtHumRead+0xe8>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001748 <dirtHumRead+0xe4>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd05      	ble.n	80016e0 <dirtHumRead+0x7c>
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <dirtHumRead+0xe8>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <dirtHumRead+0xec>)
 80016de:	601a      	str	r2, [r3, #0]
	  		  if (moisture_percentage[i]<0){moisture_percentage[i] = 0;}
 80016e0:	4a1a      	ldr	r2, [pc, #104]	; (800174c <dirtHumRead+0xe8>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d506      	bpl.n	8001704 <dirtHumRead+0xa0>
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <dirtHumRead+0xe8>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i<6; i++){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b05      	cmp	r3, #5
 800170e:	ddba      	ble.n	8001686 <dirtHumRead+0x22>
	  		  }
	  lightIntensity = map(ADC_VAL[6], 150, 4095, 0, 100);
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <dirtHumRead+0xd8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	b298      	uxth	r0, r3
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001720:	2196      	movs	r1, #150	; 0x96
 8001722:	f000 fbe1 	bl	8001ee8 <map>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <dirtHumRead+0xf0>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
	  sendAllReadingsUART();
 8001730:	f000 f812 	bl	8001758 <sendAllReadingsUART>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200002f4 	.word	0x200002f4
 8001740:	200001fc 	.word	0x200001fc
 8001744:	000186a0 	.word	0x000186a0
 8001748:	42c80000 	.word	0x42c80000
 800174c:	20000310 	.word	0x20000310
 8001750:	42c80000 	.word	0x42c80000
 8001754:	20000328 	.word	0x20000328

08001758 <sendAllReadingsUART>:
void sendAllReadingsUART(){
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8

		//	  sprintf(UartOutText, "Temp: %2.f Humidity %2.f \n\r ", Temperature, Humidity);
		//	  sendString_UART(UartOutText);

	/*Przesył pod przechwytywanie do formatu csv*/
	for(int i = 0; i<6; i++){
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	e013      	b.n	800178c <sendAllReadingsUART+0x34>
		sprintf(UartOutText, "%2.f ", moisture_percentage[i]);
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <sendAllReadingsUART+0x90>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	491c      	ldr	r1, [pc, #112]	; (80017ec <sendAllReadingsUART+0x94>)
 800177a:	481d      	ldr	r0, [pc, #116]	; (80017f0 <sendAllReadingsUART+0x98>)
 800177c:	f005 fdbe 	bl	80072fc <siprintf>
		sendString_UART(UartOutText);
 8001780:	481b      	ldr	r0, [pc, #108]	; (80017f0 <sendAllReadingsUART+0x98>)
 8001782:	f000 fb9b 	bl	8001ebc <sendString_UART>
	for(int i = 0; i<6; i++){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b05      	cmp	r3, #5
 8001790:	dde8      	ble.n	8001764 <sendAllReadingsUART+0xc>
	}
	sprintf(UartOutText," %2.f", lightIntensity);
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <sendAllReadingsUART+0x9c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4915      	ldr	r1, [pc, #84]	; (80017f8 <sendAllReadingsUART+0xa0>)
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <sendAllReadingsUART+0x98>)
 80017a4:	f005 fdaa 	bl	80072fc <siprintf>
	sendString_UART(UartOutText);
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <sendAllReadingsUART+0x98>)
 80017aa:	f000 fb87 	bl	8001ebc <sendString_UART>

	  sprintf(UartOutText, " %2.f %2.f \n\r", Temperature, Humidity);
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <sendAllReadingsUART+0xa4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fec8 	bl	8000548 <__aeabi_f2d>
 80017b8:	4604      	mov	r4, r0
 80017ba:	460d      	mov	r5, r1
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <sendAllReadingsUART+0xa8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	e9cd 2300 	strd	r2, r3, [sp]
 80017ce:	4622      	mov	r2, r4
 80017d0:	462b      	mov	r3, r5
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <sendAllReadingsUART+0xac>)
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <sendAllReadingsUART+0x98>)
 80017d6:	f005 fd91 	bl	80072fc <siprintf>
	  sendString_UART(UartOutText);
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <sendAllReadingsUART+0x98>)
 80017dc:	f000 fb6e 	bl	8001ebc <sendString_UART>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	20000310 	.word	0x20000310
 80017ec:	080098a0 	.word	0x080098a0
 80017f0:	20000290 	.word	0x20000290
 80017f4:	20000328 	.word	0x20000328
 80017f8:	080098a8 	.word	0x080098a8
 80017fc:	20000338 	.word	0x20000338
 8001800:	2000033c 	.word	0x2000033c
 8001804:	080098b0 	.word	0x080098b0

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180c:	f000 fbb8 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001810:	f000 f826 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001814:	f7ff fc74 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8001818:	f7ff fc54 	bl	80010c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800181c:	f000 fa94 	bl	8001d48 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001820:	f7ff faf0 	bl	8000e04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001824:	f000 f9ca 	bl	8001bbc <MX_TIM2_Init>
  MX_TIM6_Init();
 8001828:	f000 fa16 	bl	8001c58 <MX_TIM6_Init>
  MX_I2C1_Init();
 800182c:	f7ff fcd6 	bl	80011dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <main+0x4c>)
 8001832:	f004 f8a1 	bl	8005978 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <main+0x50>)
 8001838:	f004 f8f2 	bl	8005a20 <HAL_TIM_Base_Start_IT>

  disp.addr = (0x27 << 1);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <main+0x54>)
 800183e:	224e      	movs	r2, #78	; 0x4e
 8001840:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <main+0x54>)
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <main+0x54>)
 800184c:	f7ff fd66 	bl	800131c <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001850:	e7fe      	b.n	8001850 <main+0x48>
 8001852:	bf00      	nop
 8001854:	200003b4 	.word	0x200003b4
 8001858:	20000400 	.word	0x20000400
 800185c:	20000340 	.word	0x20000340

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	; 0x58
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186a:	2228      	movs	r2, #40	; 0x28
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f005 f8d2 	bl	8006a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001896:	2302      	movs	r3, #2
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2310      	movs	r3, #16
 80018a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a6:	2300      	movs	r3, #0
 80018a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fc5d 	bl	8004174 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80018c0:	f000 f82a 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2102      	movs	r1, #2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fc85 	bl	80051f0 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80018ec:	f000 f814 	bl	8001918 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 80018f0:	23a0      	movs	r3, #160	; 0xa0
 80018f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4618      	mov	r0, r3
 8001902:	f003 feab 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800190c:	f000 f804 	bl	8001918 <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3758      	adds	r7, #88	; 0x58
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x44>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195a:	2007      	movs	r0, #7
 800195c:	f001 fc9e 	bl	800329c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 fb28 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA1_Channel1_IRQHandler+0x10>)
 80019c6:	f001 fd89 	bl	80034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000024c 	.word	0x2000024c

080019d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM2_IRQHandler+0x10>)
 80019da:	f004 f87d 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200003b4 	.word	0x200003b4

080019e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f0:	f002 f808 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM6_DAC1_IRQHandler+0x10>)
 80019fe:	f004 f86b 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000400 	.word	0x20000400

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
	return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a26:	f004 ffcd 	bl	80069c4 <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a4e:	e7fe      	b.n	8001a4e <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
	}

return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e009      	b.n	8001ab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf1      	blt.n	8001a9c <_write+0x12>
	}
	return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f004 ff32 	bl	80069c4 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20003000 	.word	0x20003000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	200003b0 	.word	0x200003b0
 8001b94:	200004e8 	.word	0x200004e8

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001be4:	2247      	movs	r2, #71	; 0x47
 8001be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c04:	f003 fe60 	bl	80058c8 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c0e:	f7ff fe83 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c20:	f004 f879 	bl	8005d16 <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c2a:	f7ff fe75 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c3c:	f004 fa6e 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c46:	f7ff fe67 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200003b4 	.word	0x200003b4

08001c58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <MX_TIM6_Init+0x6c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c70:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001c8c:	f003 fe1c 	bl	80058c8 <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c96:	f7ff fe3f 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM6_Init+0x68>)
 8001ca8:	f004 fa38 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001cb2:	f7ff fe31 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000400 	.word	0x20000400
 8001cc4:	40001000 	.word	0x40001000

08001cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d114      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201c      	movs	r0, #28
 8001cf8:	f001 fadb 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfc:	201c      	movs	r0, #28
 8001cfe:	f001 faf4 	bl	80032ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d02:	e018      	b.n	8001d36 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <HAL_TIM_Base_MspInit+0x7c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_TIM_Base_MspInit+0x78>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f001 fac1 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001d30:	2036      	movs	r0, #54	; 0x36
 8001d32:	f001 fada 	bl	80032ea <HAL_NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40001000 	.word	0x40001000

08001d48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <MX_USART2_UART_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d8c:	f004 fa52 	bl	8006234 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d96:	f7ff fdbf 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000044c 	.word	0x2000044c
 8001da4:	40004400 	.word	0x40004400

08001da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d128      	bne.n	8001e1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	6153      	str	r3, [r2, #20]
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f001 fc52 	bl	80036c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40004400 	.word	0x40004400
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_TIM_PeriodElapsedCallback>:
/*Moje include'y*/
	#include "globalVars.h"
	#include "string.h"
	#include "stdio.h"
/*Przerwanie po upłynięciu tim6 równego 10000 cykli (po sekundzie)*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	dirtHumRead();
 8001e34:	f7ff fc16 	bl	8001664 <dirtHumRead>
	DHT11_allData();
 8001e38:	f7fe ff8a 	bl	8000d50 <DHT11_allData>
	displayReadings(disp_No);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fb63 	bl	800150c <displayReadings>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_GPIO_EXTI_Callback>:

/*Przerwanie na liniach 10-15, w tym przypadku to jest button na płytce Nucleo*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
		disp_No++;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e66:	6013      	str	r3, [r2, #0]
		if (disp_No == 6) disp_No = 1;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d102      	bne.n	8001e76 <HAL_GPIO_EXTI_Callback+0x22>
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
		displayReadings(disp_No);
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fb46 	bl	800150c <displayReadings>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000

08001e8c <delay_us>:
/*Milisekundowy delay na timerze, tim2 prescaler 72-1, brak przerwań przez tim2*/
void delay_us(uint32_t time){
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <delay_us+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001e9c:	bf00      	nop
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <delay_us+0x2c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f9      	bhi.n	8001e9e <delay_us+0x12>
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	200003b4 	.word	0x200003b4

08001ebc <sendString_UART>:

/*Wyślij po UARCIE numer 2 baudrate = 115200B/s*/
void sendString_UART(char*text){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,  (uint8_t*)text, strlen(text), 1000);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7fe f983 	bl	80001d0 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <sendString_UART+0x28>)
 8001ed6:	f004 f9fb 	bl	80062d0 <HAL_UART_Transmit>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000044c 	.word	0x2000044c

08001ee8 <map>:

/*Przeskaluj wartość analogową z adcka na procenty*/
float map(uint16_t val, int in_min, int in_max, int out_min, int out_max) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	81fb      	strh	r3, [r7, #14]
  return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ef8:	89fa      	ldrh	r2, [r7, #14]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	1a8a      	subs	r2, r1, r2
 8001f04:	fb03 f202 	mul.w	r2, r3, r2
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1acb      	subs	r3, r1, r3
 8001f0e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480d      	ldr	r0, [pc, #52]	; (8001f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490e      	ldr	r1, [pc, #56]	; (8001f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0b      	ldr	r4, [pc, #44]	; (8001f78 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f56:	f7ff fe1f 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f004 fd39 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff fc53 	bl	8001808 <main>

08001f62 <LoopForever>:

LoopForever:
    b LoopForever
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f64:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f70:	08009cdc 	.word	0x08009cdc
  ldr r2, =_sbss
 8001f74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f78:	200004e4 	.word	0x200004e4

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x28>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x28>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f001 f983 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fcc2 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f99b 	bl	8003306 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f001 f963 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000004 	.word	0x20000004
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000008 	.word	0x20000008

0800200c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c
 8002030:	200004d0 	.word	0x200004d0

08002034 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;  
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200004d0 	.word	0x200004d0

0800204c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09a      	sub	sp, #104	; 0x68
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e172      	b.n	800238e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d176      	bne.n	80021a8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d152      	bne.n	8002168 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe ff55 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13b      	bne.n	8002168 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fee7 	bl	8002ec4 <ADC_Disable>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d12f      	bne.n	8002168 <HAL_ADC_Init+0xe0>
 8002108:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12b      	bne.n	8002168 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002118:	f023 0302 	bic.w	r3, r3, #2
 800211c:	f043 0202 	orr.w	r2, r3, #2
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002132:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002142:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002144:	4b94      	ldr	r3, [pc, #592]	; (8002398 <HAL_ADC_Init+0x310>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a94      	ldr	r2, [pc, #592]	; (800239c <HAL_ADC_Init+0x314>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215a:	e002      	b.n	8002162 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002184:	d110      	bne.n	80021a8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f023 0312 	bic.w	r3, r3, #18
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 80df 	bne.w	8002374 <HAL_ADC_Init+0x2ec>
 80021b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80da 	bne.w	8002374 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 80d2 	bne.w	8002374 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021d8:	f043 0202 	orr.w	r2, r3, #2
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e0:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_ADC_Init+0x318>)
 80021e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ec:	d102      	bne.n	80021f4 <HAL_ADC_Init+0x16c>
 80021ee:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <HAL_ADC_Init+0x31c>)
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Init+0x172>
 80021f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021f8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_ADC_Init+0x192>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_ADC_Init+0x192>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_ADC_Init+0x194>
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11c      	bne.n	800225a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002220:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_ADC_Init+0x1ba>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x1ba>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_ADC_Init+0x1bc>
 8002242:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002244:	2b00      	cmp	r3, #0
 8002246:	d108      	bne.n	800225a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002258:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7e5b      	ldrb	r3, [r3, #25]
 800225e:	035b      	lsls	r3, r3, #13
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002264:	2a01      	cmp	r2, #1
 8002266:	d002      	beq.n	800226e <HAL_ADC_Init+0x1e6>
 8002268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226c:	e000      	b.n	8002270 <HAL_ADC_Init+0x1e8>
 800226e:	2200      	movs	r2, #0
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4313      	orrs	r3, r2
 800227e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002280:	4313      	orrs	r3, r2
 8002282:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d11b      	bne.n	80022c6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e5b      	ldrb	r3, [r3, #25]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	045a      	lsls	r2, r3, #17
 800229e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	663b      	str	r3, [r7, #96]	; 0x60
 80022a8:	e00d      	b.n	80022c6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d007      	beq.n	80022de <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	4313      	orrs	r3, r2
 80022d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022da:	4313      	orrs	r3, r2
 80022dc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d114      	bne.n	8002316 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0302 	bic.w	r3, r3, #2
 80022fe:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
 8002304:	039a      	lsls	r2, r3, #14
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4313      	orrs	r3, r2
 8002310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002312:	4313      	orrs	r3, r2
 8002314:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_ADC_Init+0x320>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10c      	bne.n	800234c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f023 010f 	bic.w	r1, r3, #15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
 800234a:	e007      	b.n	800235c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020f 	bic.w	r2, r2, #15
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
 8002372:	e00a      	b.n	800238a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f023 0312 	bic.w	r3, r3, #18
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002384:	2301      	movs	r3, #1
 8002386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800238a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800238e:	4618      	mov	r0, r3
 8002390:	3768      	adds	r7, #104	; 0x68
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000004 	.word	0x20000004
 800239c:	431bde83 	.word	0x431bde83
 80023a0:	50000300 	.word	0x50000300
 80023a4:	50000100 	.word	0x50000100
 80023a8:	fff0c007 	.word	0xfff0c007

080023ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80b9 	bne.w	800253e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Start_DMA+0x2e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0b4      	b.n	8002544 <HAL_ADC_Start_DMA+0x198>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_ADC_Start_DMA+0x1a0>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80a0 	bne.w	8002530 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fd03 	bl	8002dfc <ADC_Enable>
 80023f6:	4603      	mov	r3, r0
 80023f8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8092 	bne.w	8002526 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_ADC_Start_DMA+0x1a0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <HAL_ADC_Start_DMA+0x80>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242a:	d115      	bne.n	8002458 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d027      	beq.n	8002496 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002456:	e01e      	b.n	8002496 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246c:	d004      	beq.n	8002478 <HAL_ADC_Start_DMA+0xcc>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a37      	ldr	r2, [pc, #220]	; (8002550 <HAL_ADC_Start_DMA+0x1a4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10e      	bne.n	8002496 <HAL_ADC_Start_DMA+0xea>
 8002478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800248e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f023 0206 	bic.w	r2, r3, #6
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_ADC_Start_DMA+0x1a8>)
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_ADC_Start_DMA+0x1ac>)
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_ADC_Start_DMA+0x1b0>)
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	221c      	movs	r2, #28
 80024de:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0210 	orr.w	r2, r2, #16
 80024ee:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3340      	adds	r3, #64	; 0x40
 800250a:	4619      	mov	r1, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f000 ff4c 	bl	80033ac <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0204 	orr.w	r2, r2, #4
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00d      	b.n	8002542 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800252e:	e008      	b.n	8002542 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800253c:	e001      	b.n	8002542 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002542:	7dfb      	ldrb	r3, [r7, #23]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	50000300 	.word	0x50000300
 8002550:	50000100 	.word	0x50000100
 8002554:	08002d31 	.word	0x08002d31
 8002558:	08002dab 	.word	0x08002dab
 800255c:	08002dc7 	.word	0x08002dc7

08002560 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADC_Stop_DMA+0x1a>
 8002576:	2302      	movs	r3, #2
 8002578:	e050      	b.n	800261c <HAL_ADC_Stop_DMA+0xbc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002582:	216c      	movs	r1, #108	; 0x6c
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fd03 	bl	8002f90 <ADC_ConversionStop>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d13e      	bne.n	8002612 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d10f      	bne.n	80025d0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 ff58 	bl	800346a <HAL_DMA_Abort>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0210 	bic.w	r2, r2, #16
 80025de:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fc6c 	bl	8002ec4 <ADC_Disable>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fc66 	bl	8002ec4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002624:	b480      	push	{r7}
 8002626:	b09b      	sub	sp, #108	; 0x6c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x22>
 8002642:	2302      	movs	r3, #2
 8002644:	e2a4      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x56c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8288 	bne.w	8002b6e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d81c      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	461a      	mov	r2, r3
 800267a:	231f      	movs	r3, #31
 800267c:	4093      	lsls	r3, r2
 800267e:	43db      	mvns	r3, r3
 8002680:	4019      	ands	r1, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
 800269e:	e063      	b.n	8002768 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d81e      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	221f      	movs	r2, #31
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4019      	ands	r1, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	fa00 f203 	lsl.w	r2, r0, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34
 80026e4:	e040      	b.n	8002768 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b0e      	cmp	r3, #14
 80026ec:	d81e      	bhi.n	800272c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	3b3c      	subs	r3, #60	; 0x3c
 8002702:	221f      	movs	r2, #31
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	3b3c      	subs	r3, #60	; 0x3c
 800271e:	fa00 f203 	lsl.w	r2, r0, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
 800272a:	e01d      	b.n	8002768 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	3b5a      	subs	r3, #90	; 0x5a
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	4019      	ands	r1, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	3b5a      	subs	r3, #90	; 0x5a
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 80e5 	bne.w	8002942 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d91c      	bls.n	80027ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b1e      	subs	r3, #30
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	4019      	ands	r1, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6898      	ldr	r0, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	3b1e      	subs	r3, #30
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	e019      	b.n	80027ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6959      	ldr	r1, [r3, #20]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	2207      	movs	r2, #7
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4019      	ands	r1, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6898      	ldr	r0, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	3b01      	subs	r3, #1
 800280c:	2b03      	cmp	r3, #3
 800280e:	d84f      	bhi.n	80028b0 <HAL_ADC_ConfigChannel+0x28c>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_ADC_ConfigChannel+0x1f4>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	0800284b 	.word	0x0800284b
 8002820:	0800286d 	.word	0x0800286d
 8002824:	0800288f 	.word	0x0800288f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800282e:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <HAL_ADC_ConfigChannel+0x45c>)
 8002830:	4013      	ands	r3, r2
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	0691      	lsls	r1, r2, #26
 8002838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800283a:	430a      	orrs	r2, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002848:	e07e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002850:	4b8b      	ldr	r3, [pc, #556]	; (8002a80 <HAL_ADC_ConfigChannel+0x45c>)
 8002852:	4013      	ands	r3, r2
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	0691      	lsls	r1, r2, #26
 800285a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800285c:	430a      	orrs	r2, r1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002868:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800286a:	e06d      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002872:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_ADC_ConfigChannel+0x45c>)
 8002874:	4013      	ands	r3, r2
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	0691      	lsls	r1, r2, #26
 800287c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800287e:	430a      	orrs	r2, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800288a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800288c:	e05c      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002894:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_ADC_ConfigChannel+0x45c>)
 8002896:	4013      	ands	r3, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	0691      	lsls	r1, r2, #26
 800289e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028a0:	430a      	orrs	r2, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028ac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028ae:	e04b      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	069b      	lsls	r3, r3, #26
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	069b      	lsls	r3, r3, #26
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028f6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	069b      	lsls	r3, r3, #26
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	429a      	cmp	r2, r3
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800293e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002940:	e001      	b.n	8002946 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002946:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x344>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x344>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_ADC_ConfigChannel+0x346>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 810a 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d00f      	beq.n	8002998 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002996:	e049      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b09      	cmp	r3, #9
 80029b8:	d91c      	bls.n	80029f4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6999      	ldr	r1, [r3, #24]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	3b1b      	subs	r3, #27
 80029cc:	2207      	movs	r2, #7
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4019      	ands	r1, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6898      	ldr	r0, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	3b1b      	subs	r3, #27
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	e01b      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4019      	ands	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6898      	ldr	r0, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_ADC_ConfigChannel+0x460>)
 8002a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d105      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a48:	2b11      	cmp	r3, #17
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	f040 8091 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 808a 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a78:	d108      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x468>
 8002a7a:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_ADC_ConfigChannel+0x464>)
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e008      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x46e>
 8002a80:	83fff000 	.word	0x83fff000
 8002a84:	50000300 	.word	0x50000300
 8002a88:	50000100 	.word	0x50000100
 8002a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a90:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d108      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x48e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x48e>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x490>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d150      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x4b6>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x4b6>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_ADC_ConfigChannel+0x4b8>
 8002ada:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13c      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d11d      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x500>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af0:	d118      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_ADC_ConfigChannel+0x578>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_ADC_ConfigChannel+0x57c>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9a      	lsrs	r2, r3, #18
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b14:	e002      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f9      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b22:	e02e      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b11      	cmp	r3, #17
 8002b2a:	d10b      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x520>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b42:	e01e      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b12      	cmp	r3, #18
 8002b4a:	d11a      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b58:	e013      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b6c:	e00a      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b80:	e000      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b82:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	376c      	adds	r7, #108	; 0x6c
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b099      	sub	sp, #100	; 0x64
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bbc:	d102      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	e002      	b.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a2      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e09b      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d17f      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d179      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002c06:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d040      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c22:	035b      	lsls	r3, r3, #13
 8002c24:	430b      	orrs	r3, r1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d15c      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002c6e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d14b      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c7c:	f023 030f 	bic.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	e03c      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d108      	bne.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d123      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ce0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d112      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cee:	f023 030f 	bic.w	r3, r3, #15
 8002cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cf4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf6:	e009      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d0a:	e000      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3764      	adds	r7, #100	; 0x64
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	50000100 	.word	0x50000100
 8002d2c:	50000300 	.word	0x50000300

08002d30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d126      	bne.n	8002d98 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d115      	bne.n	8002d90 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff f95b 	bl	800204c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d96:	e004      	b.n	8002da2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff f951 	bl	8002060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff f941 	bl	8002074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <ADC_Enable+0x2c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <ADC_Enable+0x2c>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <ADC_Enable+0x2e>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d143      	bne.n	8002eb6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <ADC_Enable+0xc4>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e02f      	b.n	8002eb8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e68:	f7ff f8e4 	bl	8002034 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e6e:	e01b      	b.n	8002ea8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e70:	f7ff f8e0 	bl	8002034 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d914      	bls.n	8002ea8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00d      	beq.n	8002ea8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e007      	b.n	8002eb8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d1dc      	bne.n	8002e70 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	8000003f 	.word	0x8000003f

08002ec4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <ADC_Disable+0x2c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <ADC_Disable+0x2c>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <ADC_Disable+0x2e>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d047      	beq.n	8002f86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030d 	and.w	r3, r3, #13
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10f      	bne.n	8002f24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0202 	orr.w	r2, r2, #2
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f1c:	f7ff f88a 	bl	8002034 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f22:	e029      	b.n	8002f78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e023      	b.n	8002f88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f40:	f7ff f878 	bl	8002034 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d914      	bls.n	8002f78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10d      	bne.n	8002f78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0210 	orr.w	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d0dc      	beq.n	8002f40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 809b 	beq.w	80030ec <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc4:	d12a      	bne.n	800301c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d126      	bne.n	800301c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d122      	bne.n	800301c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002fda:	e014      	b.n	8003006 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4a46      	ldr	r2, [pc, #280]	; (80030f8 <ADC_ConversionStop+0x168>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d90d      	bls.n	8003000 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e076      	b.n	80030ee <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3301      	adds	r3, #1
 8003004:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d1e3      	bne.n	8002fdc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b60      	cmp	r3, #96	; 0x60
 8003020:	d015      	beq.n	800304e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d10e      	bne.n	800304e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0210 	orr.w	r2, r2, #16
 800304c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d015      	beq.n	8003080 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d10e      	bne.n	8003080 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0220 	orr.w	r2, r2, #32
 800307e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b60      	cmp	r3, #96	; 0x60
 8003084:	d005      	beq.n	8003092 <ADC_ConversionStop+0x102>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b6c      	cmp	r3, #108	; 0x6c
 800308a:	d105      	bne.n	8003098 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800308c:	230c      	movs	r3, #12
 800308e:	617b      	str	r3, [r7, #20]
        break;
 8003090:	e005      	b.n	800309e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003092:	2308      	movs	r3, #8
 8003094:	617b      	str	r3, [r7, #20]
        break;
 8003096:	e002      	b.n	800309e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003098:	2304      	movs	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
        break;
 800309c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800309e:	f7fe ffc9 	bl	8002034 <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030a4:	e01b      	b.n	80030de <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030a6:	f7fe ffc5 	bl	8002034 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d914      	bls.n	80030de <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1dc      	bne.n	80030a6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	000993ff 	.word	0x000993ff

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e037      	b.n	80033a4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800334a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800334e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f97a 	bl	8003680 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}  
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Start_IT+0x20>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e04a      	b.n	8003462 <HAL_DMA_Start_IT+0xb6>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d13a      	bne.n	8003454 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f90d 	bl	8003622 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 020e 	orr.w	r2, r2, #14
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e00f      	b.n	8003442 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 020a 	orr.w	r2, r2, #10
 8003430:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0204 	bic.w	r2, r2, #4
 8003440:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e005      	b.n	8003460 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003460:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003478:	2b02      	cmp	r3, #2
 800347a:	d008      	beq.n	800348e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2204      	movs	r2, #4
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e020      	b.n	80034d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020e 	bic.w	r2, r2, #14
 800349c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d024      	beq.n	800354e <HAL_DMA_IRQHandler+0x72>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01f      	beq.n	800354e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	2104      	movs	r1, #4
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d06a      	beq.n	800361a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800354c:	e065      	b.n	800361a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2202      	movs	r2, #2
 8003554:	409a      	lsls	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xdc>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d027      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 020a 	bic.w	r2, r2, #10
 8003584:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2102      	movs	r1, #2
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d035      	beq.n	800361a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80035b6:	e030      	b.n	800361a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2208      	movs	r2, #8
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d028      	beq.n	800361a <HAL_DMA_IRQHandler+0x13e>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d023      	beq.n	800361a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020e 	bic.w	r2, r2, #14
 80035e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
    }
  }
}  
 8003618:	e7ff      	b.n	800361a <HAL_DMA_IRQHandler+0x13e>
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f202 	lsl.w	r2, r1, r2
 800363e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d108      	bne.n	8003662 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003660:	e007      	b.n	8003672 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	60da      	str	r2, [r3, #12]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <DMA_CalcBaseAndBitshift+0x34>)
 8003690:	4413      	add	r3, r2
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <DMA_CalcBaseAndBitshift+0x38>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	009a      	lsls	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <DMA_CalcBaseAndBitshift+0x3c>)
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	bffdfff8 	.word	0xbffdfff8
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	40020000 	.word	0x40020000

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ce:	e14e      	b.n	800396e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8140 	beq.w	8003968 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d005      	beq.n	8003700 <HAL_GPIO_Init+0x40>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d130      	bne.n	8003762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003736:	2201      	movs	r2, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 0201 	and.w	r2, r3, #1
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b03      	cmp	r3, #3
 800376c:	d017      	beq.n	800379e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d123      	bne.n	80037f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	6939      	ldr	r1, [r7, #16]
 80037ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 809a 	beq.w	8003968 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_GPIO_Init+0x2cc>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_GPIO_Init+0x2cc>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b52      	ldr	r3, [pc, #328]	; (800398c <HAL_GPIO_Init+0x2cc>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800384c:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003876:	d013      	beq.n	80038a0 <HAL_GPIO_Init+0x1e0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a46      	ldr	r2, [pc, #280]	; (8003994 <HAL_GPIO_Init+0x2d4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00d      	beq.n	800389c <HAL_GPIO_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a45      	ldr	r2, [pc, #276]	; (8003998 <HAL_GPIO_Init+0x2d8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x1d8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_GPIO_Init+0x2dc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_GPIO_Init+0x1d4>
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x1e2>
 8003894:	2305      	movs	r3, #5
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_Init+0x1e2>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_Init+0x1e2>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_Init+0x1e2>
 80038a0:	2300      	movs	r3, #0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b2:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c0:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038e4:	4a2e      	ldr	r2, [pc, #184]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390e:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003914:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f aea9 	bne.w	80036d0 <HAL_GPIO_Init+0x10>
  }
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	40010400 	.word	0x40010400

080039a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
 80039c0:	e001      	b.n	80039c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
 80039e0:	4613      	mov	r3, r2
 80039e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e4:	787b      	ldrb	r3, [r7, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fa16 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40010400 	.word	0x40010400

08003a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e081      	b.n	8003b4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fbfc 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	e006      	b.n	8003abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d104      	bne.n	8003ace <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	817b      	strh	r3, [r7, #10]
 8003b64:	4613      	mov	r3, r2
 8003b66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	f040 80da 	bne.w	8003d2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x30>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0d3      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fa52 	bl	8002034 <HAL_GetTick>
 8003b90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2319      	movs	r3, #25
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f8f0 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0be      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2221      	movs	r2, #33	; 0x21
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	893a      	ldrh	r2, [r7, #8]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2bff      	cmp	r3, #255	; 0xff
 8003bde:	d90e      	bls.n	8003bfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f9f6 	bl	8003fe8 <I2C_TransferConfig>
 8003bfc:	e06c      	b.n	8003cd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f9e5 	bl	8003fe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c1e:	e05b      	b.n	8003cd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	6a39      	ldr	r1, [r7, #32]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f8ed 	bl	8003e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e07b      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d034      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0x184>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d130      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f87f 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e04d      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2bff      	cmp	r3, #255	; 0xff
 8003c98:	d90e      	bls.n	8003cb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f999 	bl	8003fe8 <I2C_TransferConfig>
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f988 	bl	8003fe8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d19e      	bne.n	8003c20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8cc 	bl	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e01a      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	80002000 	.word	0x80002000
 8003d38:	fe00e800 	.word	0xfe00e800

08003d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d103      	bne.n	8003d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	619a      	str	r2, [r3, #24]
  }
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d94:	e022      	b.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d01e      	beq.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fe f949 	bl	8002034 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d113      	bne.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00f      	b.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d0cd      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e10:	e02c      	b.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f870 	bl	8003efc <I2C_IsAcknowledgeFailed>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e02a      	b.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d01e      	beq.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fe f901 	bl	8002034 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d1cb      	bne.n	8003e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e90:	e028      	b.n	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f830 	bl	8003efc <I2C_IsAcknowledgeFailed>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e026      	b.n	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe f8c5 	bl	8002034 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d113      	bne.n	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e007      	b.n	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d1cf      	bne.n	8003e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d161      	bne.n	8003fda <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f24:	d02b      	beq.n	8003f7e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f34:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f36:	e022      	b.n	8003f7e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d01e      	beq.n	8003f7e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fe f878 	bl	8002034 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <I2C_IsAcknowledgeFailed+0x5a>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d113      	bne.n	8003f7e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02e      	b.n	8003fdc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d1d5      	bne.n	8003f38 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff fecd 	bl	8003d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <I2C_IsAcknowledgeFailed+0xe8>)
 8003fae:	400b      	ands	r3, r1
 8003fb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	817b      	strh	r3, [r7, #10]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	0d5b      	lsrs	r3, r3, #21
 8004004:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <I2C_TransferConfig+0x58>)
 800400a:	430b      	orrs	r3, r1
 800400c:	43db      	mvns	r3, r3
 800400e:	ea02 0103 	and.w	r1, r2, r3
 8004012:	897b      	ldrh	r3, [r7, #10]
 8004014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004018:	7a7b      	ldrb	r3, [r7, #9]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	431a      	orrs	r2, r3
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	03ff63ff 	.word	0x03ff63ff

08004044 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d138      	bne.n	80040cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004064:	2302      	movs	r3, #2
 8004066:	e032      	b.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	; 0x24
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004096:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d139      	bne.n	8004164 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e033      	b.n	8004166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2224      	movs	r2, #36	; 0x24
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e000      	b.n	8004166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800417a:	af00      	add	r7, sp, #0
 800417c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004184:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f001 b823 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 817d 	beq.w	80044aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041b0:	4bbc      	ldr	r3, [pc, #752]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041bc:	4bb9      	ldr	r3, [pc, #740]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d15c      	bne.n	8004282 <HAL_RCC_OscConfig+0x10e>
 80041c8:	4bb6      	ldr	r3, [pc, #728]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d155      	bne.n	8004282 <HAL_RCC_OscConfig+0x10e>
 80041d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_RCC_OscConfig+0x94>
 8004202:	4ba8      	ldr	r3, [pc, #672]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	e015      	b.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800421c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004220:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004224:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004230:	4b9c      	ldr	r3, [pc, #624]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004238:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800423c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004240:	fa92 f2a2 	rbit	r2, r2
 8004244:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004248:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800424c:	fab2 f282 	clz	r2, r2
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f042 0220 	orr.w	r2, r2, #32
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	f002 021f 	and.w	r2, r2, #31
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 811f 	beq.w	80044a8 <HAL_RCC_OscConfig+0x334>
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8116 	bne.w	80044a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f000 bfaf 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x12e>
 8004294:	4b83      	ldr	r3, [pc, #524]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a82      	ldr	r2, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e036      	b.n	8004310 <HAL_RCC_OscConfig+0x19c>
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x158>
 80042b2:	4b7c      	ldr	r3, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7b      	ldr	r2, [pc, #492]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e021      	b.n	8004310 <HAL_RCC_OscConfig+0x19c>
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x184>
 80042de:	4b71      	ldr	r3, [pc, #452]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a70      	ldr	r2, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6d      	ldr	r2, [pc, #436]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x19c>
 80042f8:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a69      	ldr	r2, [pc, #420]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a66      	ldr	r2, [pc, #408]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f023 020f 	bic.w	r2, r3, #15
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	495f      	ldr	r1, [pc, #380]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004326:	4313      	orrs	r3, r2
 8004328:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d059      	beq.n	80043ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd fe7b 	bl	8002034 <HAL_GetTick>
 800433e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd fe76 	bl	8002034 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d902      	bls.n	800435a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	f000 bf43 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 800435a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800435e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800436e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d102      	bne.n	800438c <HAL_RCC_OscConfig+0x218>
 8004386:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	e015      	b.n	80043b8 <HAL_RCC_OscConfig+0x244>
 800438c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004390:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80043a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80043a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80043b4:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80043c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80043c4:	fa92 f2a2 	rbit	r2, r2
 80043c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80043cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80043d0:	fab2 f282 	clz	r2, r2
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	f002 021f 	and.w	r2, r2, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f202 	lsl.w	r2, r1, r2
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ab      	beq.n	8004344 <HAL_RCC_OscConfig+0x1d0>
 80043ec:	e05d      	b.n	80044aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fd fe21 	bl	8002034 <HAL_GetTick>
 80043f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fd fe1c 	bl	8002034 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d902      	bls.n	800440e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	f000 bee9 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 800440e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004412:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004422:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_RCC_OscConfig+0x2cc>
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	e015      	b.n	800446c <HAL_RCC_OscConfig+0x2f8>
 8004440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004444:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004458:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800445c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004470:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004474:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004478:	fa92 f2a2 	rbit	r2, r2
 800447c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004480:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004484:	fab2 f282 	clz	r2, r2
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f042 0220 	orr.w	r2, r2, #32
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f002 021f 	and.w	r2, r2, #31
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ab      	bne.n	80043f8 <HAL_RCC_OscConfig+0x284>
 80044a0:	e003      	b.n	80044aa <HAL_RCC_OscConfig+0x336>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 817d 	beq.w	80047ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80044c0:	4ba6      	ldr	r3, [pc, #664]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044cc:	4ba3      	ldr	r3, [pc, #652]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d172      	bne.n	80045be <HAL_RCC_OscConfig+0x44a>
 80044d8:	4ba0      	ldr	r3, [pc, #640]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d16c      	bne.n	80045be <HAL_RCC_OscConfig+0x44a>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80044f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <HAL_RCC_OscConfig+0x3a0>
 800450e:	4b93      	ldr	r3, [pc, #588]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	e013      	b.n	800453c <HAL_RCC_OscConfig+0x3c8>
 8004514:	2302      	movs	r3, #2
 8004516:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004526:	2302      	movs	r3, #2
 8004528:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800452c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004538:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2202      	movs	r2, #2
 800453e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004542:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004546:	fa92 f2a2 	rbit	r2, r2
 800454a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800454e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004552:	fab2 f282 	clz	r2, r2
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f042 0220 	orr.w	r2, r2, #32
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	f002 021f 	and.w	r2, r2, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f202 	lsl.w	r2, r1, r2
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCC_OscConfig+0x410>
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d002      	beq.n	8004584 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f000 be2e 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b75      	ldr	r3, [pc, #468]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	21f8      	movs	r1, #248	; 0xf8
 800459a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80045a2:	fa91 f1a1 	rbit	r1, r1
 80045a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80045aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80045ae:	fab1 f181 	clz	r1, r1
 80045b2:	b2c9      	uxtb	r1, r1
 80045b4:	408b      	lsls	r3, r1
 80045b6:	4969      	ldr	r1, [pc, #420]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045bc:	e0fd      	b.n	80047ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8088 	beq.w	80046e0 <HAL_RCC_OscConfig+0x56c>
 80045d0:	2301      	movs	r3, #1
 80045d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80045e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	2301      	movs	r3, #1
 80045fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd fd1a 	bl	8002034 <HAL_GetTick>
 8004600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	e00a      	b.n	800461c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004606:	f7fd fd15 	bl	8002034 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	f000 bde2 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 800461c:	2302      	movs	r3, #2
 800461e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800462e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_RCC_OscConfig+0x4d8>
 8004646:	4b45      	ldr	r3, [pc, #276]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e013      	b.n	8004674 <HAL_RCC_OscConfig+0x500>
 800464c:	2302      	movs	r3, #2
 800464e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800465e:	2302      	movs	r3, #2
 8004660:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004664:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004670:	4b3a      	ldr	r3, [pc, #232]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2202      	movs	r2, #2
 8004676:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800467a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800467e:	fa92 f2a2 	rbit	r2, r2
 8004682:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004686:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800468a:	fab2 f282 	clz	r2, r2
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	f042 0220 	orr.w	r2, r2, #32
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	f002 021f 	and.w	r2, r2, #31
 800469a:	2101      	movs	r1, #1
 800469c:	fa01 f202 	lsl.w	r2, r1, r2
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0af      	beq.n	8004606 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	21f8      	movs	r1, #248	; 0xf8
 80046bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80046c4:	fa91 f1a1 	rbit	r1, r1
 80046c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80046cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80046d0:	fab1 f181 	clz	r1, r1
 80046d4:	b2c9      	uxtb	r1, r1
 80046d6:	408b      	lsls	r3, r1
 80046d8:	4920      	ldr	r1, [pc, #128]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
 80046de:	e06c      	b.n	80047ba <HAL_RCC_OscConfig+0x646>
 80046e0:	2301      	movs	r3, #1
 80046e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80046f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004700:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd fc92 	bl	8002034 <HAL_GetTick>
 8004710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd fc8d 	bl	8002034 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d902      	bls.n	800472c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	f000 bd5a 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 800472c:	2302      	movs	r3, #2
 800472e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800473e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d104      	bne.n	8004760 <HAL_RCC_OscConfig+0x5ec>
 8004756:	4b01      	ldr	r3, [pc, #4]	; (800475c <HAL_RCC_OscConfig+0x5e8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	e015      	b.n	8004788 <HAL_RCC_OscConfig+0x614>
 800475c:	40021000 	.word	0x40021000
 8004760:	2302      	movs	r3, #2
 8004762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004772:	2302      	movs	r3, #2
 8004774:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004778:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004784:	4bc8      	ldr	r3, [pc, #800]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	2202      	movs	r2, #2
 800478a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800478e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800479a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800479e:	fab2 f282 	clz	r2, r2
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f042 0220 	orr.w	r2, r2, #32
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	f002 021f 	and.w	r2, r2, #31
 80047ae:	2101      	movs	r1, #1
 80047b0:	fa01 f202 	lsl.w	r2, r1, r2
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ad      	bne.n	8004716 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8110 	beq.w	80049f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d079      	beq.n	80048d4 <HAL_RCC_OscConfig+0x760>
 80047e0:	2301      	movs	r3, #1
 80047e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	4bab      	ldr	r3, [pc, #684]	; (8004aac <HAL_RCC_OscConfig+0x938>)
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	461a      	mov	r2, r3
 8004806:	2301      	movs	r3, #1
 8004808:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fd fc13 	bl	8002034 <HAL_GetTick>
 800480e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fd fc0e 	bl	8002034 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d902      	bls.n	800482a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	f000 bcdb 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 800482a:	2302      	movs	r3, #2
 800482c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800483c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004840:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004844:	2202      	movs	r2, #2
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	fa93 f2a3 	rbit	r2, r3
 8004856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004868:	2202      	movs	r2, #2
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	fa93 f2a3 	rbit	r2, r3
 800487a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004882:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004884:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004890:	2102      	movs	r1, #2
 8004892:	6019      	str	r1, [r3, #0]
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f1a3 	rbit	r1, r3
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048aa:	6019      	str	r1, [r3, #0]
  return result;
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0a0      	beq.n	8004814 <HAL_RCC_OscConfig+0x6a0>
 80048d2:	e08d      	b.n	80049f0 <HAL_RCC_OscConfig+0x87c>
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	fa93 f2a3 	rbit	r2, r3
 80048ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048f6:	601a      	str	r2, [r3, #0]
  return result;
 80048f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004900:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_OscConfig+0x938>)
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7fd fb8d 	bl	8002034 <HAL_GetTick>
 800491a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004920:	f7fd fb88 	bl	8002034 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d902      	bls.n	8004936 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	f000 bc55 	b.w	80051e0 <HAL_RCC_OscConfig+0x106c>
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800493e:	2202      	movs	r2, #2
 8004940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f2a3 	rbit	r2, r3
 8004950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004954:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004962:	2202      	movs	r2, #2
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	fa93 f2a3 	rbit	r2, r3
 8004974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004986:	2202      	movs	r2, #2
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	fa93 f2a3 	rbit	r2, r3
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80049a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a2:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 80049a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80049ae:	2102      	movs	r1, #2
 80049b0:	6019      	str	r1, [r3, #0]
 80049b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	fa93 f1a3 	rbit	r1, r3
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80049c8:	6019      	str	r1, [r3, #0]
  return result;
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d197      	bne.n	8004920 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 81a1 	beq.w	8004d48 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	61d3      	str	r3, [r2, #28]
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a30:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004a3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCC_OscConfig+0x93c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11a      	bne.n	8004a88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_RCC_OscConfig+0x93c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <HAL_RCC_OscConfig+0x93c>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fae9 	bl	8002034 <HAL_GetTick>
 8004a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a66:	e009      	b.n	8004a7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a68:	f7fd fae4 	bl	8002034 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e3b1      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_RCC_OscConfig+0x93c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ef      	beq.n	8004a68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x940>
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4a02      	ldr	r2, [pc, #8]	; (8004aa8 <HAL_RCC_OscConfig+0x934>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	e03c      	b.n	8004b20 <HAL_RCC_OscConfig+0x9ac>
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	10908120 	.word	0x10908120
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCC_OscConfig+0x96a>
 8004ac4:	4bc1      	ldr	r3, [pc, #772]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4ac0      	ldr	r2, [pc, #768]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6213      	str	r3, [r2, #32]
 8004ad0:	4bbe      	ldr	r3, [pc, #760]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4abd      	ldr	r2, [pc, #756]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6213      	str	r3, [r2, #32]
 8004adc:	e020      	b.n	8004b20 <HAL_RCC_OscConfig+0x9ac>
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x994>
 8004aee:	4bb7      	ldr	r3, [pc, #732]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4ab6      	ldr	r2, [pc, #728]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6213      	str	r3, [r2, #32]
 8004afa:	4bb4      	ldr	r3, [pc, #720]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4ab3      	ldr	r2, [pc, #716]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	e00b      	b.n	8004b20 <HAL_RCC_OscConfig+0x9ac>
 8004b08:	4bb0      	ldr	r3, [pc, #704]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4aaf      	ldr	r2, [pc, #700]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	6213      	str	r3, [r2, #32]
 8004b14:	4bad      	ldr	r3, [pc, #692]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	4aac      	ldr	r2, [pc, #688]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004b1a:	f023 0304 	bic.w	r3, r3, #4
 8004b1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8081 	beq.w	8004c34 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b32:	f7fd fa7f 	bl	8002034 <HAL_GetTick>
 8004b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fd fa7a 	bl	8002034 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e345      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	fa93 f2a3 	rbit	r2, r3
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b80:	2202      	movs	r2, #2
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	fa93 f2a3 	rbit	r2, r3
 8004b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b9a:	601a      	str	r2, [r3, #0]
  return result;
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004ba4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0302 	orr.w	r3, r3, #2
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d102      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xa4c>
 8004bba:	4b84      	ldr	r3, [pc, #528]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	e013      	b.n	8004be8 <HAL_RCC_OscConfig+0xa74>
 8004bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004bc8:	2202      	movs	r2, #2
 8004bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	fa93 f2a3 	rbit	r2, r3
 8004bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bf8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	fa92 f1a2 	rbit	r1, r2
 8004c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c0a:	6011      	str	r1, [r2, #0]
  return result;
 8004c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c10:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d084      	beq.n	8004b3c <HAL_RCC_OscConfig+0x9c8>
 8004c32:	e07f      	b.n	8004d34 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c34:	f7fd f9fe 	bl	8002034 <HAL_GetTick>
 8004c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd f9f9 	bl	8002034 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e2c4      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004c5e:	2202      	movs	r2, #2
 8004c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	fa93 f2a3 	rbit	r2, r3
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004c82:	2202      	movs	r2, #2
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	fa93 f2a3 	rbit	r2, r3
 8004c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c9c:	601a      	str	r2, [r3, #0]
  return result;
 8004c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca8:	fab3 f383 	clz	r3, r3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d102      	bne.n	8004cc2 <HAL_RCC_OscConfig+0xb4e>
 8004cbc:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	e013      	b.n	8004cea <HAL_RCC_OscConfig+0xb76>
 8004cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004cca:	2202      	movs	r2, #2
 8004ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	fa93 f2a3 	rbit	r2, r3
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cfa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	fa92 f1a2 	rbit	r1, r2
 8004d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004d0c:	6011      	str	r1, [r2, #0]
  return result;
 8004d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d12:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f002 021f 	and.w	r2, r2, #31
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d184      	bne.n	8004c3e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8242 	beq.w	80051de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d5a:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <HAL_RCC_OscConfig+0xc58>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	f000 8213 	beq.w	800518e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	f040 8162 	bne.w	800503e <HAL_RCC_OscConfig+0xeca>
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004d82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fa93 f2a3 	rbit	r2, r3
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d9e:	601a      	str	r2, [r3, #0]
  return result;
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004da8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fd f938 	bl	8002034 <HAL_GetTick>
 8004dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc8:	e00c      	b.n	8004de4 <HAL_RCC_OscConfig+0xc70>
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd f930 	bl	8002034 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1fd      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	fa93 f2a3 	rbit	r2, r3
 8004e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e08:	601a      	str	r2, [r3, #0]
  return result;
 8004e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d102      	bne.n	8004e2e <HAL_RCC_OscConfig+0xcba>
 8004e28:	4bb0      	ldr	r3, [pc, #704]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	e027      	b.n	8004e7e <HAL_RCC_OscConfig+0xd0a>
 8004e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fa93 f2a3 	rbit	r2, r3
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	fa93 f2a3 	rbit	r2, r3
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	4b9c      	ldr	r3, [pc, #624]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e8a:	6011      	str	r1, [r2, #0]
 8004e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	fa92 f1a2 	rbit	r1, r2
 8004e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ea2:	6011      	str	r1, [r2, #0]
  return result;
 8004ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	fab2 f282 	clz	r2, r2
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f042 0220 	orr.w	r2, r2, #32
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f002 021f 	and.w	r2, r2, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d182      	bne.n	8004dd0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eca:	4b88      	ldr	r3, [pc, #544]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	497f      	ldr	r1, [pc, #508]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f16:	601a      	str	r2, [r3, #0]
  return result;
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	461a      	mov	r2, r3
 8004f34:	2301      	movs	r3, #1
 8004f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fd f87c 	bl	8002034 <HAL_GetTick>
 8004f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f40:	e009      	b.n	8004f56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd f877 	bl	8002034 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e144      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	fa93 f2a3 	rbit	r2, r3
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f7a:	601a      	str	r2, [r3, #0]
  return result;
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0xe2c>
 8004f9a:	4b54      	ldr	r3, [pc, #336]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	e027      	b.n	8004ff0 <HAL_RCC_OscConfig+0xe7c>
 8004fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f2a3 	rbit	r2, r3
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fa93 f2a3 	rbit	r2, r3
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ff4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004ff8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005002:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	fa92 f1a2 	rbit	r1, r2
 800500c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005010:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005014:	6011      	str	r1, [r2, #0]
  return result;
 8005016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	fab2 f282 	clz	r2, r2
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	f002 021f 	and.w	r2, r2, #31
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f202 	lsl.w	r2, r1, r2
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d082      	beq.n	8004f42 <HAL_RCC_OscConfig+0xdce>
 800503c:	e0cf      	b.n	80051de <HAL_RCC_OscConfig+0x106a>
 800503e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005042:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005046:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800504a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	fa93 f2a3 	rbit	r2, r3
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005062:	601a      	str	r2, [r3, #0]
  return result;
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800506c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005078:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fc ffd6 	bl	8002034 <HAL_GetTick>
 8005088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508c:	e009      	b.n	80050a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7fc ffd1 	bl	8002034 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e09e      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80050aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80050c6:	601a      	str	r2, [r3, #0]
  return result;
 80050c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80050d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d104      	bne.n	80050f0 <HAL_RCC_OscConfig+0xf7c>
 80050e6:	4b01      	ldr	r3, [pc, #4]	; (80050ec <HAL_RCC_OscConfig+0xf78>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	e029      	b.n	8005140 <HAL_RCC_OscConfig+0xfcc>
 80050ec:	40021000 	.word	0x40021000
 80050f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80050f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005102:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fa93 f2a3 	rbit	r2, r3
 800510c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005110:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800511e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_RCC_OscConfig+0x1078>)
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005144:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005148:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005152:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	fa92 f1a2 	rbit	r1, r2
 800515c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005160:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005164:	6011      	str	r1, [r2, #0]
  return result;
 8005166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800516a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	fab2 f282 	clz	r2, r2
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	f042 0220 	orr.w	r2, r2, #32
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	f002 021f 	and.w	r2, r2, #31
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f202 	lsl.w	r2, r1, r2
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d180      	bne.n	800508e <HAL_RCC_OscConfig+0xf1a>
 800518c:	e027      	b.n	80051de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800518e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e01e      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <HAL_RCC_OscConfig+0x1078>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80051ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d10b      	bne.n	80051da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80051c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80051c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000

080051f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b09e      	sub	sp, #120	; 0x78
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e162      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b90      	ldr	r3, [pc, #576]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d910      	bls.n	8005238 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b8d      	ldr	r3, [pc, #564]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	498b      	ldr	r1, [pc, #556]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b89      	ldr	r3, [pc, #548]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e14a      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005244:	4b82      	ldr	r3, [pc, #520]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	497f      	ldr	r1, [pc, #508]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80dc 	beq.w	800541c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d13c      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xf6>
 800526c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527c:	fab3 f383 	clz	r3, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_RCC_ClockConfig+0xa6>
 8005290:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	e00f      	b.n	80052b6 <HAL_RCC_ClockConfig+0xc6>
 8005296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	667b      	str	r3, [r7, #100]	; 0x64
 80052a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
 80052aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b2:	4b67      	ldr	r3, [pc, #412]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80052bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052be:	fa92 f2a2 	rbit	r2, r2
 80052c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80052c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052c6:	fab2 f282 	clz	r2, r2
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	f042 0220 	orr.w	r2, r2, #32
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	f002 021f 	and.w	r2, r2, #31
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f202 	lsl.w	r2, r1, r2
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d17b      	bne.n	80053da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e0f3      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d13c      	bne.n	8005368 <HAL_RCC_ClockConfig+0x178>
 80052ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d102      	bne.n	8005318 <HAL_RCC_ClockConfig+0x128>
 8005312:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	e00f      	b.n	8005338 <HAL_RCC_ClockConfig+0x148>
 8005318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
 8005326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800532a:	643b      	str	r3, [r7, #64]	; 0x40
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	fa93 f3a3 	rbit	r3, r3
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005334:	4b46      	ldr	r3, [pc, #280]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800533c:	63ba      	str	r2, [r7, #56]	; 0x38
 800533e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005340:	fa92 f2a2 	rbit	r2, r2
 8005344:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005348:	fab2 f282 	clz	r2, r2
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	f042 0220 	orr.w	r2, r2, #32
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	f002 021f 	and.w	r2, r2, #31
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d13a      	bne.n	80053da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0b2      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
 8005368:	2302      	movs	r3, #2
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d102      	bne.n	8005390 <HAL_RCC_ClockConfig+0x1a0>
 800538a:	4b31      	ldr	r3, [pc, #196]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	e00d      	b.n	80053ac <HAL_RCC_ClockConfig+0x1bc>
 8005390:	2302      	movs	r3, #2
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	2302      	movs	r3, #2
 800539e:	623b      	str	r3, [r7, #32]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2202      	movs	r2, #2
 80053ae:	61ba      	str	r2, [r7, #24]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	fa92 f2a2 	rbit	r2, r2
 80053b6:	617a      	str	r2, [r7, #20]
  return result;
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	fab2 f282 	clz	r2, r2
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	f042 0220 	orr.w	r2, r2, #32
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	f002 021f 	and.w	r2, r2, #31
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f202 	lsl.w	r2, r1, r2
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e079      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	491a      	ldr	r1, [pc, #104]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fc fe22 	bl	8002034 <HAL_GetTick>
 80053f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fc fe1e 	bl	8002034 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e061      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <HAL_RCC_ClockConfig+0x260>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 020c 	and.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d1eb      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d214      	bcs.n	8005454 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 0207 	bic.w	r2, r3, #7
 8005432:	4906      	ldr	r1, [pc, #24]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <HAL_RCC_ClockConfig+0x25c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d005      	beq.n	8005454 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e040      	b.n	80054ce <HAL_RCC_ClockConfig+0x2de>
 800544c:	40022000 	.word	0x40022000
 8005450:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <HAL_RCC_ClockConfig+0x2e8>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	491a      	ldr	r1, [pc, #104]	; (80054d8 <HAL_RCC_ClockConfig+0x2e8>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800547e:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <HAL_RCC_ClockConfig+0x2e8>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4912      	ldr	r1, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x2e8>)
 800548e:	4313      	orrs	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005492:	f000 f829 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8005496:	4601      	mov	r1, r0
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <HAL_RCC_ClockConfig+0x2e8>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a0:	22f0      	movs	r2, #240	; 0xf0
 80054a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	fa92 f2a2 	rbit	r2, r2
 80054aa:	60fa      	str	r2, [r7, #12]
  return result;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	fab2 f282 	clz	r2, r2
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	40d3      	lsrs	r3, r2
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x2ec>)
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	fa21 f303 	lsr.w	r3, r1, r3
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <HAL_RCC_ClockConfig+0x2f0>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_RCC_ClockConfig+0x2f4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc fd70 	bl	8001fac <HAL_InitTick>
  
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3778      	adds	r7, #120	; 0x78
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	080098c0 	.word	0x080098c0
 80054e0:	20000004 	.word	0x20000004
 80054e4:	20000008 	.word	0x20000008

080054e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b08b      	sub	sp, #44	; 0x2c
 80054ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d002      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x30>
 8005512:	2b08      	cmp	r3, #8
 8005514:	d003      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x36>
 8005516:	e03c      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800551a:	623b      	str	r3, [r7, #32]
      break;
 800551c:	e03c      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005524:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005528:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	fa92 f2a2 	rbit	r2, r2
 8005530:	607a      	str	r2, [r7, #4]
  return result;
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	fab2 f282 	clz	r2, r2
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	40d3      	lsrs	r3, r2
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	220f      	movs	r2, #15
 800554c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	fa92 f2a2 	rbit	r2, r2
 8005554:	60fa      	str	r2, [r7, #12]
  return result;
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	fab2 f282 	clz	r2, r2
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	40d3      	lsrs	r3, r2
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	fbb2 f2f3 	udiv	r2, r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
 8005580:	e004      	b.n	800558c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	623b      	str	r3, [r7, #32]
      break;
 8005590:	e002      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005594:	623b      	str	r3, [r7, #32]
      break;
 8005596:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005598:	6a3b      	ldr	r3, [r7, #32]
}
 800559a:	4618      	mov	r0, r3
 800559c:	372c      	adds	r7, #44	; 0x2c
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	007a1200 	.word	0x007a1200
 80055b0:	080098d8 	.word	0x080098d8
 80055b4:	080098e8 	.word	0x080098e8
 80055b8:	003d0900 	.word	0x003d0900

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000004 	.word	0x20000004

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80055da:	f7ff ffef 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055de:	4601      	mov	r1, r0
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80055ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	fa92 f2a2 	rbit	r2, r2
 80055f4:	603a      	str	r2, [r7, #0]
  return result;
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	fab2 f282 	clz	r2, r2
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	40d3      	lsrs	r3, r2
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005602:	5cd3      	ldrb	r3, [r2, r3]
 8005604:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000
 8005614:	080098d0 	.word	0x080098d0

08005618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800561e:	f7ff ffcd 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005622:	4601      	mov	r1, r0
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800562c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	fa92 f2a2 	rbit	r2, r2
 8005638:	603a      	str	r2, [r7, #0]
  return result;
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	fab2 f282 	clz	r2, r2
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	40d3      	lsrs	r3, r2
 8005644:	4a04      	ldr	r2, [pc, #16]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	080098d0 	.word	0x080098d0

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b092      	sub	sp, #72	; 0x48
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80cd 	beq.w	800581a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005680:	4b8e      	ldr	r3, [pc, #568]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10e      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568c:	4b8b      	ldr	r3, [pc, #556]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	61d3      	str	r3, [r2, #28]
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d118      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b6:	4b82      	ldr	r3, [pc, #520]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a81      	ldr	r2, [pc, #516]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fc fcb7 	bl	8002034 <HAL_GetTick>
 80056c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7fc fcb3 	bl	8002034 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b64      	cmp	r3, #100	; 0x64
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0ea      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b78      	ldr	r3, [pc, #480]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e8:	4b74      	ldr	r3, [pc, #464]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d07d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005702:	429a      	cmp	r2, r3
 8005704:	d076      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005706:	4b6d      	ldr	r3, [pc, #436]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005714:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	fa93 f3a3 	rbit	r3, r3
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005720:	fab3 f383 	clz	r3, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	4b66      	ldr	r3, [pc, #408]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	461a      	mov	r2, r3
 8005730:	2301      	movs	r3, #1
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	4b5d      	ldr	r3, [pc, #372]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005758:	4a58      	ldr	r2, [pc, #352]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d045      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fc fc64 	bl	8002034 <HAL_GetTick>
 800576c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fc fc60 	bl	8002034 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e095      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005786:	2302      	movs	r3, #2
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	2302      	movs	r3, #2
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	fa93 f3a3 	rbit	r3, r3
 800579c:	61fb      	str	r3, [r7, #28]
  return result;
 800579e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	fab3 f383 	clz	r3, r3
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f043 0302 	orr.w	r3, r3, #2
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d102      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057b4:	4b41      	ldr	r3, [pc, #260]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	e007      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	fa93 f3a3 	rbit	r3, r3
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	4b3d      	ldr	r3, [pc, #244]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2202      	movs	r2, #2
 80057cc:	613a      	str	r2, [r7, #16]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	fa92 f2a2 	rbit	r2, r2
 80057d4:	60fa      	str	r2, [r7, #12]
  return result;
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	fab2 f282 	clz	r2, r2
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	f002 021f 	and.w	r2, r2, #31
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f202 	lsl.w	r2, r1, r2
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0bd      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80057f4:	4b31      	ldr	r3, [pc, #196]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	492e      	ldr	r1, [pc, #184]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005802:	4313      	orrs	r3, r2
 8005804:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580e:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005818:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005826:	4b25      	ldr	r3, [pc, #148]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f023 0203 	bic.w	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	4922      	ldr	r1, [pc, #136]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005834:	4313      	orrs	r3, r2
 8005836:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f023 0210 	bic.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	491a      	ldr	r1, [pc, #104]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005852:	4313      	orrs	r3, r2
 8005854:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4913      	ldr	r1, [pc, #76]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005870:	4313      	orrs	r3, r2
 8005872:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	490b      	ldr	r1, [pc, #44]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588e:	4313      	orrs	r3, r2
 8005890:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4904      	ldr	r1, [pc, #16]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3748      	adds	r7, #72	; 0x48
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
 80058c4:	10908100 	.word	0x10908100

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc f9ea 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 faf6 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e038      	b.n	8005a02 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_TIM_Base_Start+0x98>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00e      	beq.n	80059c0 <HAL_TIM_Base_Start+0x48>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d009      	beq.n	80059c0 <HAL_TIM_Base_Start+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_TIM_Base_Start+0x9c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_TIM_Base_Start+0x48>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <HAL_TIM_Base_Start+0xa0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d115      	bne.n	80059ec <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <HAL_TIM_Base_Start+0xa4>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d015      	beq.n	80059fe <HAL_TIM_Base_Start+0x86>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d8:	d011      	beq.n	80059fe <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ea:	e008      	b.n	80059fe <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e000      	b.n	8005a00 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e040      	b.n	8005aba <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x58>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d009      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x58>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIM_Base_Start_IT+0xac>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x58>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d115      	bne.n	8005aa4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b06      	cmp	r3, #6
 8005a88:	d015      	beq.n	8005ab6 <HAL_TIM_Base_Start_IT+0x96>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d011      	beq.n	8005ab6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa2:	e008      	b.n	8005ab6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e000      	b.n	8005ab8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	00010007 	.word	0x00010007

08005ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0202 	mvn.w	r2, #2
 8005b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9ce 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9c0 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f9d1 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0204 	mvn.w	r2, #4
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9a4 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f996 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9a7 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0208 	mvn.w	r2, #8
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f97a 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f96c 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f97d 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0210 	mvn.w	r2, #16
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2208      	movs	r2, #8
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f950 	bl	8005ebc <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f942 	bl	8005ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f953 	bl	8005ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d10e      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0201 	mvn.w	r2, #1
 8005c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fc f8e8 	bl	8001e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	d10e      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d107      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fac2 	bl	800620c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d10e      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fab5 	bl	8006220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d10e      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d107      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f901 	bl	8005ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d10e      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0220 	mvn.w	r2, #32
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa75 	bl	80061f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_ConfigClockSource+0x1c>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0b6      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x18a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6e:	d03e      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0xd8>
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d74:	f200 8087 	bhi.w	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	f000 8086 	beq.w	8005e8c <HAL_TIM_ConfigClockSource+0x176>
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d87f      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005d86:	2b70      	cmp	r3, #112	; 0x70
 8005d88:	d01a      	beq.n	8005dc0 <HAL_TIM_ConfigClockSource+0xaa>
 8005d8a:	2b70      	cmp	r3, #112	; 0x70
 8005d8c:	d87b      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005d8e:	2b60      	cmp	r3, #96	; 0x60
 8005d90:	d050      	beq.n	8005e34 <HAL_TIM_ConfigClockSource+0x11e>
 8005d92:	2b60      	cmp	r3, #96	; 0x60
 8005d94:	d877      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005d96:	2b50      	cmp	r3, #80	; 0x50
 8005d98:	d03c      	beq.n	8005e14 <HAL_TIM_ConfigClockSource+0xfe>
 8005d9a:	2b50      	cmp	r3, #80	; 0x50
 8005d9c:	d873      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d058      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0x13e>
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d86f      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d064      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x15e>
 8005daa:	2b30      	cmp	r3, #48	; 0x30
 8005dac:	d86b      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d060      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x15e>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d867      	bhi.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d05c      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x15e>
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d05a      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x15e>
 8005dbe:	e062      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f000 f984 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]
      break;
 8005dec:	e04f      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6899      	ldr	r1, [r3, #8]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f000 f96d 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e10:	609a      	str	r2, [r3, #8]
      break;
 8005e12:	e03c      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	461a      	mov	r2, r3
 8005e22:	f000 f8e1 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2150      	movs	r1, #80	; 0x50
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f93a 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005e32:	e02c      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6859      	ldr	r1, [r3, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	461a      	mov	r2, r3
 8005e42:	f000 f900 	bl	8006046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2160      	movs	r1, #96	; 0x60
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f92a 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005e52:	e01c      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f000 f8c1 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2140      	movs	r1, #64	; 0x40
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f91a 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005e72:	e00c      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 f911 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005e84:	e003      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8a:	e000      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a32      	ldr	r2, [pc, #200]	; (8005fd4 <TIM_Base_SetConfig+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x28>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x28>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_Base_SetConfig+0xe0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a27      	ldr	r2, [pc, #156]	; (8005fd4 <TIM_Base_SetConfig+0xdc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <TIM_Base_SetConfig+0x6a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d00f      	beq.n	8005f62 <TIM_Base_SetConfig+0x6a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <TIM_Base_SetConfig+0xe0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00b      	beq.n	8005f62 <TIM_Base_SetConfig+0x6a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a23      	ldr	r2, [pc, #140]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d007      	beq.n	8005f62 <TIM_Base_SetConfig+0x6a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_Base_SetConfig+0x6a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d108      	bne.n	8005f74 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a0e      	ldr	r2, [pc, #56]	; (8005fd4 <TIM_Base_SetConfig+0xdc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_Base_SetConfig+0xc0>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_Base_SetConfig+0xc0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_Base_SetConfig+0xc0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d103      	bne.n	8005fc0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	615a      	str	r2, [r3, #20]
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e054      	b.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a24      	ldr	r2, [pc, #144]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619c:	d009      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10c      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40014000 	.word	0x40014000

080061f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e040      	b.n	80062c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fb fda6 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2224      	movs	r2, #36	; 0x24
 8006260:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f8c0 	bl	80063f8 <UART_SetConfig>
 8006278:	4603      	mov	r3, r0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e022      	b.n	80062c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f9ea 	bl	8006664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fa71 	bl	80067a8 <UART_CheckIdleState>
 80062c6:	4603      	mov	r3, r0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 8082 	bne.w	80063ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_Transmit+0x26>
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07a      	b.n	80063f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UART_Transmit+0x38>
 8006304:	2302      	movs	r3, #2
 8006306:	e073      	b.n	80063f0 <HAL_UART_Transmit+0x120>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2221      	movs	r2, #33	; 0x21
 800631c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800631e:	f7fb fe89 	bl	8002034 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d108      	bne.n	8006350 <HAL_UART_Transmit+0x80>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e003      	b.n	8006358 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006360:	e02d      	b.n	80063be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2200      	movs	r2, #0
 800636a:	2180      	movs	r1, #128	; 0x80
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fa64 	bl	800683a <UART_WaitOnFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e039      	b.n	80063f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638e:	b292      	uxth	r2, r2
 8006390:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	3302      	adds	r3, #2
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e008      	b.n	80063ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b292      	uxth	r2, r2
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1cb      	bne.n	8006362 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa30 	bl	800683a <UART_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e005      	b.n	80063f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b8a      	ldr	r3, [pc, #552]	; (800664c <UART_SetConfig+0x254>)
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	430b      	orrs	r3, r1
 800642e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a78      	ldr	r2, [pc, #480]	; (8006650 <UART_SetConfig+0x258>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d120      	bne.n	80064b6 <UART_SetConfig+0xbe>
 8006474:	4b77      	ldr	r3, [pc, #476]	; (8006654 <UART_SetConfig+0x25c>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b03      	cmp	r3, #3
 800647e:	d817      	bhi.n	80064b0 <UART_SetConfig+0xb8>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x90>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	08006499 	.word	0x08006499
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064ab 	.word	0x080064ab
 8006494:	0800649f 	.word	0x0800649f
 8006498:	2300      	movs	r3, #0
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e01d      	b.n	80064da <UART_SetConfig+0xe2>
 800649e:	2302      	movs	r3, #2
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e01a      	b.n	80064da <UART_SetConfig+0xe2>
 80064a4:	2304      	movs	r3, #4
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e017      	b.n	80064da <UART_SetConfig+0xe2>
 80064aa:	2308      	movs	r3, #8
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e014      	b.n	80064da <UART_SetConfig+0xe2>
 80064b0:	2310      	movs	r3, #16
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e011      	b.n	80064da <UART_SetConfig+0xe2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a67      	ldr	r2, [pc, #412]	; (8006658 <UART_SetConfig+0x260>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d102      	bne.n	80064c6 <UART_SetConfig+0xce>
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e009      	b.n	80064da <UART_SetConfig+0xe2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a64      	ldr	r2, [pc, #400]	; (800665c <UART_SetConfig+0x264>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d102      	bne.n	80064d6 <UART_SetConfig+0xde>
 80064d0:	2300      	movs	r3, #0
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e001      	b.n	80064da <UART_SetConfig+0xe2>
 80064d6:	2310      	movs	r3, #16
 80064d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e2:	d15b      	bne.n	800659c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80064e4:	7ffb      	ldrb	r3, [r7, #31]
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d827      	bhi.n	800653a <UART_SetConfig+0x142>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <UART_SetConfig+0xf8>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653b 	.word	0x0800653b
 8006500:	0800652b 	.word	0x0800652b
 8006504:	0800653b 	.word	0x0800653b
 8006508:	0800653b 	.word	0x0800653b
 800650c:	0800653b 	.word	0x0800653b
 8006510:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7ff f85e 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006518:	61b8      	str	r0, [r7, #24]
        break;
 800651a:	e013      	b.n	8006544 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7ff f87c 	bl	8005618 <HAL_RCC_GetPCLK2Freq>
 8006520:	61b8      	str	r0, [r7, #24]
        break;
 8006522:	e00f      	b.n	8006544 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b4e      	ldr	r3, [pc, #312]	; (8006660 <UART_SetConfig+0x268>)
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e00c      	b.n	8006544 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fe ffdd 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800652e:	61b8      	str	r0, [r7, #24]
        break;
 8006530:	e008      	b.n	8006544 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e004      	b.n	8006544 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	77bb      	strb	r3, [r7, #30]
        break;
 8006542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d074      	beq.n	8006634 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	005a      	lsls	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	b29b      	uxth	r3, r3
 8006560:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b0f      	cmp	r3, #15
 8006566:	d916      	bls.n	8006596 <UART_SetConfig+0x19e>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d212      	bcs.n	8006596 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f023 030f 	bic.w	r3, r3, #15
 8006578:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	b29a      	uxth	r2, r3
 8006586:	89fb      	ldrh	r3, [r7, #14]
 8006588:	4313      	orrs	r3, r2
 800658a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	89fa      	ldrh	r2, [r7, #14]
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	e04e      	b.n	8006634 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77bb      	strb	r3, [r7, #30]
 800659a:	e04b      	b.n	8006634 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d827      	bhi.n	80065f2 <UART_SetConfig+0x1fa>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x1b0>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7ff f802 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e013      	b.n	80065fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7ff f820 	bl	8005618 <HAL_RCC_GetPCLK2Freq>
 80065d8:	61b8      	str	r0, [r7, #24]
        break;
 80065da:	e00f      	b.n	80065fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b20      	ldr	r3, [pc, #128]	; (8006660 <UART_SetConfig+0x268>)
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e00c      	b.n	80065fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe ff81 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80065e6:	61b8      	str	r0, [r7, #24]
        break;
 80065e8:	e008      	b.n	80065fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ee:	61bb      	str	r3, [r7, #24]
        break;
 80065f0:	e004      	b.n	80065fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77bb      	strb	r3, [r7, #30]
        break;
 80065fa:	bf00      	nop
    }

    if (pclk != 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085a      	lsrs	r2, r3, #1
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	b29b      	uxth	r3, r3
 8006616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d908      	bls.n	8006630 <UART_SetConfig+0x238>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006624:	d204      	bcs.n	8006630 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e001      	b.n	8006634 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006640:	7fbb      	ldrb	r3, [r7, #30]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	efff69f3 	.word	0xefff69f3
 8006650:	40013800 	.word	0x40013800
 8006654:	40021000 	.word	0x40021000
 8006658:	40004400 	.word	0x40004400
 800665c:	40004800 	.word	0x40004800
 8006660:	007a1200 	.word	0x007a1200

08006664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006762:	d10a      	bne.n	800677a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b8:	f7fb fc3c 	bl	8002034 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10e      	bne.n	80067ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f82d 	bl	800683a <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e023      	b.n	8006832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d10e      	bne.n	8006816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f817 	bl	800683a <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e00d      	b.n	8006832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b09c      	sub	sp, #112	; 0x70
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	603b      	str	r3, [r7, #0]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684a:	e0a5      	b.n	8006998 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	f000 80a1 	beq.w	8006998 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006856:	f7fb fbed 	bl	8002034 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <UART_WaitOnFlagUntilTimeout+0x32>
 8006866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006868:	2b00      	cmp	r3, #0
 800686a:	d13e      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006880:	667b      	str	r3, [r7, #100]	; 0x64
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	663b      	str	r3, [r7, #96]	; 0x60
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068be:	64ba      	str	r2, [r7, #72]	; 0x48
 80068c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e5      	bne.n	800689e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e067      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d04f      	beq.n	8006998 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006906:	d147      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006910:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
 8006932:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e6      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	613b      	str	r3, [r7, #16]
   return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	66bb      	str	r3, [r7, #104]	; 0x68
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006964:	623a      	str	r2, [r7, #32]
 8006966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	69f9      	ldr	r1, [r7, #28]
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	61bb      	str	r3, [r7, #24]
   return(result);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e5      	bne.n	8006944 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e010      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	4013      	ands	r3, r2
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f43f af4a 	beq.w	800684c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3770      	adds	r7, #112	; 0x70
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	; (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000010 	.word	0x20000010

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	; (8006a08 <__libc_init_array+0x38>)
 80069d4:	4c0d      	ldr	r4, [pc, #52]	; (8006a0c <__libc_init_array+0x3c>)
 80069d6:	1b64      	subs	r4, r4, r5
 80069d8:	10a4      	asrs	r4, r4, #2
 80069da:	2600      	movs	r6, #0
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	; (8006a10 <__libc_init_array+0x40>)
 80069e2:	4c0c      	ldr	r4, [pc, #48]	; (8006a14 <__libc_init_array+0x44>)
 80069e4:	f002 ff04 	bl	80097f0 <_init>
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	2600      	movs	r6, #0
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	08009cd4 	.word	0x08009cd4
 8006a0c:	08009cd4 	.word	0x08009cd4
 8006a10:	08009cd4 	.word	0x08009cd4
 8006a14:	08009cd8 	.word	0x08009cd8

08006a18 <memset>:
 8006a18:	4402      	add	r2, r0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <memset+0xa>
 8006a20:	4770      	bx	lr
 8006a22:	f803 1b01 	strb.w	r1, [r3], #1
 8006a26:	e7f9      	b.n	8006a1c <memset+0x4>

08006a28 <__cvt>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	ec55 4b10 	vmov	r4, r5, d0
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	460e      	mov	r6, r1
 8006a34:	4619      	mov	r1, r3
 8006a36:	462b      	mov	r3, r5
 8006a38:	bfbb      	ittet	lt
 8006a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a3e:	461d      	movlt	r5, r3
 8006a40:	2300      	movge	r3, #0
 8006a42:	232d      	movlt	r3, #45	; 0x2d
 8006a44:	700b      	strb	r3, [r1, #0]
 8006a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a4c:	4691      	mov	r9, r2
 8006a4e:	f023 0820 	bic.w	r8, r3, #32
 8006a52:	bfbc      	itt	lt
 8006a54:	4622      	movlt	r2, r4
 8006a56:	4614      	movlt	r4, r2
 8006a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a5c:	d005      	beq.n	8006a6a <__cvt+0x42>
 8006a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a62:	d100      	bne.n	8006a66 <__cvt+0x3e>
 8006a64:	3601      	adds	r6, #1
 8006a66:	2102      	movs	r1, #2
 8006a68:	e000      	b.n	8006a6c <__cvt+0x44>
 8006a6a:	2103      	movs	r1, #3
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	ab02      	add	r3, sp, #8
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	ec45 4b10 	vmov	d0, r4, r5
 8006a78:	4653      	mov	r3, sl
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	f000 fcec 	bl	8007458 <_dtoa_r>
 8006a80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a84:	4607      	mov	r7, r0
 8006a86:	d102      	bne.n	8006a8e <__cvt+0x66>
 8006a88:	f019 0f01 	tst.w	r9, #1
 8006a8c:	d022      	beq.n	8006ad4 <__cvt+0xac>
 8006a8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a92:	eb07 0906 	add.w	r9, r7, r6
 8006a96:	d110      	bne.n	8006aba <__cvt+0x92>
 8006a98:	783b      	ldrb	r3, [r7, #0]
 8006a9a:	2b30      	cmp	r3, #48	; 0x30
 8006a9c:	d10a      	bne.n	8006ab4 <__cvt+0x8c>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7fa f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aaa:	b918      	cbnz	r0, 8006ab4 <__cvt+0x8c>
 8006aac:	f1c6 0601 	rsb	r6, r6, #1
 8006ab0:	f8ca 6000 	str.w	r6, [sl]
 8006ab4:	f8da 3000 	ldr.w	r3, [sl]
 8006ab8:	4499      	add	r9, r3
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fa f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac6:	b108      	cbz	r0, 8006acc <__cvt+0xa4>
 8006ac8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006acc:	2230      	movs	r2, #48	; 0x30
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	454b      	cmp	r3, r9
 8006ad2:	d307      	bcc.n	8006ae4 <__cvt+0xbc>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad8:	1bdb      	subs	r3, r3, r7
 8006ada:	4638      	mov	r0, r7
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	b004      	add	sp, #16
 8006ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	9103      	str	r1, [sp, #12]
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e7f0      	b.n	8006ace <__cvt+0xa6>

08006aec <__exponent>:
 8006aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aee:	4603      	mov	r3, r0
 8006af0:	2900      	cmp	r1, #0
 8006af2:	bfb8      	it	lt
 8006af4:	4249      	neglt	r1, r1
 8006af6:	f803 2b02 	strb.w	r2, [r3], #2
 8006afa:	bfb4      	ite	lt
 8006afc:	222d      	movlt	r2, #45	; 0x2d
 8006afe:	222b      	movge	r2, #43	; 0x2b
 8006b00:	2909      	cmp	r1, #9
 8006b02:	7042      	strb	r2, [r0, #1]
 8006b04:	dd2a      	ble.n	8006b5c <__exponent+0x70>
 8006b06:	f10d 0407 	add.w	r4, sp, #7
 8006b0a:	46a4      	mov	ip, r4
 8006b0c:	270a      	movs	r7, #10
 8006b0e:	46a6      	mov	lr, r4
 8006b10:	460a      	mov	r2, r1
 8006b12:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b16:	fb07 1516 	mls	r5, r7, r6, r1
 8006b1a:	3530      	adds	r5, #48	; 0x30
 8006b1c:	2a63      	cmp	r2, #99	; 0x63
 8006b1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b26:	4631      	mov	r1, r6
 8006b28:	dcf1      	bgt.n	8006b0e <__exponent+0x22>
 8006b2a:	3130      	adds	r1, #48	; 0x30
 8006b2c:	f1ae 0502 	sub.w	r5, lr, #2
 8006b30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b34:	1c44      	adds	r4, r0, #1
 8006b36:	4629      	mov	r1, r5
 8006b38:	4561      	cmp	r1, ip
 8006b3a:	d30a      	bcc.n	8006b52 <__exponent+0x66>
 8006b3c:	f10d 0209 	add.w	r2, sp, #9
 8006b40:	eba2 020e 	sub.w	r2, r2, lr
 8006b44:	4565      	cmp	r5, ip
 8006b46:	bf88      	it	hi
 8006b48:	2200      	movhi	r2, #0
 8006b4a:	4413      	add	r3, r2
 8006b4c:	1a18      	subs	r0, r3, r0
 8006b4e:	b003      	add	sp, #12
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b5a:	e7ed      	b.n	8006b38 <__exponent+0x4c>
 8006b5c:	2330      	movs	r3, #48	; 0x30
 8006b5e:	3130      	adds	r1, #48	; 0x30
 8006b60:	7083      	strb	r3, [r0, #2]
 8006b62:	70c1      	strb	r1, [r0, #3]
 8006b64:	1d03      	adds	r3, r0, #4
 8006b66:	e7f1      	b.n	8006b4c <__exponent+0x60>

08006b68 <_printf_float>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	ed2d 8b02 	vpush	{d8}
 8006b70:	b08d      	sub	sp, #52	; 0x34
 8006b72:	460c      	mov	r4, r1
 8006b74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b78:	4616      	mov	r6, r2
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	f001 fa59 	bl	8008034 <_localeconv_r>
 8006b82:	f8d0 a000 	ldr.w	sl, [r0]
 8006b86:	4650      	mov	r0, sl
 8006b88:	f7f9 fb22 	bl	80001d0 <strlen>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	9305      	str	r3, [sp, #20]
 8006b94:	f8d8 3000 	ldr.w	r3, [r8]
 8006b98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	f023 0307 	bic.w	r3, r3, #7
 8006ba2:	f103 0208 	add.w	r2, r3, #8
 8006ba6:	f8c8 2000 	str.w	r2, [r8]
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bc0:	ee08 0a10 	vmov	s16, r0
 8006bc4:	4b9f      	ldr	r3, [pc, #636]	; (8006e44 <_printf_float+0x2dc>)
 8006bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	f7f9 ffad 	bl	8000b2c <__aeabi_dcmpun>
 8006bd2:	bb88      	cbnz	r0, 8006c38 <_printf_float+0xd0>
 8006bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd8:	4b9a      	ldr	r3, [pc, #616]	; (8006e44 <_printf_float+0x2dc>)
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295
 8006bde:	f7f9 ff87 	bl	8000af0 <__aeabi_dcmple>
 8006be2:	bb48      	cbnz	r0, 8006c38 <_printf_float+0xd0>
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 ff76 	bl	8000adc <__aeabi_dcmplt>
 8006bf0:	b110      	cbz	r0, 8006bf8 <_printf_float+0x90>
 8006bf2:	232d      	movs	r3, #45	; 0x2d
 8006bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf8:	4b93      	ldr	r3, [pc, #588]	; (8006e48 <_printf_float+0x2e0>)
 8006bfa:	4894      	ldr	r0, [pc, #592]	; (8006e4c <_printf_float+0x2e4>)
 8006bfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c00:	bf94      	ite	ls
 8006c02:	4698      	movls	r8, r3
 8006c04:	4680      	movhi	r8, r0
 8006c06:	2303      	movs	r3, #3
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	9b05      	ldr	r3, [sp, #20]
 8006c0c:	f023 0204 	bic.w	r2, r3, #4
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	f04f 0900 	mov.w	r9, #0
 8006c16:	9700      	str	r7, [sp, #0]
 8006c18:	4633      	mov	r3, r6
 8006c1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 f9d8 	bl	8006fd4 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	f040 8090 	bne.w	8006d4a <_printf_float+0x1e2>
 8006c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2e:	b00d      	add	sp, #52	; 0x34
 8006c30:	ecbd 8b02 	vpop	{d8}
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	4649      	mov	r1, r9
 8006c40:	f7f9 ff74 	bl	8000b2c <__aeabi_dcmpun>
 8006c44:	b140      	cbz	r0, 8006c58 <_printf_float+0xf0>
 8006c46:	464b      	mov	r3, r9
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfbc      	itt	lt
 8006c4c:	232d      	movlt	r3, #45	; 0x2d
 8006c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c52:	487f      	ldr	r0, [pc, #508]	; (8006e50 <_printf_float+0x2e8>)
 8006c54:	4b7f      	ldr	r3, [pc, #508]	; (8006e54 <_printf_float+0x2ec>)
 8006c56:	e7d1      	b.n	8006bfc <_printf_float+0x94>
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c5e:	9206      	str	r2, [sp, #24]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	d13f      	bne.n	8006ce4 <_printf_float+0x17c>
 8006c64:	2306      	movs	r3, #6
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	9b05      	ldr	r3, [sp, #20]
 8006c6a:	6861      	ldr	r1, [r4, #4]
 8006c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c70:	2300      	movs	r3, #0
 8006c72:	9303      	str	r3, [sp, #12]
 8006c74:	ab0a      	add	r3, sp, #40	; 0x28
 8006c76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c7a:	ab09      	add	r3, sp, #36	; 0x24
 8006c7c:	ec49 8b10 	vmov	d0, r8, r9
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f7ff fecd 	bl	8006a28 <__cvt>
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c92:	2b47      	cmp	r3, #71	; 0x47
 8006c94:	4680      	mov	r8, r0
 8006c96:	d108      	bne.n	8006caa <_printf_float+0x142>
 8006c98:	1cc8      	adds	r0, r1, #3
 8006c9a:	db02      	blt.n	8006ca2 <_printf_float+0x13a>
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	4299      	cmp	r1, r3
 8006ca0:	dd41      	ble.n	8006d26 <_printf_float+0x1be>
 8006ca2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ca6:	fa5f fb8b 	uxtb.w	fp, fp
 8006caa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cae:	d820      	bhi.n	8006cf2 <_printf_float+0x18a>
 8006cb0:	3901      	subs	r1, #1
 8006cb2:	465a      	mov	r2, fp
 8006cb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006cba:	f7ff ff17 	bl	8006aec <__exponent>
 8006cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cc0:	1813      	adds	r3, r2, r0
 8006cc2:	2a01      	cmp	r2, #1
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	dc02      	bgt.n	8006cd0 <_printf_float+0x168>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	07d2      	lsls	r2, r2, #31
 8006cce:	d501      	bpl.n	8006cd4 <_printf_float+0x16c>
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d09c      	beq.n	8006c16 <_printf_float+0xae>
 8006cdc:	232d      	movs	r3, #45	; 0x2d
 8006cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce2:	e798      	b.n	8006c16 <_printf_float+0xae>
 8006ce4:	9a06      	ldr	r2, [sp, #24]
 8006ce6:	2a47      	cmp	r2, #71	; 0x47
 8006ce8:	d1be      	bne.n	8006c68 <_printf_float+0x100>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1bc      	bne.n	8006c68 <_printf_float+0x100>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e7b9      	b.n	8006c66 <_printf_float+0xfe>
 8006cf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cf6:	d118      	bne.n	8006d2a <_printf_float+0x1c2>
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	dd0b      	ble.n	8006d16 <_printf_float+0x1ae>
 8006cfe:	6121      	str	r1, [r4, #16]
 8006d00:	b913      	cbnz	r3, 8006d08 <_printf_float+0x1a0>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	07d0      	lsls	r0, r2, #31
 8006d06:	d502      	bpl.n	8006d0e <_printf_float+0x1a6>
 8006d08:	3301      	adds	r3, #1
 8006d0a:	440b      	add	r3, r1
 8006d0c:	6123      	str	r3, [r4, #16]
 8006d0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	e7de      	b.n	8006cd4 <_printf_float+0x16c>
 8006d16:	b913      	cbnz	r3, 8006d1e <_printf_float+0x1b6>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	07d2      	lsls	r2, r2, #31
 8006d1c:	d501      	bpl.n	8006d22 <_printf_float+0x1ba>
 8006d1e:	3302      	adds	r3, #2
 8006d20:	e7f4      	b.n	8006d0c <_printf_float+0x1a4>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e7f2      	b.n	8006d0c <_printf_float+0x1a4>
 8006d26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	db05      	blt.n	8006d3c <_printf_float+0x1d4>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	6121      	str	r1, [r4, #16]
 8006d34:	07d8      	lsls	r0, r3, #31
 8006d36:	d5ea      	bpl.n	8006d0e <_printf_float+0x1a6>
 8006d38:	1c4b      	adds	r3, r1, #1
 8006d3a:	e7e7      	b.n	8006d0c <_printf_float+0x1a4>
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	bfd4      	ite	le
 8006d40:	f1c1 0202 	rsble	r2, r1, #2
 8006d44:	2201      	movgt	r2, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	e7e0      	b.n	8006d0c <_printf_float+0x1a4>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	055a      	lsls	r2, r3, #21
 8006d4e:	d407      	bmi.n	8006d60 <_printf_float+0x1f8>
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	4642      	mov	r2, r8
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d12c      	bne.n	8006db8 <_printf_float+0x250>
 8006d5e:	e764      	b.n	8006c2a <_printf_float+0xc2>
 8006d60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d64:	f240 80e0 	bls.w	8006f28 <_printf_float+0x3c0>
 8006d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f7f9 feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d034      	beq.n	8006de2 <_printf_float+0x27a>
 8006d78:	4a37      	ldr	r2, [pc, #220]	; (8006e58 <_printf_float+0x2f0>)
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f af51 	beq.w	8006c2a <_printf_float+0xc2>
 8006d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	db02      	blt.n	8006d96 <_printf_float+0x22e>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	07d8      	lsls	r0, r3, #31
 8006d94:	d510      	bpl.n	8006db8 <_printf_float+0x250>
 8006d96:	ee18 3a10 	vmov	r3, s16
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af41 	beq.w	8006c2a <_printf_float+0xc2>
 8006da8:	f04f 0800 	mov.w	r8, #0
 8006dac:	f104 091a 	add.w	r9, r4, #26
 8006db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db2:	3b01      	subs	r3, #1
 8006db4:	4543      	cmp	r3, r8
 8006db6:	dc09      	bgt.n	8006dcc <_printf_float+0x264>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	079b      	lsls	r3, r3, #30
 8006dbc:	f100 8105 	bmi.w	8006fca <_printf_float+0x462>
 8006dc0:	68e0      	ldr	r0, [r4, #12]
 8006dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc4:	4298      	cmp	r0, r3
 8006dc6:	bfb8      	it	lt
 8006dc8:	4618      	movlt	r0, r3
 8006dca:	e730      	b.n	8006c2e <_printf_float+0xc6>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	464a      	mov	r2, r9
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af27 	beq.w	8006c2a <_printf_float+0xc2>
 8006ddc:	f108 0801 	add.w	r8, r8, #1
 8006de0:	e7e6      	b.n	8006db0 <_printf_float+0x248>
 8006de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc39      	bgt.n	8006e5c <_printf_float+0x2f4>
 8006de8:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <_printf_float+0x2f0>)
 8006dea:	2301      	movs	r3, #1
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f af19 	beq.w	8006c2a <_printf_float+0xc2>
 8006df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	d102      	bne.n	8006e06 <_printf_float+0x29e>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07d9      	lsls	r1, r3, #31
 8006e04:	d5d8      	bpl.n	8006db8 <_printf_float+0x250>
 8006e06:	ee18 3a10 	vmov	r3, s16
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af09 	beq.w	8006c2a <_printf_float+0xc2>
 8006e18:	f04f 0900 	mov.w	r9, #0
 8006e1c:	f104 0a1a 	add.w	sl, r4, #26
 8006e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e22:	425b      	negs	r3, r3
 8006e24:	454b      	cmp	r3, r9
 8006e26:	dc01      	bgt.n	8006e2c <_printf_float+0x2c4>
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	e792      	b.n	8006d52 <_printf_float+0x1ea>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4652      	mov	r2, sl
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f aef7 	beq.w	8006c2a <_printf_float+0xc2>
 8006e3c:	f109 0901 	add.w	r9, r9, #1
 8006e40:	e7ee      	b.n	8006e20 <_printf_float+0x2b8>
 8006e42:	bf00      	nop
 8006e44:	7fefffff 	.word	0x7fefffff
 8006e48:	080098fc 	.word	0x080098fc
 8006e4c:	08009900 	.word	0x08009900
 8006e50:	08009908 	.word	0x08009908
 8006e54:	08009904 	.word	0x08009904
 8006e58:	0800990c 	.word	0x0800990c
 8006e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bfa8      	it	ge
 8006e64:	461a      	movge	r2, r3
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	4691      	mov	r9, r2
 8006e6a:	dc37      	bgt.n	8006edc <_printf_float+0x374>
 8006e6c:	f04f 0b00 	mov.w	fp, #0
 8006e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e74:	f104 021a 	add.w	r2, r4, #26
 8006e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	eba3 0309 	sub.w	r3, r3, r9
 8006e80:	455b      	cmp	r3, fp
 8006e82:	dc33      	bgt.n	8006eec <_printf_float+0x384>
 8006e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	db3b      	blt.n	8006f04 <_printf_float+0x39c>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07da      	lsls	r2, r3, #31
 8006e90:	d438      	bmi.n	8006f04 <_printf_float+0x39c>
 8006e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e94:	9a05      	ldr	r2, [sp, #20]
 8006e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e98:	1a9a      	subs	r2, r3, r2
 8006e9a:	eba3 0901 	sub.w	r9, r3, r1
 8006e9e:	4591      	cmp	r9, r2
 8006ea0:	bfa8      	it	ge
 8006ea2:	4691      	movge	r9, r2
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	dc35      	bgt.n	8006f16 <_printf_float+0x3ae>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eb2:	f104 0a1a 	add.w	sl, r4, #26
 8006eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	eba3 0309 	sub.w	r3, r3, r9
 8006ec0:	4543      	cmp	r3, r8
 8006ec2:	f77f af79 	ble.w	8006db8 <_printf_float+0x250>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4652      	mov	r2, sl
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f aeaa 	beq.w	8006c2a <_printf_float+0xc2>
 8006ed6:	f108 0801 	add.w	r8, r8, #1
 8006eda:	e7ec      	b.n	8006eb6 <_printf_float+0x34e>
 8006edc:	4613      	mov	r3, r2
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1c0      	bne.n	8006e6c <_printf_float+0x304>
 8006eea:	e69e      	b.n	8006c2a <_printf_float+0xc2>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	9205      	str	r2, [sp, #20]
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f ae97 	beq.w	8006c2a <_printf_float+0xc2>
 8006efc:	9a05      	ldr	r2, [sp, #20]
 8006efe:	f10b 0b01 	add.w	fp, fp, #1
 8006f02:	e7b9      	b.n	8006e78 <_printf_float+0x310>
 8006f04:	ee18 3a10 	vmov	r3, s16
 8006f08:	4652      	mov	r2, sl
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	d1be      	bne.n	8006e92 <_printf_float+0x32a>
 8006f14:	e689      	b.n	8006c2a <_printf_float+0xc2>
 8006f16:	9a05      	ldr	r2, [sp, #20]
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4442      	add	r2, r8
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	d1c1      	bne.n	8006eaa <_printf_float+0x342>
 8006f26:	e680      	b.n	8006c2a <_printf_float+0xc2>
 8006f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f2a:	2a01      	cmp	r2, #1
 8006f2c:	dc01      	bgt.n	8006f32 <_printf_float+0x3ca>
 8006f2e:	07db      	lsls	r3, r3, #31
 8006f30:	d538      	bpl.n	8006fa4 <_printf_float+0x43c>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4642      	mov	r2, r8
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae74 	beq.w	8006c2a <_printf_float+0xc2>
 8006f42:	ee18 3a10 	vmov	r3, s16
 8006f46:	4652      	mov	r2, sl
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	f43f ae6b 	beq.w	8006c2a <_printf_float+0xc2>
 8006f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f7f9 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f60:	b9d8      	cbnz	r0, 8006f9a <_printf_float+0x432>
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	f108 0201 	add.w	r2, r8, #1
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d10e      	bne.n	8006f92 <_printf_float+0x42a>
 8006f74:	e659      	b.n	8006c2a <_printf_float+0xc2>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4652      	mov	r2, sl
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae52 	beq.w	8006c2a <_printf_float+0xc2>
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4543      	cmp	r3, r8
 8006f90:	dcf1      	bgt.n	8006f76 <_printf_float+0x40e>
 8006f92:	464b      	mov	r3, r9
 8006f94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f98:	e6dc      	b.n	8006d54 <_printf_float+0x1ec>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	f104 0a1a 	add.w	sl, r4, #26
 8006fa2:	e7f2      	b.n	8006f8a <_printf_float+0x422>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	e7df      	b.n	8006f6a <_printf_float+0x402>
 8006faa:	2301      	movs	r3, #1
 8006fac:	464a      	mov	r2, r9
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae38 	beq.w	8006c2a <_printf_float+0xc2>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	dcf0      	bgt.n	8006faa <_printf_float+0x442>
 8006fc8:	e6fa      	b.n	8006dc0 <_printf_float+0x258>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0919 	add.w	r9, r4, #25
 8006fd2:	e7f4      	b.n	8006fbe <_printf_float+0x456>

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	68e5      	ldr	r5, [r4, #12]
 800703e:	6832      	ldr	r2, [r6, #0]
 8007040:	f003 0306 	and.w	r3, r3, #6
 8007044:	2b04      	cmp	r3, #4
 8007046:	bf08      	it	eq
 8007048:	1aad      	subeq	r5, r5, r2
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4649      	mov	r1, r9
 8007070:	4638      	mov	r0, r7
 8007072:	47c0      	blx	r8
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	; 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	; 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d8 	beq.w	8007282 <_printf_i+0x1d2>
 80070d2:	2f58      	cmp	r7, #88	; 0x58
 80070d4:	f000 80a3 	beq.w	800721e <_printf_i+0x16e>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	08007269 	.word	0x08007269
 8007120:	0800718d 	.word	0x0800718d
 8007124:	0800724b 	.word	0x0800724b
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	0800728b 	.word	0x0800728b
 8007134:	080070d9 	.word	0x080070d9
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	08007253 	.word	0x08007253
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e0a3      	b.n	80072a4 <_printf_i+0x1f4>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	6829      	ldr	r1, [r5, #0]
 8007160:	0606      	lsls	r6, r0, #24
 8007162:	f101 0304 	add.w	r3, r1, #4
 8007166:	d50a      	bpl.n	800717e <_printf_i+0xce>
 8007168:	680e      	ldr	r6, [r1, #0]
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	2e00      	cmp	r6, #0
 800716e:	da03      	bge.n	8007178 <_printf_i+0xc8>
 8007170:	232d      	movs	r3, #45	; 0x2d
 8007172:	4276      	negs	r6, r6
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	485e      	ldr	r0, [pc, #376]	; (80072f4 <_printf_i+0x244>)
 800717a:	230a      	movs	r3, #10
 800717c:	e019      	b.n	80071b2 <_printf_i+0x102>
 800717e:	680e      	ldr	r6, [r1, #0]
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007186:	bf18      	it	ne
 8007188:	b236      	sxthne	r6, r6
 800718a:	e7ef      	b.n	800716c <_printf_i+0xbc>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	6029      	str	r1, [r5, #0]
 8007194:	0601      	lsls	r1, r0, #24
 8007196:	d501      	bpl.n	800719c <_printf_i+0xec>
 8007198:	681e      	ldr	r6, [r3, #0]
 800719a:	e002      	b.n	80071a2 <_printf_i+0xf2>
 800719c:	0646      	lsls	r6, r0, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0xe8>
 80071a0:	881e      	ldrh	r6, [r3, #0]
 80071a2:	4854      	ldr	r0, [pc, #336]	; (80072f4 <_printf_i+0x244>)
 80071a4:	2f6f      	cmp	r7, #111	; 0x6f
 80071a6:	bf0c      	ite	eq
 80071a8:	2308      	moveq	r3, #8
 80071aa:	230a      	movne	r3, #10
 80071ac:	2100      	movs	r1, #0
 80071ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b2:	6865      	ldr	r5, [r4, #4]
 80071b4:	60a5      	str	r5, [r4, #8]
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	bfa2      	ittt	ge
 80071ba:	6821      	ldrge	r1, [r4, #0]
 80071bc:	f021 0104 	bicge.w	r1, r1, #4
 80071c0:	6021      	strge	r1, [r4, #0]
 80071c2:	b90e      	cbnz	r6, 80071c8 <_printf_i+0x118>
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	d04d      	beq.n	8007264 <_printf_i+0x1b4>
 80071c8:	4615      	mov	r5, r2
 80071ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ce:	fb03 6711 	mls	r7, r3, r1, r6
 80071d2:	5dc7      	ldrb	r7, [r0, r7]
 80071d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d8:	4637      	mov	r7, r6
 80071da:	42bb      	cmp	r3, r7
 80071dc:	460e      	mov	r6, r1
 80071de:	d9f4      	bls.n	80071ca <_printf_i+0x11a>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10b      	bne.n	80071fc <_printf_i+0x14c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	07de      	lsls	r6, r3, #31
 80071e8:	d508      	bpl.n	80071fc <_printf_i+0x14c>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6861      	ldr	r1, [r4, #4]
 80071ee:	4299      	cmp	r1, r3
 80071f0:	bfde      	ittt	le
 80071f2:	2330      	movle	r3, #48	; 0x30
 80071f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071fc:	1b52      	subs	r2, r2, r5
 80071fe:	6122      	str	r2, [r4, #16]
 8007200:	f8cd a000 	str.w	sl, [sp]
 8007204:	464b      	mov	r3, r9
 8007206:	aa03      	add	r2, sp, #12
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff fee2 	bl	8006fd4 <_printf_common>
 8007210:	3001      	adds	r0, #1
 8007212:	d14c      	bne.n	80072ae <_printf_i+0x1fe>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	b004      	add	sp, #16
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	4835      	ldr	r0, [pc, #212]	; (80072f4 <_printf_i+0x244>)
 8007220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f851 6b04 	ldr.w	r6, [r1], #4
 800722c:	6029      	str	r1, [r5, #0]
 800722e:	061d      	lsls	r5, r3, #24
 8007230:	d514      	bpl.n	800725c <_printf_i+0x1ac>
 8007232:	07df      	lsls	r7, r3, #31
 8007234:	bf44      	itt	mi
 8007236:	f043 0320 	orrmi.w	r3, r3, #32
 800723a:	6023      	strmi	r3, [r4, #0]
 800723c:	b91e      	cbnz	r6, 8007246 <_printf_i+0x196>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	f023 0320 	bic.w	r3, r3, #32
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	2310      	movs	r3, #16
 8007248:	e7b0      	b.n	80071ac <_printf_i+0xfc>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2378      	movs	r3, #120	; 0x78
 8007254:	4828      	ldr	r0, [pc, #160]	; (80072f8 <_printf_i+0x248>)
 8007256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800725a:	e7e3      	b.n	8007224 <_printf_i+0x174>
 800725c:	0659      	lsls	r1, r3, #25
 800725e:	bf48      	it	mi
 8007260:	b2b6      	uxthmi	r6, r6
 8007262:	e7e6      	b.n	8007232 <_printf_i+0x182>
 8007264:	4615      	mov	r5, r2
 8007266:	e7bb      	b.n	80071e0 <_printf_i+0x130>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	6826      	ldr	r6, [r4, #0]
 800726c:	6961      	ldr	r1, [r4, #20]
 800726e:	1d18      	adds	r0, r3, #4
 8007270:	6028      	str	r0, [r5, #0]
 8007272:	0635      	lsls	r5, r6, #24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1cc>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1d2>
 800727c:	0670      	lsls	r0, r6, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x1c8>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	4615      	mov	r5, r2
 8007288:	e7ba      	b.n	8007200 <_printf_i+0x150>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	602a      	str	r2, [r5, #0]
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	2100      	movs	r1, #0
 8007296:	4628      	mov	r0, r5
 8007298:	f7f8 ffa2 	bl	80001e0 <memchr>
 800729c:	b108      	cbz	r0, 80072a2 <_printf_i+0x1f2>
 800729e:	1b40      	subs	r0, r0, r5
 80072a0:	6060      	str	r0, [r4, #4]
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	2300      	movs	r3, #0
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ac:	e7a8      	b.n	8007200 <_printf_i+0x150>
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0ab      	beq.n	8007214 <_printf_i+0x164>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	079b      	lsls	r3, r3, #30
 80072c0:	d413      	bmi.n	80072ea <_printf_i+0x23a>
 80072c2:	68e0      	ldr	r0, [r4, #12]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	4298      	cmp	r0, r3
 80072c8:	bfb8      	it	lt
 80072ca:	4618      	movlt	r0, r3
 80072cc:	e7a4      	b.n	8007218 <_printf_i+0x168>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4632      	mov	r2, r6
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	47d0      	blx	sl
 80072d8:	3001      	adds	r0, #1
 80072da:	d09b      	beq.n	8007214 <_printf_i+0x164>
 80072dc:	3501      	adds	r5, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dcf2      	bgt.n	80072ce <_printf_i+0x21e>
 80072e8:	e7eb      	b.n	80072c2 <_printf_i+0x212>
 80072ea:	2500      	movs	r5, #0
 80072ec:	f104 0619 	add.w	r6, r4, #25
 80072f0:	e7f5      	b.n	80072de <_printf_i+0x22e>
 80072f2:	bf00      	nop
 80072f4:	0800990e 	.word	0x0800990e
 80072f8:	0800991f 	.word	0x0800991f

080072fc <siprintf>:
 80072fc:	b40e      	push	{r1, r2, r3}
 80072fe:	b500      	push	{lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	ab1d      	add	r3, sp, #116	; 0x74
 8007304:	9002      	str	r0, [sp, #8]
 8007306:	9006      	str	r0, [sp, #24]
 8007308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800730c:	4809      	ldr	r0, [pc, #36]	; (8007334 <siprintf+0x38>)
 800730e:	9107      	str	r1, [sp, #28]
 8007310:	9104      	str	r1, [sp, #16]
 8007312:	4909      	ldr	r1, [pc, #36]	; (8007338 <siprintf+0x3c>)
 8007314:	f853 2b04 	ldr.w	r2, [r3], #4
 8007318:	9105      	str	r1, [sp, #20]
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	a902      	add	r1, sp, #8
 8007320:	f001 fb78 	bl	8008a14 <_svfiprintf_r>
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	b01c      	add	sp, #112	; 0x70
 800732c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007330:	b003      	add	sp, #12
 8007332:	4770      	bx	lr
 8007334:	20000010 	.word	0x20000010
 8007338:	ffff0208 	.word	0xffff0208

0800733c <quorem>:
 800733c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	6903      	ldr	r3, [r0, #16]
 8007342:	690c      	ldr	r4, [r1, #16]
 8007344:	42a3      	cmp	r3, r4
 8007346:	4607      	mov	r7, r0
 8007348:	f2c0 8081 	blt.w	800744e <quorem+0x112>
 800734c:	3c01      	subs	r4, #1
 800734e:	f101 0814 	add.w	r8, r1, #20
 8007352:	f100 0514 	add.w	r5, r0, #20
 8007356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007364:	3301      	adds	r3, #1
 8007366:	429a      	cmp	r2, r3
 8007368:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800736c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007370:	fbb2 f6f3 	udiv	r6, r2, r3
 8007374:	d331      	bcc.n	80073da <quorem+0x9e>
 8007376:	f04f 0e00 	mov.w	lr, #0
 800737a:	4640      	mov	r0, r8
 800737c:	46ac      	mov	ip, r5
 800737e:	46f2      	mov	sl, lr
 8007380:	f850 2b04 	ldr.w	r2, [r0], #4
 8007384:	b293      	uxth	r3, r2
 8007386:	fb06 e303 	mla	r3, r6, r3, lr
 800738a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800738e:	b29b      	uxth	r3, r3
 8007390:	ebaa 0303 	sub.w	r3, sl, r3
 8007394:	f8dc a000 	ldr.w	sl, [ip]
 8007398:	0c12      	lsrs	r2, r2, #16
 800739a:	fa13 f38a 	uxtah	r3, r3, sl
 800739e:	fb06 e202 	mla	r2, r6, r2, lr
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073aa:	b292      	uxth	r2, r2
 80073ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80073b8:	4581      	cmp	r9, r0
 80073ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073be:	f84c 3b04 	str.w	r3, [ip], #4
 80073c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073c6:	d2db      	bcs.n	8007380 <quorem+0x44>
 80073c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80073cc:	b92b      	cbnz	r3, 80073da <quorem+0x9e>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	429d      	cmp	r5, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	d32e      	bcc.n	8007436 <quorem+0xfa>
 80073d8:	613c      	str	r4, [r7, #16]
 80073da:	4638      	mov	r0, r7
 80073dc:	f001 f8c6 	bl	800856c <__mcmp>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	db24      	blt.n	800742e <quorem+0xf2>
 80073e4:	3601      	adds	r6, #1
 80073e6:	4628      	mov	r0, r5
 80073e8:	f04f 0c00 	mov.w	ip, #0
 80073ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80073f0:	f8d0 e000 	ldr.w	lr, [r0]
 80073f4:	b293      	uxth	r3, r2
 80073f6:	ebac 0303 	sub.w	r3, ip, r3
 80073fa:	0c12      	lsrs	r2, r2, #16
 80073fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007400:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007408:	b29b      	uxth	r3, r3
 800740a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800740e:	45c1      	cmp	r9, r8
 8007410:	f840 3b04 	str.w	r3, [r0], #4
 8007414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007418:	d2e8      	bcs.n	80073ec <quorem+0xb0>
 800741a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800741e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007422:	b922      	cbnz	r2, 800742e <quorem+0xf2>
 8007424:	3b04      	subs	r3, #4
 8007426:	429d      	cmp	r5, r3
 8007428:	461a      	mov	r2, r3
 800742a:	d30a      	bcc.n	8007442 <quorem+0x106>
 800742c:	613c      	str	r4, [r7, #16]
 800742e:	4630      	mov	r0, r6
 8007430:	b003      	add	sp, #12
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	3b04      	subs	r3, #4
 800743a:	2a00      	cmp	r2, #0
 800743c:	d1cc      	bne.n	80073d8 <quorem+0x9c>
 800743e:	3c01      	subs	r4, #1
 8007440:	e7c7      	b.n	80073d2 <quorem+0x96>
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	3b04      	subs	r3, #4
 8007446:	2a00      	cmp	r2, #0
 8007448:	d1f0      	bne.n	800742c <quorem+0xf0>
 800744a:	3c01      	subs	r4, #1
 800744c:	e7eb      	b.n	8007426 <quorem+0xea>
 800744e:	2000      	movs	r0, #0
 8007450:	e7ee      	b.n	8007430 <quorem+0xf4>
 8007452:	0000      	movs	r0, r0
 8007454:	0000      	movs	r0, r0
	...

08007458 <_dtoa_r>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	ed2d 8b04 	vpush	{d8-d9}
 8007460:	ec57 6b10 	vmov	r6, r7, d0
 8007464:	b093      	sub	sp, #76	; 0x4c
 8007466:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007468:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800746c:	9106      	str	r1, [sp, #24]
 800746e:	ee10 aa10 	vmov	sl, s0
 8007472:	4604      	mov	r4, r0
 8007474:	9209      	str	r2, [sp, #36]	; 0x24
 8007476:	930c      	str	r3, [sp, #48]	; 0x30
 8007478:	46bb      	mov	fp, r7
 800747a:	b975      	cbnz	r5, 800749a <_dtoa_r+0x42>
 800747c:	2010      	movs	r0, #16
 800747e:	f000 fddd 	bl	800803c <malloc>
 8007482:	4602      	mov	r2, r0
 8007484:	6260      	str	r0, [r4, #36]	; 0x24
 8007486:	b920      	cbnz	r0, 8007492 <_dtoa_r+0x3a>
 8007488:	4ba7      	ldr	r3, [pc, #668]	; (8007728 <_dtoa_r+0x2d0>)
 800748a:	21ea      	movs	r1, #234	; 0xea
 800748c:	48a7      	ldr	r0, [pc, #668]	; (800772c <_dtoa_r+0x2d4>)
 800748e:	f001 fbd1 	bl	8008c34 <__assert_func>
 8007492:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007496:	6005      	str	r5, [r0, #0]
 8007498:	60c5      	str	r5, [r0, #12]
 800749a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800749c:	6819      	ldr	r1, [r3, #0]
 800749e:	b151      	cbz	r1, 80074b6 <_dtoa_r+0x5e>
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	604a      	str	r2, [r1, #4]
 80074a4:	2301      	movs	r3, #1
 80074a6:	4093      	lsls	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fe1c 	bl	80080e8 <_Bfree>
 80074b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	1e3b      	subs	r3, r7, #0
 80074b8:	bfaa      	itet	ge
 80074ba:	2300      	movge	r3, #0
 80074bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80074c0:	f8c8 3000 	strge.w	r3, [r8]
 80074c4:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <_dtoa_r+0x2d8>)
 80074c6:	bfbc      	itt	lt
 80074c8:	2201      	movlt	r2, #1
 80074ca:	f8c8 2000 	strlt.w	r2, [r8]
 80074ce:	ea33 030b 	bics.w	r3, r3, fp
 80074d2:	d11b      	bne.n	800750c <_dtoa_r+0xb4>
 80074d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074e0:	4333      	orrs	r3, r6
 80074e2:	f000 8592 	beq.w	800800a <_dtoa_r+0xbb2>
 80074e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e8:	b963      	cbnz	r3, 8007504 <_dtoa_r+0xac>
 80074ea:	4b92      	ldr	r3, [pc, #584]	; (8007734 <_dtoa_r+0x2dc>)
 80074ec:	e022      	b.n	8007534 <_dtoa_r+0xdc>
 80074ee:	4b92      	ldr	r3, [pc, #584]	; (8007738 <_dtoa_r+0x2e0>)
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	3308      	adds	r3, #8
 80074f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	9801      	ldr	r0, [sp, #4]
 80074fa:	b013      	add	sp, #76	; 0x4c
 80074fc:	ecbd 8b04 	vpop	{d8-d9}
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007504:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <_dtoa_r+0x2dc>)
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	3303      	adds	r3, #3
 800750a:	e7f3      	b.n	80074f4 <_dtoa_r+0x9c>
 800750c:	2200      	movs	r2, #0
 800750e:	2300      	movs	r3, #0
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	f7f9 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007518:	ec4b ab19 	vmov	d9, sl, fp
 800751c:	4680      	mov	r8, r0
 800751e:	b158      	cbz	r0, 8007538 <_dtoa_r+0xe0>
 8007520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007522:	2301      	movs	r3, #1
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 856b 	beq.w	8008004 <_dtoa_r+0xbac>
 800752e:	4883      	ldr	r0, [pc, #524]	; (800773c <_dtoa_r+0x2e4>)
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	1e43      	subs	r3, r0, #1
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	e7df      	b.n	80074f8 <_dtoa_r+0xa0>
 8007538:	ec4b ab10 	vmov	d0, sl, fp
 800753c:	aa10      	add	r2, sp, #64	; 0x40
 800753e:	a911      	add	r1, sp, #68	; 0x44
 8007540:	4620      	mov	r0, r4
 8007542:	f001 f8b9 	bl	80086b8 <__d2b>
 8007546:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800754a:	ee08 0a10 	vmov	s16, r0
 800754e:	2d00      	cmp	r5, #0
 8007550:	f000 8084 	beq.w	800765c <_dtoa_r+0x204>
 8007554:	ee19 3a90 	vmov	r3, s19
 8007558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800755c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007560:	4656      	mov	r6, sl
 8007562:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800756a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800756e:	4b74      	ldr	r3, [pc, #464]	; (8007740 <_dtoa_r+0x2e8>)
 8007570:	2200      	movs	r2, #0
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f8 fe87 	bl	8000288 <__aeabi_dsub>
 800757a:	a365      	add	r3, pc, #404	; (adr r3, 8007710 <_dtoa_r+0x2b8>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f9 f83a 	bl	80005f8 <__aeabi_dmul>
 8007584:	a364      	add	r3, pc, #400	; (adr r3, 8007718 <_dtoa_r+0x2c0>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f8 fe7f 	bl	800028c <__adddf3>
 800758e:	4606      	mov	r6, r0
 8007590:	4628      	mov	r0, r5
 8007592:	460f      	mov	r7, r1
 8007594:	f7f8 ffc6 	bl	8000524 <__aeabi_i2d>
 8007598:	a361      	add	r3, pc, #388	; (adr r3, 8007720 <_dtoa_r+0x2c8>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f82b 	bl	80005f8 <__aeabi_dmul>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4630      	mov	r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	f7f8 fe6f 	bl	800028c <__adddf3>
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	f7f9 fad1 	bl	8000b58 <__aeabi_d2iz>
 80075b6:	2200      	movs	r2, #0
 80075b8:	9000      	str	r0, [sp, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80075c4:	b150      	cbz	r0, 80075dc <_dtoa_r+0x184>
 80075c6:	9800      	ldr	r0, [sp, #0]
 80075c8:	f7f8 ffac 	bl	8000524 <__aeabi_i2d>
 80075cc:	4632      	mov	r2, r6
 80075ce:	463b      	mov	r3, r7
 80075d0:	f7f9 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80075d4:	b910      	cbnz	r0, 80075dc <_dtoa_r+0x184>
 80075d6:	9b00      	ldr	r3, [sp, #0]
 80075d8:	3b01      	subs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	9b00      	ldr	r3, [sp, #0]
 80075de:	2b16      	cmp	r3, #22
 80075e0:	d85a      	bhi.n	8007698 <_dtoa_r+0x240>
 80075e2:	9a00      	ldr	r2, [sp, #0]
 80075e4:	4b57      	ldr	r3, [pc, #348]	; (8007744 <_dtoa_r+0x2ec>)
 80075e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	ec51 0b19 	vmov	r0, r1, d9
 80075f2:	f7f9 fa73 	bl	8000adc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d050      	beq.n	800769c <_dtoa_r+0x244>
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	930b      	str	r3, [sp, #44]	; 0x2c
 8007604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007606:	1b5d      	subs	r5, r3, r5
 8007608:	1e6b      	subs	r3, r5, #1
 800760a:	9305      	str	r3, [sp, #20]
 800760c:	bf45      	ittet	mi
 800760e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007612:	9304      	strmi	r3, [sp, #16]
 8007614:	2300      	movpl	r3, #0
 8007616:	2300      	movmi	r3, #0
 8007618:	bf4c      	ite	mi
 800761a:	9305      	strmi	r3, [sp, #20]
 800761c:	9304      	strpl	r3, [sp, #16]
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	db3d      	blt.n	80076a0 <_dtoa_r+0x248>
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	9a00      	ldr	r2, [sp, #0]
 8007628:	920a      	str	r2, [sp, #40]	; 0x28
 800762a:	4413      	add	r3, r2
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	2300      	movs	r3, #0
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	9b06      	ldr	r3, [sp, #24]
 8007634:	2b09      	cmp	r3, #9
 8007636:	f200 8089 	bhi.w	800774c <_dtoa_r+0x2f4>
 800763a:	2b05      	cmp	r3, #5
 800763c:	bfc4      	itt	gt
 800763e:	3b04      	subgt	r3, #4
 8007640:	9306      	strgt	r3, [sp, #24]
 8007642:	9b06      	ldr	r3, [sp, #24]
 8007644:	f1a3 0302 	sub.w	r3, r3, #2
 8007648:	bfcc      	ite	gt
 800764a:	2500      	movgt	r5, #0
 800764c:	2501      	movle	r5, #1
 800764e:	2b03      	cmp	r3, #3
 8007650:	f200 8087 	bhi.w	8007762 <_dtoa_r+0x30a>
 8007654:	e8df f003 	tbb	[pc, r3]
 8007658:	59383a2d 	.word	0x59383a2d
 800765c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007660:	441d      	add	r5, r3
 8007662:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007666:	2b20      	cmp	r3, #32
 8007668:	bfc1      	itttt	gt
 800766a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800766e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007672:	fa0b f303 	lslgt.w	r3, fp, r3
 8007676:	fa26 f000 	lsrgt.w	r0, r6, r0
 800767a:	bfda      	itte	le
 800767c:	f1c3 0320 	rsble	r3, r3, #32
 8007680:	fa06 f003 	lslle.w	r0, r6, r3
 8007684:	4318      	orrgt	r0, r3
 8007686:	f7f8 ff3d 	bl	8000504 <__aeabi_ui2d>
 800768a:	2301      	movs	r3, #1
 800768c:	4606      	mov	r6, r0
 800768e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007692:	3d01      	subs	r5, #1
 8007694:	930e      	str	r3, [sp, #56]	; 0x38
 8007696:	e76a      	b.n	800756e <_dtoa_r+0x116>
 8007698:	2301      	movs	r3, #1
 800769a:	e7b2      	b.n	8007602 <_dtoa_r+0x1aa>
 800769c:	900b      	str	r0, [sp, #44]	; 0x2c
 800769e:	e7b1      	b.n	8007604 <_dtoa_r+0x1ac>
 80076a0:	9b04      	ldr	r3, [sp, #16]
 80076a2:	9a00      	ldr	r2, [sp, #0]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	4253      	negs	r3, r2
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	2300      	movs	r3, #0
 80076ae:	930a      	str	r3, [sp, #40]	; 0x28
 80076b0:	e7bf      	b.n	8007632 <_dtoa_r+0x1da>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9308      	str	r3, [sp, #32]
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc55      	bgt.n	8007768 <_dtoa_r+0x310>
 80076bc:	2301      	movs	r3, #1
 80076be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076c2:	461a      	mov	r2, r3
 80076c4:	9209      	str	r2, [sp, #36]	; 0x24
 80076c6:	e00c      	b.n	80076e2 <_dtoa_r+0x28a>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f3      	b.n	80076b4 <_dtoa_r+0x25c>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d0:	9308      	str	r3, [sp, #32]
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	9302      	str	r3, [sp, #8]
 80076d8:	3301      	adds	r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	bfb8      	it	lt
 80076e0:	2301      	movlt	r3, #1
 80076e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076e4:	2200      	movs	r2, #0
 80076e6:	6042      	str	r2, [r0, #4]
 80076e8:	2204      	movs	r2, #4
 80076ea:	f102 0614 	add.w	r6, r2, #20
 80076ee:	429e      	cmp	r6, r3
 80076f0:	6841      	ldr	r1, [r0, #4]
 80076f2:	d93d      	bls.n	8007770 <_dtoa_r+0x318>
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 fcb7 	bl	8008068 <_Balloc>
 80076fa:	9001      	str	r0, [sp, #4]
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d13b      	bne.n	8007778 <_dtoa_r+0x320>
 8007700:	4b11      	ldr	r3, [pc, #68]	; (8007748 <_dtoa_r+0x2f0>)
 8007702:	4602      	mov	r2, r0
 8007704:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007708:	e6c0      	b.n	800748c <_dtoa_r+0x34>
 800770a:	2301      	movs	r3, #1
 800770c:	e7df      	b.n	80076ce <_dtoa_r+0x276>
 800770e:	bf00      	nop
 8007710:	636f4361 	.word	0x636f4361
 8007714:	3fd287a7 	.word	0x3fd287a7
 8007718:	8b60c8b3 	.word	0x8b60c8b3
 800771c:	3fc68a28 	.word	0x3fc68a28
 8007720:	509f79fb 	.word	0x509f79fb
 8007724:	3fd34413 	.word	0x3fd34413
 8007728:	0800993d 	.word	0x0800993d
 800772c:	08009954 	.word	0x08009954
 8007730:	7ff00000 	.word	0x7ff00000
 8007734:	08009939 	.word	0x08009939
 8007738:	08009930 	.word	0x08009930
 800773c:	0800990d 	.word	0x0800990d
 8007740:	3ff80000 	.word	0x3ff80000
 8007744:	08009a48 	.word	0x08009a48
 8007748:	080099af 	.word	0x080099af
 800774c:	2501      	movs	r5, #1
 800774e:	2300      	movs	r3, #0
 8007750:	9306      	str	r3, [sp, #24]
 8007752:	9508      	str	r5, [sp, #32]
 8007754:	f04f 33ff 	mov.w	r3, #4294967295
 8007758:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	2312      	movs	r3, #18
 8007760:	e7b0      	b.n	80076c4 <_dtoa_r+0x26c>
 8007762:	2301      	movs	r3, #1
 8007764:	9308      	str	r3, [sp, #32]
 8007766:	e7f5      	b.n	8007754 <_dtoa_r+0x2fc>
 8007768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800776e:	e7b8      	b.n	80076e2 <_dtoa_r+0x28a>
 8007770:	3101      	adds	r1, #1
 8007772:	6041      	str	r1, [r0, #4]
 8007774:	0052      	lsls	r2, r2, #1
 8007776:	e7b8      	b.n	80076ea <_dtoa_r+0x292>
 8007778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777a:	9a01      	ldr	r2, [sp, #4]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	2b0e      	cmp	r3, #14
 8007782:	f200 809d 	bhi.w	80078c0 <_dtoa_r+0x468>
 8007786:	2d00      	cmp	r5, #0
 8007788:	f000 809a 	beq.w	80078c0 <_dtoa_r+0x468>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd32      	ble.n	80077f8 <_dtoa_r+0x3a0>
 8007792:	4ab7      	ldr	r2, [pc, #732]	; (8007a70 <_dtoa_r+0x618>)
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800779c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	05d8      	lsls	r0, r3, #23
 80077a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077a8:	d516      	bpl.n	80077d8 <_dtoa_r+0x380>
 80077aa:	4bb2      	ldr	r3, [pc, #712]	; (8007a74 <_dtoa_r+0x61c>)
 80077ac:	ec51 0b19 	vmov	r0, r1, d9
 80077b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077b4:	f7f9 f84a 	bl	800084c <__aeabi_ddiv>
 80077b8:	f007 070f 	and.w	r7, r7, #15
 80077bc:	4682      	mov	sl, r0
 80077be:	468b      	mov	fp, r1
 80077c0:	2503      	movs	r5, #3
 80077c2:	4eac      	ldr	r6, [pc, #688]	; (8007a74 <_dtoa_r+0x61c>)
 80077c4:	b957      	cbnz	r7, 80077dc <_dtoa_r+0x384>
 80077c6:	4642      	mov	r2, r8
 80077c8:	464b      	mov	r3, r9
 80077ca:	4650      	mov	r0, sl
 80077cc:	4659      	mov	r1, fp
 80077ce:	f7f9 f83d 	bl	800084c <__aeabi_ddiv>
 80077d2:	4682      	mov	sl, r0
 80077d4:	468b      	mov	fp, r1
 80077d6:	e028      	b.n	800782a <_dtoa_r+0x3d2>
 80077d8:	2502      	movs	r5, #2
 80077da:	e7f2      	b.n	80077c2 <_dtoa_r+0x36a>
 80077dc:	07f9      	lsls	r1, r7, #31
 80077de:	d508      	bpl.n	80077f2 <_dtoa_r+0x39a>
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077e8:	f7f8 ff06 	bl	80005f8 <__aeabi_dmul>
 80077ec:	3501      	adds	r5, #1
 80077ee:	4680      	mov	r8, r0
 80077f0:	4689      	mov	r9, r1
 80077f2:	107f      	asrs	r7, r7, #1
 80077f4:	3608      	adds	r6, #8
 80077f6:	e7e5      	b.n	80077c4 <_dtoa_r+0x36c>
 80077f8:	f000 809b 	beq.w	8007932 <_dtoa_r+0x4da>
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	4f9d      	ldr	r7, [pc, #628]	; (8007a74 <_dtoa_r+0x61c>)
 8007800:	425e      	negs	r6, r3
 8007802:	4b9b      	ldr	r3, [pc, #620]	; (8007a70 <_dtoa_r+0x618>)
 8007804:	f006 020f 	and.w	r2, r6, #15
 8007808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	ec51 0b19 	vmov	r0, r1, d9
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	1136      	asrs	r6, r6, #4
 800781a:	4682      	mov	sl, r0
 800781c:	468b      	mov	fp, r1
 800781e:	2300      	movs	r3, #0
 8007820:	2502      	movs	r5, #2
 8007822:	2e00      	cmp	r6, #0
 8007824:	d17a      	bne.n	800791c <_dtoa_r+0x4c4>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1d3      	bne.n	80077d2 <_dtoa_r+0x37a>
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8082 	beq.w	8007936 <_dtoa_r+0x4de>
 8007832:	4b91      	ldr	r3, [pc, #580]	; (8007a78 <_dtoa_r+0x620>)
 8007834:	2200      	movs	r2, #0
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	f7f9 f94f 	bl	8000adc <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d079      	beq.n	8007936 <_dtoa_r+0x4de>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d076      	beq.n	8007936 <_dtoa_r+0x4de>
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd36      	ble.n	80078bc <_dtoa_r+0x464>
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	4650      	mov	r0, sl
 8007852:	4659      	mov	r1, fp
 8007854:	1e5f      	subs	r7, r3, #1
 8007856:	2200      	movs	r2, #0
 8007858:	4b88      	ldr	r3, [pc, #544]	; (8007a7c <_dtoa_r+0x624>)
 800785a:	f7f8 fecd 	bl	80005f8 <__aeabi_dmul>
 800785e:	9e02      	ldr	r6, [sp, #8]
 8007860:	4682      	mov	sl, r0
 8007862:	468b      	mov	fp, r1
 8007864:	3501      	adds	r5, #1
 8007866:	4628      	mov	r0, r5
 8007868:	f7f8 fe5c 	bl	8000524 <__aeabi_i2d>
 800786c:	4652      	mov	r2, sl
 800786e:	465b      	mov	r3, fp
 8007870:	f7f8 fec2 	bl	80005f8 <__aeabi_dmul>
 8007874:	4b82      	ldr	r3, [pc, #520]	; (8007a80 <_dtoa_r+0x628>)
 8007876:	2200      	movs	r2, #0
 8007878:	f7f8 fd08 	bl	800028c <__adddf3>
 800787c:	46d0      	mov	r8, sl
 800787e:	46d9      	mov	r9, fp
 8007880:	4682      	mov	sl, r0
 8007882:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007886:	2e00      	cmp	r6, #0
 8007888:	d158      	bne.n	800793c <_dtoa_r+0x4e4>
 800788a:	4b7e      	ldr	r3, [pc, #504]	; (8007a84 <_dtoa_r+0x62c>)
 800788c:	2200      	movs	r2, #0
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f8 fcf9 	bl	8000288 <__aeabi_dsub>
 8007896:	4652      	mov	r2, sl
 8007898:	465b      	mov	r3, fp
 800789a:	4680      	mov	r8, r0
 800789c:	4689      	mov	r9, r1
 800789e:	f7f9 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f040 8295 	bne.w	8007dd2 <_dtoa_r+0x97a>
 80078a8:	4652      	mov	r2, sl
 80078aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f9 f913 	bl	8000adc <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f040 8289 	bne.w	8007dce <_dtoa_r+0x976>
 80078bc:	ec5b ab19 	vmov	sl, fp, d9
 80078c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f2c0 8148 	blt.w	8007b58 <_dtoa_r+0x700>
 80078c8:	9a00      	ldr	r2, [sp, #0]
 80078ca:	2a0e      	cmp	r2, #14
 80078cc:	f300 8144 	bgt.w	8007b58 <_dtoa_r+0x700>
 80078d0:	4b67      	ldr	r3, [pc, #412]	; (8007a70 <_dtoa_r+0x618>)
 80078d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f280 80d5 	bge.w	8007a8c <_dtoa_r+0x634>
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f300 80d1 	bgt.w	8007a8c <_dtoa_r+0x634>
 80078ea:	f040 826f 	bne.w	8007dcc <_dtoa_r+0x974>
 80078ee:	4b65      	ldr	r3, [pc, #404]	; (8007a84 <_dtoa_r+0x62c>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fe7f 	bl	80005f8 <__aeabi_dmul>
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	f7f9 f901 	bl	8000b04 <__aeabi_dcmpge>
 8007902:	9e03      	ldr	r6, [sp, #12]
 8007904:	4637      	mov	r7, r6
 8007906:	2800      	cmp	r0, #0
 8007908:	f040 8245 	bne.w	8007d96 <_dtoa_r+0x93e>
 800790c:	9d01      	ldr	r5, [sp, #4]
 800790e:	2331      	movs	r3, #49	; 0x31
 8007910:	f805 3b01 	strb.w	r3, [r5], #1
 8007914:	9b00      	ldr	r3, [sp, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	e240      	b.n	8007d9e <_dtoa_r+0x946>
 800791c:	07f2      	lsls	r2, r6, #31
 800791e:	d505      	bpl.n	800792c <_dtoa_r+0x4d4>
 8007920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007924:	f7f8 fe68 	bl	80005f8 <__aeabi_dmul>
 8007928:	3501      	adds	r5, #1
 800792a:	2301      	movs	r3, #1
 800792c:	1076      	asrs	r6, r6, #1
 800792e:	3708      	adds	r7, #8
 8007930:	e777      	b.n	8007822 <_dtoa_r+0x3ca>
 8007932:	2502      	movs	r5, #2
 8007934:	e779      	b.n	800782a <_dtoa_r+0x3d2>
 8007936:	9f00      	ldr	r7, [sp, #0]
 8007938:	9e03      	ldr	r6, [sp, #12]
 800793a:	e794      	b.n	8007866 <_dtoa_r+0x40e>
 800793c:	9901      	ldr	r1, [sp, #4]
 800793e:	4b4c      	ldr	r3, [pc, #304]	; (8007a70 <_dtoa_r+0x618>)
 8007940:	4431      	add	r1, r6
 8007942:	910d      	str	r1, [sp, #52]	; 0x34
 8007944:	9908      	ldr	r1, [sp, #32]
 8007946:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800794a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800794e:	2900      	cmp	r1, #0
 8007950:	d043      	beq.n	80079da <_dtoa_r+0x582>
 8007952:	494d      	ldr	r1, [pc, #308]	; (8007a88 <_dtoa_r+0x630>)
 8007954:	2000      	movs	r0, #0
 8007956:	f7f8 ff79 	bl	800084c <__aeabi_ddiv>
 800795a:	4652      	mov	r2, sl
 800795c:	465b      	mov	r3, fp
 800795e:	f7f8 fc93 	bl	8000288 <__aeabi_dsub>
 8007962:	9d01      	ldr	r5, [sp, #4]
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	4649      	mov	r1, r9
 800796a:	4640      	mov	r0, r8
 800796c:	f7f9 f8f4 	bl	8000b58 <__aeabi_d2iz>
 8007970:	4606      	mov	r6, r0
 8007972:	f7f8 fdd7 	bl	8000524 <__aeabi_i2d>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4640      	mov	r0, r8
 800797c:	4649      	mov	r1, r9
 800797e:	f7f8 fc83 	bl	8000288 <__aeabi_dsub>
 8007982:	3630      	adds	r6, #48	; 0x30
 8007984:	f805 6b01 	strb.w	r6, [r5], #1
 8007988:	4652      	mov	r2, sl
 800798a:	465b      	mov	r3, fp
 800798c:	4680      	mov	r8, r0
 800798e:	4689      	mov	r9, r1
 8007990:	f7f9 f8a4 	bl	8000adc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	d163      	bne.n	8007a60 <_dtoa_r+0x608>
 8007998:	4642      	mov	r2, r8
 800799a:	464b      	mov	r3, r9
 800799c:	4936      	ldr	r1, [pc, #216]	; (8007a78 <_dtoa_r+0x620>)
 800799e:	2000      	movs	r0, #0
 80079a0:	f7f8 fc72 	bl	8000288 <__aeabi_dsub>
 80079a4:	4652      	mov	r2, sl
 80079a6:	465b      	mov	r3, fp
 80079a8:	f7f9 f898 	bl	8000adc <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f040 80b5 	bne.w	8007b1c <_dtoa_r+0x6c4>
 80079b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b4:	429d      	cmp	r5, r3
 80079b6:	d081      	beq.n	80078bc <_dtoa_r+0x464>
 80079b8:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <_dtoa_r+0x624>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7f8 fe1a 	bl	80005f8 <__aeabi_dmul>
 80079c4:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <_dtoa_r+0x624>)
 80079c6:	4682      	mov	sl, r0
 80079c8:	468b      	mov	fp, r1
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	2200      	movs	r2, #0
 80079d0:	f7f8 fe12 	bl	80005f8 <__aeabi_dmul>
 80079d4:	4680      	mov	r8, r0
 80079d6:	4689      	mov	r9, r1
 80079d8:	e7c6      	b.n	8007968 <_dtoa_r+0x510>
 80079da:	4650      	mov	r0, sl
 80079dc:	4659      	mov	r1, fp
 80079de:	f7f8 fe0b 	bl	80005f8 <__aeabi_dmul>
 80079e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e4:	9d01      	ldr	r5, [sp, #4]
 80079e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079e8:	4682      	mov	sl, r0
 80079ea:	468b      	mov	fp, r1
 80079ec:	4649      	mov	r1, r9
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7f9 f8b2 	bl	8000b58 <__aeabi_d2iz>
 80079f4:	4606      	mov	r6, r0
 80079f6:	f7f8 fd95 	bl	8000524 <__aeabi_i2d>
 80079fa:	3630      	adds	r6, #48	; 0x30
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f8 fc40 	bl	8000288 <__aeabi_dsub>
 8007a08:	f805 6b01 	strb.w	r6, [r5], #1
 8007a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	4680      	mov	r8, r0
 8007a12:	4689      	mov	r9, r1
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	d124      	bne.n	8007a64 <_dtoa_r+0x60c>
 8007a1a:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <_dtoa_r+0x630>)
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	4659      	mov	r1, fp
 8007a20:	f7f8 fc34 	bl	800028c <__adddf3>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f9 f874 	bl	8000b18 <__aeabi_dcmpgt>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d173      	bne.n	8007b1c <_dtoa_r+0x6c4>
 8007a34:	4652      	mov	r2, sl
 8007a36:	465b      	mov	r3, fp
 8007a38:	4913      	ldr	r1, [pc, #76]	; (8007a88 <_dtoa_r+0x630>)
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	f7f8 fc24 	bl	8000288 <__aeabi_dsub>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4640      	mov	r0, r8
 8007a46:	4649      	mov	r1, r9
 8007a48:	f7f9 f848 	bl	8000adc <__aeabi_dcmplt>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f af35 	beq.w	80078bc <_dtoa_r+0x464>
 8007a52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a54:	1e6b      	subs	r3, r5, #1
 8007a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a5c:	2b30      	cmp	r3, #48	; 0x30
 8007a5e:	d0f8      	beq.n	8007a52 <_dtoa_r+0x5fa>
 8007a60:	9700      	str	r7, [sp, #0]
 8007a62:	e049      	b.n	8007af8 <_dtoa_r+0x6a0>
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <_dtoa_r+0x624>)
 8007a66:	f7f8 fdc7 	bl	80005f8 <__aeabi_dmul>
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	4689      	mov	r9, r1
 8007a6e:	e7bd      	b.n	80079ec <_dtoa_r+0x594>
 8007a70:	08009a48 	.word	0x08009a48
 8007a74:	08009a20 	.word	0x08009a20
 8007a78:	3ff00000 	.word	0x3ff00000
 8007a7c:	40240000 	.word	0x40240000
 8007a80:	401c0000 	.word	0x401c0000
 8007a84:	40140000 	.word	0x40140000
 8007a88:	3fe00000 	.word	0x3fe00000
 8007a8c:	9d01      	ldr	r5, [sp, #4]
 8007a8e:	4656      	mov	r6, sl
 8007a90:	465f      	mov	r7, fp
 8007a92:	4642      	mov	r2, r8
 8007a94:	464b      	mov	r3, r9
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fed7 	bl	800084c <__aeabi_ddiv>
 8007a9e:	f7f9 f85b 	bl	8000b58 <__aeabi_d2iz>
 8007aa2:	4682      	mov	sl, r0
 8007aa4:	f7f8 fd3e 	bl	8000524 <__aeabi_i2d>
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	f7f8 fda4 	bl	80005f8 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007abc:	f7f8 fbe4 	bl	8000288 <__aeabi_dsub>
 8007ac0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ac4:	9e01      	ldr	r6, [sp, #4]
 8007ac6:	9f03      	ldr	r7, [sp, #12]
 8007ac8:	1bae      	subs	r6, r5, r6
 8007aca:	42b7      	cmp	r7, r6
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	d135      	bne.n	8007b3e <_dtoa_r+0x6e6>
 8007ad2:	f7f8 fbdb 	bl	800028c <__adddf3>
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	464b      	mov	r3, r9
 8007ada:	4606      	mov	r6, r0
 8007adc:	460f      	mov	r7, r1
 8007ade:	f7f9 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ae2:	b9d0      	cbnz	r0, 8007b1a <_dtoa_r+0x6c2>
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af0:	b110      	cbz	r0, 8007af8 <_dtoa_r+0x6a0>
 8007af2:	f01a 0f01 	tst.w	sl, #1
 8007af6:	d110      	bne.n	8007b1a <_dtoa_r+0x6c2>
 8007af8:	4620      	mov	r0, r4
 8007afa:	ee18 1a10 	vmov	r1, s16
 8007afe:	f000 faf3 	bl	80080e8 <_Bfree>
 8007b02:	2300      	movs	r3, #0
 8007b04:	9800      	ldr	r0, [sp, #0]
 8007b06:	702b      	strb	r3, [r5, #0]
 8007b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	6018      	str	r0, [r3, #0]
 8007b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f43f acf1 	beq.w	80074f8 <_dtoa_r+0xa0>
 8007b16:	601d      	str	r5, [r3, #0]
 8007b18:	e4ee      	b.n	80074f8 <_dtoa_r+0xa0>
 8007b1a:	9f00      	ldr	r7, [sp, #0]
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	461d      	mov	r5, r3
 8007b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b24:	2a39      	cmp	r2, #57	; 0x39
 8007b26:	d106      	bne.n	8007b36 <_dtoa_r+0x6de>
 8007b28:	9a01      	ldr	r2, [sp, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d1f7      	bne.n	8007b1e <_dtoa_r+0x6c6>
 8007b2e:	9901      	ldr	r1, [sp, #4]
 8007b30:	2230      	movs	r2, #48	; 0x30
 8007b32:	3701      	adds	r7, #1
 8007b34:	700a      	strb	r2, [r1, #0]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	3201      	adds	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e790      	b.n	8007a60 <_dtoa_r+0x608>
 8007b3e:	4ba6      	ldr	r3, [pc, #664]	; (8007dd8 <_dtoa_r+0x980>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	2200      	movs	r2, #0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	f7f8 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d09d      	beq.n	8007a92 <_dtoa_r+0x63a>
 8007b56:	e7cf      	b.n	8007af8 <_dtoa_r+0x6a0>
 8007b58:	9a08      	ldr	r2, [sp, #32]
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	f000 80d7 	beq.w	8007d0e <_dtoa_r+0x8b6>
 8007b60:	9a06      	ldr	r2, [sp, #24]
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	f300 80ba 	bgt.w	8007cdc <_dtoa_r+0x884>
 8007b68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	f000 80b2 	beq.w	8007cd4 <_dtoa_r+0x87c>
 8007b70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b74:	9e07      	ldr	r6, [sp, #28]
 8007b76:	9d04      	ldr	r5, [sp, #16]
 8007b78:	9a04      	ldr	r2, [sp, #16]
 8007b7a:	441a      	add	r2, r3
 8007b7c:	9204      	str	r2, [sp, #16]
 8007b7e:	9a05      	ldr	r2, [sp, #20]
 8007b80:	2101      	movs	r1, #1
 8007b82:	441a      	add	r2, r3
 8007b84:	4620      	mov	r0, r4
 8007b86:	9205      	str	r2, [sp, #20]
 8007b88:	f000 fb66 	bl	8008258 <__i2b>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	dd0c      	ble.n	8007bac <_dtoa_r+0x754>
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dd09      	ble.n	8007bac <_dtoa_r+0x754>
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	9a04      	ldr	r2, [sp, #16]
 8007b9c:	bfa8      	it	ge
 8007b9e:	462b      	movge	r3, r5
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	9204      	str	r2, [sp, #16]
 8007ba4:	9a05      	ldr	r2, [sp, #20]
 8007ba6:	1aed      	subs	r5, r5, r3
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	b31b      	cbz	r3, 8007bf8 <_dtoa_r+0x7a0>
 8007bb0:	9b08      	ldr	r3, [sp, #32]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80af 	beq.w	8007d16 <_dtoa_r+0x8be>
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	dd13      	ble.n	8007be4 <_dtoa_r+0x78c>
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fc09 	bl	80083d8 <__pow5mult>
 8007bc6:	ee18 2a10 	vmov	r2, s16
 8007bca:	4601      	mov	r1, r0
 8007bcc:	4607      	mov	r7, r0
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fb58 	bl	8008284 <__multiply>
 8007bd4:	ee18 1a10 	vmov	r1, s16
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fa84 	bl	80080e8 <_Bfree>
 8007be0:	ee08 8a10 	vmov	s16, r8
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	1b9a      	subs	r2, r3, r6
 8007be8:	d006      	beq.n	8007bf8 <_dtoa_r+0x7a0>
 8007bea:	ee18 1a10 	vmov	r1, s16
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fbf2 	bl	80083d8 <__pow5mult>
 8007bf4:	ee08 0a10 	vmov	s16, r0
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb2c 	bl	8008258 <__i2b>
 8007c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	4606      	mov	r6, r0
 8007c06:	f340 8088 	ble.w	8007d1a <_dtoa_r+0x8c2>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fbe2 	bl	80083d8 <__pow5mult>
 8007c14:	9b06      	ldr	r3, [sp, #24]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	4606      	mov	r6, r0
 8007c1a:	f340 8081 	ble.w	8007d20 <_dtoa_r+0x8c8>
 8007c1e:	f04f 0800 	mov.w	r8, #0
 8007c22:	6933      	ldr	r3, [r6, #16]
 8007c24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c28:	6918      	ldr	r0, [r3, #16]
 8007c2a:	f000 fac5 	bl	80081b8 <__hi0bits>
 8007c2e:	f1c0 0020 	rsb	r0, r0, #32
 8007c32:	9b05      	ldr	r3, [sp, #20]
 8007c34:	4418      	add	r0, r3
 8007c36:	f010 001f 	ands.w	r0, r0, #31
 8007c3a:	f000 8092 	beq.w	8007d62 <_dtoa_r+0x90a>
 8007c3e:	f1c0 0320 	rsb	r3, r0, #32
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	f340 808a 	ble.w	8007d5c <_dtoa_r+0x904>
 8007c48:	f1c0 001c 	rsb	r0, r0, #28
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4403      	add	r3, r0
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	9b05      	ldr	r3, [sp, #20]
 8007c54:	4403      	add	r3, r0
 8007c56:	4405      	add	r5, r0
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dd07      	ble.n	8007c70 <_dtoa_r+0x818>
 8007c60:	ee18 1a10 	vmov	r1, s16
 8007c64:	461a      	mov	r2, r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fc10 	bl	800848c <__lshift>
 8007c6c:	ee08 0a10 	vmov	s16, r0
 8007c70:	9b05      	ldr	r3, [sp, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x82a>
 8007c76:	4631      	mov	r1, r6
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fc06 	bl	800848c <__lshift>
 8007c80:	4606      	mov	r6, r0
 8007c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d06e      	beq.n	8007d66 <_dtoa_r+0x90e>
 8007c88:	ee18 0a10 	vmov	r0, s16
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	f000 fc6d 	bl	800856c <__mcmp>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	da67      	bge.n	8007d66 <_dtoa_r+0x90e>
 8007c96:	9b00      	ldr	r3, [sp, #0]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	ee18 1a10 	vmov	r1, s16
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fa41 	bl	800812c <__multadd>
 8007caa:	9b08      	ldr	r3, [sp, #32]
 8007cac:	ee08 0a10 	vmov	s16, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 81b1 	beq.w	8008018 <_dtoa_r+0xbc0>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4639      	mov	r1, r7
 8007cba:	220a      	movs	r2, #10
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fa35 	bl	800812c <__multadd>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	f300 808e 	bgt.w	8007de8 <_dtoa_r+0x990>
 8007ccc:	9b06      	ldr	r3, [sp, #24]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dc51      	bgt.n	8007d76 <_dtoa_r+0x91e>
 8007cd2:	e089      	b.n	8007de8 <_dtoa_r+0x990>
 8007cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cda:	e74b      	b.n	8007b74 <_dtoa_r+0x71c>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1e5e      	subs	r6, r3, #1
 8007ce0:	9b07      	ldr	r3, [sp, #28]
 8007ce2:	42b3      	cmp	r3, r6
 8007ce4:	bfbf      	itttt	lt
 8007ce6:	9b07      	ldrlt	r3, [sp, #28]
 8007ce8:	9607      	strlt	r6, [sp, #28]
 8007cea:	1af2      	sublt	r2, r6, r3
 8007cec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cee:	bfb6      	itet	lt
 8007cf0:	189b      	addlt	r3, r3, r2
 8007cf2:	1b9e      	subge	r6, r3, r6
 8007cf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	bfb8      	it	lt
 8007cfa:	2600      	movlt	r6, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfb7      	itett	lt
 8007d00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d08:	1a9d      	sublt	r5, r3, r2
 8007d0a:	2300      	movlt	r3, #0
 8007d0c:	e734      	b.n	8007b78 <_dtoa_r+0x720>
 8007d0e:	9e07      	ldr	r6, [sp, #28]
 8007d10:	9d04      	ldr	r5, [sp, #16]
 8007d12:	9f08      	ldr	r7, [sp, #32]
 8007d14:	e73b      	b.n	8007b8e <_dtoa_r+0x736>
 8007d16:	9a07      	ldr	r2, [sp, #28]
 8007d18:	e767      	b.n	8007bea <_dtoa_r+0x792>
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	dc18      	bgt.n	8007d52 <_dtoa_r+0x8fa>
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	d115      	bne.n	8007d52 <_dtoa_r+0x8fa>
 8007d26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d2a:	b993      	cbnz	r3, 8007d52 <_dtoa_r+0x8fa>
 8007d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	051b      	lsls	r3, r3, #20
 8007d34:	b183      	cbz	r3, 8007d58 <_dtoa_r+0x900>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	f04f 0801 	mov.w	r8, #1
 8007d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f47f af6a 	bne.w	8007c22 <_dtoa_r+0x7ca>
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e76f      	b.n	8007c32 <_dtoa_r+0x7da>
 8007d52:	f04f 0800 	mov.w	r8, #0
 8007d56:	e7f6      	b.n	8007d46 <_dtoa_r+0x8ee>
 8007d58:	4698      	mov	r8, r3
 8007d5a:	e7f4      	b.n	8007d46 <_dtoa_r+0x8ee>
 8007d5c:	f43f af7d 	beq.w	8007c5a <_dtoa_r+0x802>
 8007d60:	4618      	mov	r0, r3
 8007d62:	301c      	adds	r0, #28
 8007d64:	e772      	b.n	8007c4c <_dtoa_r+0x7f4>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc37      	bgt.n	8007ddc <_dtoa_r+0x984>
 8007d6c:	9b06      	ldr	r3, [sp, #24]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	dd34      	ble.n	8007ddc <_dtoa_r+0x984>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	9b02      	ldr	r3, [sp, #8]
 8007d78:	b96b      	cbnz	r3, 8007d96 <_dtoa_r+0x93e>
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f9d4 	bl	800812c <__multadd>
 8007d84:	4601      	mov	r1, r0
 8007d86:	4606      	mov	r6, r0
 8007d88:	ee18 0a10 	vmov	r0, s16
 8007d8c:	f000 fbee 	bl	800856c <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f73f adbb 	bgt.w	800790c <_dtoa_r+0x4b4>
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	9d01      	ldr	r5, [sp, #4]
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	f04f 0800 	mov.w	r8, #0
 8007da2:	4631      	mov	r1, r6
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 f99f 	bl	80080e8 <_Bfree>
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	f43f aea4 	beq.w	8007af8 <_dtoa_r+0x6a0>
 8007db0:	f1b8 0f00 	cmp.w	r8, #0
 8007db4:	d005      	beq.n	8007dc2 <_dtoa_r+0x96a>
 8007db6:	45b8      	cmp	r8, r7
 8007db8:	d003      	beq.n	8007dc2 <_dtoa_r+0x96a>
 8007dba:	4641      	mov	r1, r8
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 f993 	bl	80080e8 <_Bfree>
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 f98f 	bl	80080e8 <_Bfree>
 8007dca:	e695      	b.n	8007af8 <_dtoa_r+0x6a0>
 8007dcc:	2600      	movs	r6, #0
 8007dce:	4637      	mov	r7, r6
 8007dd0:	e7e1      	b.n	8007d96 <_dtoa_r+0x93e>
 8007dd2:	9700      	str	r7, [sp, #0]
 8007dd4:	4637      	mov	r7, r6
 8007dd6:	e599      	b.n	800790c <_dtoa_r+0x4b4>
 8007dd8:	40240000 	.word	0x40240000
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80ca 	beq.w	8007f78 <_dtoa_r+0xb20>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	9302      	str	r3, [sp, #8]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	dd05      	ble.n	8007df8 <_dtoa_r+0x9a0>
 8007dec:	4639      	mov	r1, r7
 8007dee:	462a      	mov	r2, r5
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fb4b 	bl	800848c <__lshift>
 8007df6:	4607      	mov	r7, r0
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	d05b      	beq.n	8007eb6 <_dtoa_r+0xa5e>
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 f931 	bl	8008068 <_Balloc>
 8007e06:	4605      	mov	r5, r0
 8007e08:	b928      	cbnz	r0, 8007e16 <_dtoa_r+0x9be>
 8007e0a:	4b87      	ldr	r3, [pc, #540]	; (8008028 <_dtoa_r+0xbd0>)
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e12:	f7ff bb3b 	b.w	800748c <_dtoa_r+0x34>
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	3202      	adds	r2, #2
 8007e1a:	0092      	lsls	r2, r2, #2
 8007e1c:	f107 010c 	add.w	r1, r7, #12
 8007e20:	300c      	adds	r0, #12
 8007e22:	f000 f913 	bl	800804c <memcpy>
 8007e26:	2201      	movs	r2, #1
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fb2e 	bl	800848c <__lshift>
 8007e30:	9b01      	ldr	r3, [sp, #4]
 8007e32:	f103 0901 	add.w	r9, r3, #1
 8007e36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f00a 0301 	and.w	r3, sl, #1
 8007e42:	46b8      	mov	r8, r7
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	4607      	mov	r7, r0
 8007e48:	4631      	mov	r1, r6
 8007e4a:	ee18 0a10 	vmov	r0, s16
 8007e4e:	f7ff fa75 	bl	800733c <quorem>
 8007e52:	4641      	mov	r1, r8
 8007e54:	9002      	str	r0, [sp, #8]
 8007e56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e5a:	ee18 0a10 	vmov	r0, s16
 8007e5e:	f000 fb85 	bl	800856c <__mcmp>
 8007e62:	463a      	mov	r2, r7
 8007e64:	9003      	str	r0, [sp, #12]
 8007e66:	4631      	mov	r1, r6
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fb9b 	bl	80085a4 <__mdiff>
 8007e6e:	68c2      	ldr	r2, [r0, #12]
 8007e70:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e74:	4605      	mov	r5, r0
 8007e76:	bb02      	cbnz	r2, 8007eba <_dtoa_r+0xa62>
 8007e78:	4601      	mov	r1, r0
 8007e7a:	ee18 0a10 	vmov	r0, s16
 8007e7e:	f000 fb75 	bl	800856c <__mcmp>
 8007e82:	4602      	mov	r2, r0
 8007e84:	4629      	mov	r1, r5
 8007e86:	4620      	mov	r0, r4
 8007e88:	9207      	str	r2, [sp, #28]
 8007e8a:	f000 f92d 	bl	80080e8 <_Bfree>
 8007e8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e92:	ea43 0102 	orr.w	r1, r3, r2
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	464d      	mov	r5, r9
 8007e9c:	d10f      	bne.n	8007ebe <_dtoa_r+0xa66>
 8007e9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ea2:	d02a      	beq.n	8007efa <_dtoa_r+0xaa2>
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dd02      	ble.n	8007eb0 <_dtoa_r+0xa58>
 8007eaa:	9b02      	ldr	r3, [sp, #8]
 8007eac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007eb0:	f88b a000 	strb.w	sl, [fp]
 8007eb4:	e775      	b.n	8007da2 <_dtoa_r+0x94a>
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	e7ba      	b.n	8007e30 <_dtoa_r+0x9d8>
 8007eba:	2201      	movs	r2, #1
 8007ebc:	e7e2      	b.n	8007e84 <_dtoa_r+0xa2c>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db04      	blt.n	8007ece <_dtoa_r+0xa76>
 8007ec4:	9906      	ldr	r1, [sp, #24]
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	9904      	ldr	r1, [sp, #16]
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	d122      	bne.n	8007f14 <_dtoa_r+0xabc>
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	ddee      	ble.n	8007eb0 <_dtoa_r+0xa58>
 8007ed2:	ee18 1a10 	vmov	r1, s16
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fad7 	bl	800848c <__lshift>
 8007ede:	4631      	mov	r1, r6
 8007ee0:	ee08 0a10 	vmov	s16, r0
 8007ee4:	f000 fb42 	bl	800856c <__mcmp>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dc03      	bgt.n	8007ef4 <_dtoa_r+0xa9c>
 8007eec:	d1e0      	bne.n	8007eb0 <_dtoa_r+0xa58>
 8007eee:	f01a 0f01 	tst.w	sl, #1
 8007ef2:	d0dd      	beq.n	8007eb0 <_dtoa_r+0xa58>
 8007ef4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ef8:	d1d7      	bne.n	8007eaa <_dtoa_r+0xa52>
 8007efa:	2339      	movs	r3, #57	; 0x39
 8007efc:	f88b 3000 	strb.w	r3, [fp]
 8007f00:	462b      	mov	r3, r5
 8007f02:	461d      	mov	r5, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f0a:	2a39      	cmp	r2, #57	; 0x39
 8007f0c:	d071      	beq.n	8007ff2 <_dtoa_r+0xb9a>
 8007f0e:	3201      	adds	r2, #1
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	e746      	b.n	8007da2 <_dtoa_r+0x94a>
 8007f14:	2a00      	cmp	r2, #0
 8007f16:	dd07      	ble.n	8007f28 <_dtoa_r+0xad0>
 8007f18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f1c:	d0ed      	beq.n	8007efa <_dtoa_r+0xaa2>
 8007f1e:	f10a 0301 	add.w	r3, sl, #1
 8007f22:	f88b 3000 	strb.w	r3, [fp]
 8007f26:	e73c      	b.n	8007da2 <_dtoa_r+0x94a>
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f2e:	4599      	cmp	r9, r3
 8007f30:	d047      	beq.n	8007fc2 <_dtoa_r+0xb6a>
 8007f32:	ee18 1a10 	vmov	r1, s16
 8007f36:	2300      	movs	r3, #0
 8007f38:	220a      	movs	r2, #10
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f8f6 	bl	800812c <__multadd>
 8007f40:	45b8      	cmp	r8, r7
 8007f42:	ee08 0a10 	vmov	s16, r0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	f04f 020a 	mov.w	r2, #10
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4620      	mov	r0, r4
 8007f52:	d106      	bne.n	8007f62 <_dtoa_r+0xb0a>
 8007f54:	f000 f8ea 	bl	800812c <__multadd>
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	f109 0901 	add.w	r9, r9, #1
 8007f60:	e772      	b.n	8007e48 <_dtoa_r+0x9f0>
 8007f62:	f000 f8e3 	bl	800812c <__multadd>
 8007f66:	4639      	mov	r1, r7
 8007f68:	4680      	mov	r8, r0
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f8dc 	bl	800812c <__multadd>
 8007f74:	4607      	mov	r7, r0
 8007f76:	e7f1      	b.n	8007f5c <_dtoa_r+0xb04>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	9d01      	ldr	r5, [sp, #4]
 8007f7e:	ee18 0a10 	vmov	r0, s16
 8007f82:	4631      	mov	r1, r6
 8007f84:	f7ff f9da 	bl	800733c <quorem>
 8007f88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	f805 ab01 	strb.w	sl, [r5], #1
 8007f92:	1aea      	subs	r2, r5, r3
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	4293      	cmp	r3, r2
 8007f98:	dd09      	ble.n	8007fae <_dtoa_r+0xb56>
 8007f9a:	ee18 1a10 	vmov	r1, s16
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f8c2 	bl	800812c <__multadd>
 8007fa8:	ee08 0a10 	vmov	s16, r0
 8007fac:	e7e7      	b.n	8007f7e <_dtoa_r+0xb26>
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfc8      	it	gt
 8007fb4:	461d      	movgt	r5, r3
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	bfd8      	it	le
 8007fba:	2501      	movle	r5, #1
 8007fbc:	441d      	add	r5, r3
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	ee18 1a10 	vmov	r1, s16
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fa5f 	bl	800848c <__lshift>
 8007fce:	4631      	mov	r1, r6
 8007fd0:	ee08 0a10 	vmov	s16, r0
 8007fd4:	f000 faca 	bl	800856c <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dc91      	bgt.n	8007f00 <_dtoa_r+0xaa8>
 8007fdc:	d102      	bne.n	8007fe4 <_dtoa_r+0xb8c>
 8007fde:	f01a 0f01 	tst.w	sl, #1
 8007fe2:	d18d      	bne.n	8007f00 <_dtoa_r+0xaa8>
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	461d      	mov	r5, r3
 8007fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fec:	2a30      	cmp	r2, #48	; 0x30
 8007fee:	d0fa      	beq.n	8007fe6 <_dtoa_r+0xb8e>
 8007ff0:	e6d7      	b.n	8007da2 <_dtoa_r+0x94a>
 8007ff2:	9a01      	ldr	r2, [sp, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d184      	bne.n	8007f02 <_dtoa_r+0xaaa>
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2331      	movs	r3, #49	; 0x31
 8008000:	7013      	strb	r3, [r2, #0]
 8008002:	e6ce      	b.n	8007da2 <_dtoa_r+0x94a>
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <_dtoa_r+0xbd4>)
 8008006:	f7ff ba95 	b.w	8007534 <_dtoa_r+0xdc>
 800800a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f aa6e 	bne.w	80074ee <_dtoa_r+0x96>
 8008012:	4b07      	ldr	r3, [pc, #28]	; (8008030 <_dtoa_r+0xbd8>)
 8008014:	f7ff ba8e 	b.w	8007534 <_dtoa_r+0xdc>
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dcae      	bgt.n	8007f7c <_dtoa_r+0xb24>
 800801e:	9b06      	ldr	r3, [sp, #24]
 8008020:	2b02      	cmp	r3, #2
 8008022:	f73f aea8 	bgt.w	8007d76 <_dtoa_r+0x91e>
 8008026:	e7a9      	b.n	8007f7c <_dtoa_r+0xb24>
 8008028:	080099af 	.word	0x080099af
 800802c:	0800990c 	.word	0x0800990c
 8008030:	08009930 	.word	0x08009930

08008034 <_localeconv_r>:
 8008034:	4800      	ldr	r0, [pc, #0]	; (8008038 <_localeconv_r+0x4>)
 8008036:	4770      	bx	lr
 8008038:	20000164 	.word	0x20000164

0800803c <malloc>:
 800803c:	4b02      	ldr	r3, [pc, #8]	; (8008048 <malloc+0xc>)
 800803e:	4601      	mov	r1, r0
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f000 bc17 	b.w	8008874 <_malloc_r>
 8008046:	bf00      	nop
 8008048:	20000010 	.word	0x20000010

0800804c <memcpy>:
 800804c:	440a      	add	r2, r1
 800804e:	4291      	cmp	r1, r2
 8008050:	f100 33ff 	add.w	r3, r0, #4294967295
 8008054:	d100      	bne.n	8008058 <memcpy+0xc>
 8008056:	4770      	bx	lr
 8008058:	b510      	push	{r4, lr}
 800805a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008062:	4291      	cmp	r1, r2
 8008064:	d1f9      	bne.n	800805a <memcpy+0xe>
 8008066:	bd10      	pop	{r4, pc}

08008068 <_Balloc>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	b976      	cbnz	r6, 8008090 <_Balloc+0x28>
 8008072:	2010      	movs	r0, #16
 8008074:	f7ff ffe2 	bl	800803c <malloc>
 8008078:	4602      	mov	r2, r0
 800807a:	6260      	str	r0, [r4, #36]	; 0x24
 800807c:	b920      	cbnz	r0, 8008088 <_Balloc+0x20>
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <_Balloc+0x78>)
 8008080:	4818      	ldr	r0, [pc, #96]	; (80080e4 <_Balloc+0x7c>)
 8008082:	2166      	movs	r1, #102	; 0x66
 8008084:	f000 fdd6 	bl	8008c34 <__assert_func>
 8008088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800808c:	6006      	str	r6, [r0, #0]
 800808e:	60c6      	str	r6, [r0, #12]
 8008090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008092:	68f3      	ldr	r3, [r6, #12]
 8008094:	b183      	cbz	r3, 80080b8 <_Balloc+0x50>
 8008096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800809e:	b9b8      	cbnz	r0, 80080d0 <_Balloc+0x68>
 80080a0:	2101      	movs	r1, #1
 80080a2:	fa01 f605 	lsl.w	r6, r1, r5
 80080a6:	1d72      	adds	r2, r6, #5
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 fb60 	bl	8008770 <_calloc_r>
 80080b0:	b160      	cbz	r0, 80080cc <_Balloc+0x64>
 80080b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080b6:	e00e      	b.n	80080d6 <_Balloc+0x6e>
 80080b8:	2221      	movs	r2, #33	; 0x21
 80080ba:	2104      	movs	r1, #4
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fb57 	bl	8008770 <_calloc_r>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	60f0      	str	r0, [r6, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e4      	bne.n	8008096 <_Balloc+0x2e>
 80080cc:	2000      	movs	r0, #0
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	6802      	ldr	r2, [r0, #0]
 80080d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080d6:	2300      	movs	r3, #0
 80080d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080dc:	e7f7      	b.n	80080ce <_Balloc+0x66>
 80080de:	bf00      	nop
 80080e0:	0800993d 	.word	0x0800993d
 80080e4:	080099c0 	.word	0x080099c0

080080e8 <_Bfree>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080ec:	4605      	mov	r5, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	b976      	cbnz	r6, 8008110 <_Bfree+0x28>
 80080f2:	2010      	movs	r0, #16
 80080f4:	f7ff ffa2 	bl	800803c <malloc>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6268      	str	r0, [r5, #36]	; 0x24
 80080fc:	b920      	cbnz	r0, 8008108 <_Bfree+0x20>
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <_Bfree+0x3c>)
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <_Bfree+0x40>)
 8008102:	218a      	movs	r1, #138	; 0x8a
 8008104:	f000 fd96 	bl	8008c34 <__assert_func>
 8008108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800810c:	6006      	str	r6, [r0, #0]
 800810e:	60c6      	str	r6, [r0, #12]
 8008110:	b13c      	cbz	r4, 8008122 <_Bfree+0x3a>
 8008112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008114:	6862      	ldr	r2, [r4, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800811c:	6021      	str	r1, [r4, #0]
 800811e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	0800993d 	.word	0x0800993d
 8008128:	080099c0 	.word	0x080099c0

0800812c <__multadd>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	690d      	ldr	r5, [r1, #16]
 8008132:	4607      	mov	r7, r0
 8008134:	460c      	mov	r4, r1
 8008136:	461e      	mov	r6, r3
 8008138:	f101 0c14 	add.w	ip, r1, #20
 800813c:	2000      	movs	r0, #0
 800813e:	f8dc 3000 	ldr.w	r3, [ip]
 8008142:	b299      	uxth	r1, r3
 8008144:	fb02 6101 	mla	r1, r2, r1, r6
 8008148:	0c1e      	lsrs	r6, r3, #16
 800814a:	0c0b      	lsrs	r3, r1, #16
 800814c:	fb02 3306 	mla	r3, r2, r6, r3
 8008150:	b289      	uxth	r1, r1
 8008152:	3001      	adds	r0, #1
 8008154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008158:	4285      	cmp	r5, r0
 800815a:	f84c 1b04 	str.w	r1, [ip], #4
 800815e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008162:	dcec      	bgt.n	800813e <__multadd+0x12>
 8008164:	b30e      	cbz	r6, 80081aa <__multadd+0x7e>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	42ab      	cmp	r3, r5
 800816a:	dc19      	bgt.n	80081a0 <__multadd+0x74>
 800816c:	6861      	ldr	r1, [r4, #4]
 800816e:	4638      	mov	r0, r7
 8008170:	3101      	adds	r1, #1
 8008172:	f7ff ff79 	bl	8008068 <_Balloc>
 8008176:	4680      	mov	r8, r0
 8008178:	b928      	cbnz	r0, 8008186 <__multadd+0x5a>
 800817a:	4602      	mov	r2, r0
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <__multadd+0x84>)
 800817e:	480d      	ldr	r0, [pc, #52]	; (80081b4 <__multadd+0x88>)
 8008180:	21b5      	movs	r1, #181	; 0xb5
 8008182:	f000 fd57 	bl	8008c34 <__assert_func>
 8008186:	6922      	ldr	r2, [r4, #16]
 8008188:	3202      	adds	r2, #2
 800818a:	f104 010c 	add.w	r1, r4, #12
 800818e:	0092      	lsls	r2, r2, #2
 8008190:	300c      	adds	r0, #12
 8008192:	f7ff ff5b 	bl	800804c <memcpy>
 8008196:	4621      	mov	r1, r4
 8008198:	4638      	mov	r0, r7
 800819a:	f7ff ffa5 	bl	80080e8 <_Bfree>
 800819e:	4644      	mov	r4, r8
 80081a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081a4:	3501      	adds	r5, #1
 80081a6:	615e      	str	r6, [r3, #20]
 80081a8:	6125      	str	r5, [r4, #16]
 80081aa:	4620      	mov	r0, r4
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	080099af 	.word	0x080099af
 80081b4:	080099c0 	.word	0x080099c0

080081b8 <__hi0bits>:
 80081b8:	0c03      	lsrs	r3, r0, #16
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	b9d3      	cbnz	r3, 80081f4 <__hi0bits+0x3c>
 80081be:	0400      	lsls	r0, r0, #16
 80081c0:	2310      	movs	r3, #16
 80081c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081c6:	bf04      	itt	eq
 80081c8:	0200      	lsleq	r0, r0, #8
 80081ca:	3308      	addeq	r3, #8
 80081cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081d0:	bf04      	itt	eq
 80081d2:	0100      	lsleq	r0, r0, #4
 80081d4:	3304      	addeq	r3, #4
 80081d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081da:	bf04      	itt	eq
 80081dc:	0080      	lsleq	r0, r0, #2
 80081de:	3302      	addeq	r3, #2
 80081e0:	2800      	cmp	r0, #0
 80081e2:	db05      	blt.n	80081f0 <__hi0bits+0x38>
 80081e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081e8:	f103 0301 	add.w	r3, r3, #1
 80081ec:	bf08      	it	eq
 80081ee:	2320      	moveq	r3, #32
 80081f0:	4618      	mov	r0, r3
 80081f2:	4770      	bx	lr
 80081f4:	2300      	movs	r3, #0
 80081f6:	e7e4      	b.n	80081c2 <__hi0bits+0xa>

080081f8 <__lo0bits>:
 80081f8:	6803      	ldr	r3, [r0, #0]
 80081fa:	f013 0207 	ands.w	r2, r3, #7
 80081fe:	4601      	mov	r1, r0
 8008200:	d00b      	beq.n	800821a <__lo0bits+0x22>
 8008202:	07da      	lsls	r2, r3, #31
 8008204:	d423      	bmi.n	800824e <__lo0bits+0x56>
 8008206:	0798      	lsls	r0, r3, #30
 8008208:	bf49      	itett	mi
 800820a:	085b      	lsrmi	r3, r3, #1
 800820c:	089b      	lsrpl	r3, r3, #2
 800820e:	2001      	movmi	r0, #1
 8008210:	600b      	strmi	r3, [r1, #0]
 8008212:	bf5c      	itt	pl
 8008214:	600b      	strpl	r3, [r1, #0]
 8008216:	2002      	movpl	r0, #2
 8008218:	4770      	bx	lr
 800821a:	b298      	uxth	r0, r3
 800821c:	b9a8      	cbnz	r0, 800824a <__lo0bits+0x52>
 800821e:	0c1b      	lsrs	r3, r3, #16
 8008220:	2010      	movs	r0, #16
 8008222:	b2da      	uxtb	r2, r3
 8008224:	b90a      	cbnz	r2, 800822a <__lo0bits+0x32>
 8008226:	3008      	adds	r0, #8
 8008228:	0a1b      	lsrs	r3, r3, #8
 800822a:	071a      	lsls	r2, r3, #28
 800822c:	bf04      	itt	eq
 800822e:	091b      	lsreq	r3, r3, #4
 8008230:	3004      	addeq	r0, #4
 8008232:	079a      	lsls	r2, r3, #30
 8008234:	bf04      	itt	eq
 8008236:	089b      	lsreq	r3, r3, #2
 8008238:	3002      	addeq	r0, #2
 800823a:	07da      	lsls	r2, r3, #31
 800823c:	d403      	bmi.n	8008246 <__lo0bits+0x4e>
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	f100 0001 	add.w	r0, r0, #1
 8008244:	d005      	beq.n	8008252 <__lo0bits+0x5a>
 8008246:	600b      	str	r3, [r1, #0]
 8008248:	4770      	bx	lr
 800824a:	4610      	mov	r0, r2
 800824c:	e7e9      	b.n	8008222 <__lo0bits+0x2a>
 800824e:	2000      	movs	r0, #0
 8008250:	4770      	bx	lr
 8008252:	2020      	movs	r0, #32
 8008254:	4770      	bx	lr
	...

08008258 <__i2b>:
 8008258:	b510      	push	{r4, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	2101      	movs	r1, #1
 800825e:	f7ff ff03 	bl	8008068 <_Balloc>
 8008262:	4602      	mov	r2, r0
 8008264:	b928      	cbnz	r0, 8008272 <__i2b+0x1a>
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <__i2b+0x24>)
 8008268:	4805      	ldr	r0, [pc, #20]	; (8008280 <__i2b+0x28>)
 800826a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800826e:	f000 fce1 	bl	8008c34 <__assert_func>
 8008272:	2301      	movs	r3, #1
 8008274:	6144      	str	r4, [r0, #20]
 8008276:	6103      	str	r3, [r0, #16]
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	080099af 	.word	0x080099af
 8008280:	080099c0 	.word	0x080099c0

08008284 <__multiply>:
 8008284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008288:	4691      	mov	r9, r2
 800828a:	690a      	ldr	r2, [r1, #16]
 800828c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008290:	429a      	cmp	r2, r3
 8008292:	bfb8      	it	lt
 8008294:	460b      	movlt	r3, r1
 8008296:	460c      	mov	r4, r1
 8008298:	bfbc      	itt	lt
 800829a:	464c      	movlt	r4, r9
 800829c:	4699      	movlt	r9, r3
 800829e:	6927      	ldr	r7, [r4, #16]
 80082a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082a4:	68a3      	ldr	r3, [r4, #8]
 80082a6:	6861      	ldr	r1, [r4, #4]
 80082a8:	eb07 060a 	add.w	r6, r7, sl
 80082ac:	42b3      	cmp	r3, r6
 80082ae:	b085      	sub	sp, #20
 80082b0:	bfb8      	it	lt
 80082b2:	3101      	addlt	r1, #1
 80082b4:	f7ff fed8 	bl	8008068 <_Balloc>
 80082b8:	b930      	cbnz	r0, 80082c8 <__multiply+0x44>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b44      	ldr	r3, [pc, #272]	; (80083d0 <__multiply+0x14c>)
 80082be:	4845      	ldr	r0, [pc, #276]	; (80083d4 <__multiply+0x150>)
 80082c0:	f240 115d 	movw	r1, #349	; 0x15d
 80082c4:	f000 fcb6 	bl	8008c34 <__assert_func>
 80082c8:	f100 0514 	add.w	r5, r0, #20
 80082cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082d0:	462b      	mov	r3, r5
 80082d2:	2200      	movs	r2, #0
 80082d4:	4543      	cmp	r3, r8
 80082d6:	d321      	bcc.n	800831c <__multiply+0x98>
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082e0:	f109 0314 	add.w	r3, r9, #20
 80082e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082e8:	9202      	str	r2, [sp, #8]
 80082ea:	1b3a      	subs	r2, r7, r4
 80082ec:	3a15      	subs	r2, #21
 80082ee:	f022 0203 	bic.w	r2, r2, #3
 80082f2:	3204      	adds	r2, #4
 80082f4:	f104 0115 	add.w	r1, r4, #21
 80082f8:	428f      	cmp	r7, r1
 80082fa:	bf38      	it	cc
 80082fc:	2204      	movcc	r2, #4
 80082fe:	9201      	str	r2, [sp, #4]
 8008300:	9a02      	ldr	r2, [sp, #8]
 8008302:	9303      	str	r3, [sp, #12]
 8008304:	429a      	cmp	r2, r3
 8008306:	d80c      	bhi.n	8008322 <__multiply+0x9e>
 8008308:	2e00      	cmp	r6, #0
 800830a:	dd03      	ble.n	8008314 <__multiply+0x90>
 800830c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05a      	beq.n	80083ca <__multiply+0x146>
 8008314:	6106      	str	r6, [r0, #16]
 8008316:	b005      	add	sp, #20
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	f843 2b04 	str.w	r2, [r3], #4
 8008320:	e7d8      	b.n	80082d4 <__multiply+0x50>
 8008322:	f8b3 a000 	ldrh.w	sl, [r3]
 8008326:	f1ba 0f00 	cmp.w	sl, #0
 800832a:	d024      	beq.n	8008376 <__multiply+0xf2>
 800832c:	f104 0e14 	add.w	lr, r4, #20
 8008330:	46a9      	mov	r9, r5
 8008332:	f04f 0c00 	mov.w	ip, #0
 8008336:	f85e 2b04 	ldr.w	r2, [lr], #4
 800833a:	f8d9 1000 	ldr.w	r1, [r9]
 800833e:	fa1f fb82 	uxth.w	fp, r2
 8008342:	b289      	uxth	r1, r1
 8008344:	fb0a 110b 	mla	r1, sl, fp, r1
 8008348:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800834c:	f8d9 2000 	ldr.w	r2, [r9]
 8008350:	4461      	add	r1, ip
 8008352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008356:	fb0a c20b 	mla	r2, sl, fp, ip
 800835a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800835e:	b289      	uxth	r1, r1
 8008360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008364:	4577      	cmp	r7, lr
 8008366:	f849 1b04 	str.w	r1, [r9], #4
 800836a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800836e:	d8e2      	bhi.n	8008336 <__multiply+0xb2>
 8008370:	9a01      	ldr	r2, [sp, #4]
 8008372:	f845 c002 	str.w	ip, [r5, r2]
 8008376:	9a03      	ldr	r2, [sp, #12]
 8008378:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800837c:	3304      	adds	r3, #4
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	d020      	beq.n	80083c6 <__multiply+0x142>
 8008384:	6829      	ldr	r1, [r5, #0]
 8008386:	f104 0c14 	add.w	ip, r4, #20
 800838a:	46ae      	mov	lr, r5
 800838c:	f04f 0a00 	mov.w	sl, #0
 8008390:	f8bc b000 	ldrh.w	fp, [ip]
 8008394:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008398:	fb09 220b 	mla	r2, r9, fp, r2
 800839c:	4492      	add	sl, r2
 800839e:	b289      	uxth	r1, r1
 80083a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083a4:	f84e 1b04 	str.w	r1, [lr], #4
 80083a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083ac:	f8be 1000 	ldrh.w	r1, [lr]
 80083b0:	0c12      	lsrs	r2, r2, #16
 80083b2:	fb09 1102 	mla	r1, r9, r2, r1
 80083b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083ba:	4567      	cmp	r7, ip
 80083bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083c0:	d8e6      	bhi.n	8008390 <__multiply+0x10c>
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	50a9      	str	r1, [r5, r2]
 80083c6:	3504      	adds	r5, #4
 80083c8:	e79a      	b.n	8008300 <__multiply+0x7c>
 80083ca:	3e01      	subs	r6, #1
 80083cc:	e79c      	b.n	8008308 <__multiply+0x84>
 80083ce:	bf00      	nop
 80083d0:	080099af 	.word	0x080099af
 80083d4:	080099c0 	.word	0x080099c0

080083d8 <__pow5mult>:
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	4615      	mov	r5, r2
 80083de:	f012 0203 	ands.w	r2, r2, #3
 80083e2:	4606      	mov	r6, r0
 80083e4:	460f      	mov	r7, r1
 80083e6:	d007      	beq.n	80083f8 <__pow5mult+0x20>
 80083e8:	4c25      	ldr	r4, [pc, #148]	; (8008480 <__pow5mult+0xa8>)
 80083ea:	3a01      	subs	r2, #1
 80083ec:	2300      	movs	r3, #0
 80083ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083f2:	f7ff fe9b 	bl	800812c <__multadd>
 80083f6:	4607      	mov	r7, r0
 80083f8:	10ad      	asrs	r5, r5, #2
 80083fa:	d03d      	beq.n	8008478 <__pow5mult+0xa0>
 80083fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083fe:	b97c      	cbnz	r4, 8008420 <__pow5mult+0x48>
 8008400:	2010      	movs	r0, #16
 8008402:	f7ff fe1b 	bl	800803c <malloc>
 8008406:	4602      	mov	r2, r0
 8008408:	6270      	str	r0, [r6, #36]	; 0x24
 800840a:	b928      	cbnz	r0, 8008418 <__pow5mult+0x40>
 800840c:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <__pow5mult+0xac>)
 800840e:	481e      	ldr	r0, [pc, #120]	; (8008488 <__pow5mult+0xb0>)
 8008410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008414:	f000 fc0e 	bl	8008c34 <__assert_func>
 8008418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800841c:	6004      	str	r4, [r0, #0]
 800841e:	60c4      	str	r4, [r0, #12]
 8008420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008428:	b94c      	cbnz	r4, 800843e <__pow5mult+0x66>
 800842a:	f240 2171 	movw	r1, #625	; 0x271
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ff12 	bl	8008258 <__i2b>
 8008434:	2300      	movs	r3, #0
 8008436:	f8c8 0008 	str.w	r0, [r8, #8]
 800843a:	4604      	mov	r4, r0
 800843c:	6003      	str	r3, [r0, #0]
 800843e:	f04f 0900 	mov.w	r9, #0
 8008442:	07eb      	lsls	r3, r5, #31
 8008444:	d50a      	bpl.n	800845c <__pow5mult+0x84>
 8008446:	4639      	mov	r1, r7
 8008448:	4622      	mov	r2, r4
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff1a 	bl	8008284 <__multiply>
 8008450:	4639      	mov	r1, r7
 8008452:	4680      	mov	r8, r0
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff fe47 	bl	80080e8 <_Bfree>
 800845a:	4647      	mov	r7, r8
 800845c:	106d      	asrs	r5, r5, #1
 800845e:	d00b      	beq.n	8008478 <__pow5mult+0xa0>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	b938      	cbnz	r0, 8008474 <__pow5mult+0x9c>
 8008464:	4622      	mov	r2, r4
 8008466:	4621      	mov	r1, r4
 8008468:	4630      	mov	r0, r6
 800846a:	f7ff ff0b 	bl	8008284 <__multiply>
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	f8c0 9000 	str.w	r9, [r0]
 8008474:	4604      	mov	r4, r0
 8008476:	e7e4      	b.n	8008442 <__pow5mult+0x6a>
 8008478:	4638      	mov	r0, r7
 800847a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847e:	bf00      	nop
 8008480:	08009b10 	.word	0x08009b10
 8008484:	0800993d 	.word	0x0800993d
 8008488:	080099c0 	.word	0x080099c0

0800848c <__lshift>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	6849      	ldr	r1, [r1, #4]
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	4607      	mov	r7, r0
 800849e:	4691      	mov	r9, r2
 80084a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084a4:	f108 0601 	add.w	r6, r8, #1
 80084a8:	42b3      	cmp	r3, r6
 80084aa:	db0b      	blt.n	80084c4 <__lshift+0x38>
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff fddb 	bl	8008068 <_Balloc>
 80084b2:	4605      	mov	r5, r0
 80084b4:	b948      	cbnz	r0, 80084ca <__lshift+0x3e>
 80084b6:	4602      	mov	r2, r0
 80084b8:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <__lshift+0xd8>)
 80084ba:	482b      	ldr	r0, [pc, #172]	; (8008568 <__lshift+0xdc>)
 80084bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084c0:	f000 fbb8 	bl	8008c34 <__assert_func>
 80084c4:	3101      	adds	r1, #1
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	e7ee      	b.n	80084a8 <__lshift+0x1c>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f100 0114 	add.w	r1, r0, #20
 80084d0:	f100 0210 	add.w	r2, r0, #16
 80084d4:	4618      	mov	r0, r3
 80084d6:	4553      	cmp	r3, sl
 80084d8:	db37      	blt.n	800854a <__lshift+0xbe>
 80084da:	6920      	ldr	r0, [r4, #16]
 80084dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084e0:	f104 0314 	add.w	r3, r4, #20
 80084e4:	f019 091f 	ands.w	r9, r9, #31
 80084e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084f0:	d02f      	beq.n	8008552 <__lshift+0xc6>
 80084f2:	f1c9 0e20 	rsb	lr, r9, #32
 80084f6:	468a      	mov	sl, r1
 80084f8:	f04f 0c00 	mov.w	ip, #0
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	fa02 f209 	lsl.w	r2, r2, r9
 8008502:	ea42 020c 	orr.w	r2, r2, ip
 8008506:	f84a 2b04 	str.w	r2, [sl], #4
 800850a:	f853 2b04 	ldr.w	r2, [r3], #4
 800850e:	4298      	cmp	r0, r3
 8008510:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008514:	d8f2      	bhi.n	80084fc <__lshift+0x70>
 8008516:	1b03      	subs	r3, r0, r4
 8008518:	3b15      	subs	r3, #21
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	3304      	adds	r3, #4
 8008520:	f104 0215 	add.w	r2, r4, #21
 8008524:	4290      	cmp	r0, r2
 8008526:	bf38      	it	cc
 8008528:	2304      	movcc	r3, #4
 800852a:	f841 c003 	str.w	ip, [r1, r3]
 800852e:	f1bc 0f00 	cmp.w	ip, #0
 8008532:	d001      	beq.n	8008538 <__lshift+0xac>
 8008534:	f108 0602 	add.w	r6, r8, #2
 8008538:	3e01      	subs	r6, #1
 800853a:	4638      	mov	r0, r7
 800853c:	612e      	str	r6, [r5, #16]
 800853e:	4621      	mov	r1, r4
 8008540:	f7ff fdd2 	bl	80080e8 <_Bfree>
 8008544:	4628      	mov	r0, r5
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	f842 0f04 	str.w	r0, [r2, #4]!
 800854e:	3301      	adds	r3, #1
 8008550:	e7c1      	b.n	80084d6 <__lshift+0x4a>
 8008552:	3904      	subs	r1, #4
 8008554:	f853 2b04 	ldr.w	r2, [r3], #4
 8008558:	f841 2f04 	str.w	r2, [r1, #4]!
 800855c:	4298      	cmp	r0, r3
 800855e:	d8f9      	bhi.n	8008554 <__lshift+0xc8>
 8008560:	e7ea      	b.n	8008538 <__lshift+0xac>
 8008562:	bf00      	nop
 8008564:	080099af 	.word	0x080099af
 8008568:	080099c0 	.word	0x080099c0

0800856c <__mcmp>:
 800856c:	b530      	push	{r4, r5, lr}
 800856e:	6902      	ldr	r2, [r0, #16]
 8008570:	690c      	ldr	r4, [r1, #16]
 8008572:	1b12      	subs	r2, r2, r4
 8008574:	d10e      	bne.n	8008594 <__mcmp+0x28>
 8008576:	f100 0314 	add.w	r3, r0, #20
 800857a:	3114      	adds	r1, #20
 800857c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800858c:	42a5      	cmp	r5, r4
 800858e:	d003      	beq.n	8008598 <__mcmp+0x2c>
 8008590:	d305      	bcc.n	800859e <__mcmp+0x32>
 8008592:	2201      	movs	r2, #1
 8008594:	4610      	mov	r0, r2
 8008596:	bd30      	pop	{r4, r5, pc}
 8008598:	4283      	cmp	r3, r0
 800859a:	d3f3      	bcc.n	8008584 <__mcmp+0x18>
 800859c:	e7fa      	b.n	8008594 <__mcmp+0x28>
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	e7f7      	b.n	8008594 <__mcmp+0x28>

080085a4 <__mdiff>:
 80085a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	4606      	mov	r6, r0
 80085ac:	4611      	mov	r1, r2
 80085ae:	4620      	mov	r0, r4
 80085b0:	4690      	mov	r8, r2
 80085b2:	f7ff ffdb 	bl	800856c <__mcmp>
 80085b6:	1e05      	subs	r5, r0, #0
 80085b8:	d110      	bne.n	80085dc <__mdiff+0x38>
 80085ba:	4629      	mov	r1, r5
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff fd53 	bl	8008068 <_Balloc>
 80085c2:	b930      	cbnz	r0, 80085d2 <__mdiff+0x2e>
 80085c4:	4b3a      	ldr	r3, [pc, #232]	; (80086b0 <__mdiff+0x10c>)
 80085c6:	4602      	mov	r2, r0
 80085c8:	f240 2132 	movw	r1, #562	; 0x232
 80085cc:	4839      	ldr	r0, [pc, #228]	; (80086b4 <__mdiff+0x110>)
 80085ce:	f000 fb31 	bl	8008c34 <__assert_func>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	bfa4      	itt	ge
 80085de:	4643      	movge	r3, r8
 80085e0:	46a0      	movge	r8, r4
 80085e2:	4630      	mov	r0, r6
 80085e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085e8:	bfa6      	itte	ge
 80085ea:	461c      	movge	r4, r3
 80085ec:	2500      	movge	r5, #0
 80085ee:	2501      	movlt	r5, #1
 80085f0:	f7ff fd3a 	bl	8008068 <_Balloc>
 80085f4:	b920      	cbnz	r0, 8008600 <__mdiff+0x5c>
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <__mdiff+0x10c>)
 80085f8:	4602      	mov	r2, r0
 80085fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085fe:	e7e5      	b.n	80085cc <__mdiff+0x28>
 8008600:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008604:	6926      	ldr	r6, [r4, #16]
 8008606:	60c5      	str	r5, [r0, #12]
 8008608:	f104 0914 	add.w	r9, r4, #20
 800860c:	f108 0514 	add.w	r5, r8, #20
 8008610:	f100 0e14 	add.w	lr, r0, #20
 8008614:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008618:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800861c:	f108 0210 	add.w	r2, r8, #16
 8008620:	46f2      	mov	sl, lr
 8008622:	2100      	movs	r1, #0
 8008624:	f859 3b04 	ldr.w	r3, [r9], #4
 8008628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800862c:	fa1f f883 	uxth.w	r8, r3
 8008630:	fa11 f18b 	uxtah	r1, r1, fp
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	eba1 0808 	sub.w	r8, r1, r8
 800863a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800863e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008642:	fa1f f888 	uxth.w	r8, r8
 8008646:	1419      	asrs	r1, r3, #16
 8008648:	454e      	cmp	r6, r9
 800864a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800864e:	f84a 3b04 	str.w	r3, [sl], #4
 8008652:	d8e7      	bhi.n	8008624 <__mdiff+0x80>
 8008654:	1b33      	subs	r3, r6, r4
 8008656:	3b15      	subs	r3, #21
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	3304      	adds	r3, #4
 800865e:	3415      	adds	r4, #21
 8008660:	42a6      	cmp	r6, r4
 8008662:	bf38      	it	cc
 8008664:	2304      	movcc	r3, #4
 8008666:	441d      	add	r5, r3
 8008668:	4473      	add	r3, lr
 800866a:	469e      	mov	lr, r3
 800866c:	462e      	mov	r6, r5
 800866e:	4566      	cmp	r6, ip
 8008670:	d30e      	bcc.n	8008690 <__mdiff+0xec>
 8008672:	f10c 0203 	add.w	r2, ip, #3
 8008676:	1b52      	subs	r2, r2, r5
 8008678:	f022 0203 	bic.w	r2, r2, #3
 800867c:	3d03      	subs	r5, #3
 800867e:	45ac      	cmp	ip, r5
 8008680:	bf38      	it	cc
 8008682:	2200      	movcc	r2, #0
 8008684:	441a      	add	r2, r3
 8008686:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800868a:	b17b      	cbz	r3, 80086ac <__mdiff+0x108>
 800868c:	6107      	str	r7, [r0, #16]
 800868e:	e7a3      	b.n	80085d8 <__mdiff+0x34>
 8008690:	f856 8b04 	ldr.w	r8, [r6], #4
 8008694:	fa11 f288 	uxtah	r2, r1, r8
 8008698:	1414      	asrs	r4, r2, #16
 800869a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800869e:	b292      	uxth	r2, r2
 80086a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086a4:	f84e 2b04 	str.w	r2, [lr], #4
 80086a8:	1421      	asrs	r1, r4, #16
 80086aa:	e7e0      	b.n	800866e <__mdiff+0xca>
 80086ac:	3f01      	subs	r7, #1
 80086ae:	e7ea      	b.n	8008686 <__mdiff+0xe2>
 80086b0:	080099af 	.word	0x080099af
 80086b4:	080099c0 	.word	0x080099c0

080086b8 <__d2b>:
 80086b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	4689      	mov	r9, r1
 80086be:	2101      	movs	r1, #1
 80086c0:	ec57 6b10 	vmov	r6, r7, d0
 80086c4:	4690      	mov	r8, r2
 80086c6:	f7ff fccf 	bl	8008068 <_Balloc>
 80086ca:	4604      	mov	r4, r0
 80086cc:	b930      	cbnz	r0, 80086dc <__d2b+0x24>
 80086ce:	4602      	mov	r2, r0
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <__d2b+0xb0>)
 80086d2:	4826      	ldr	r0, [pc, #152]	; (800876c <__d2b+0xb4>)
 80086d4:	f240 310a 	movw	r1, #778	; 0x30a
 80086d8:	f000 faac 	bl	8008c34 <__assert_func>
 80086dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086e4:	bb35      	cbnz	r5, 8008734 <__d2b+0x7c>
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	d028      	beq.n	800873e <__d2b+0x86>
 80086ec:	4668      	mov	r0, sp
 80086ee:	9600      	str	r6, [sp, #0]
 80086f0:	f7ff fd82 	bl	80081f8 <__lo0bits>
 80086f4:	9900      	ldr	r1, [sp, #0]
 80086f6:	b300      	cbz	r0, 800873a <__d2b+0x82>
 80086f8:	9a01      	ldr	r2, [sp, #4]
 80086fa:	f1c0 0320 	rsb	r3, r0, #32
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	430b      	orrs	r3, r1
 8008704:	40c2      	lsrs	r2, r0
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	9201      	str	r2, [sp, #4]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	61a3      	str	r3, [r4, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	bf14      	ite	ne
 8008712:	2202      	movne	r2, #2
 8008714:	2201      	moveq	r2, #1
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	b1d5      	cbz	r5, 8008750 <__d2b+0x98>
 800871a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800871e:	4405      	add	r5, r0
 8008720:	f8c9 5000 	str.w	r5, [r9]
 8008724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008728:	f8c8 0000 	str.w	r0, [r8]
 800872c:	4620      	mov	r0, r4
 800872e:	b003      	add	sp, #12
 8008730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008738:	e7d5      	b.n	80086e6 <__d2b+0x2e>
 800873a:	6161      	str	r1, [r4, #20]
 800873c:	e7e5      	b.n	800870a <__d2b+0x52>
 800873e:	a801      	add	r0, sp, #4
 8008740:	f7ff fd5a 	bl	80081f8 <__lo0bits>
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	2201      	movs	r2, #1
 800874a:	6122      	str	r2, [r4, #16]
 800874c:	3020      	adds	r0, #32
 800874e:	e7e3      	b.n	8008718 <__d2b+0x60>
 8008750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008758:	f8c9 0000 	str.w	r0, [r9]
 800875c:	6918      	ldr	r0, [r3, #16]
 800875e:	f7ff fd2b 	bl	80081b8 <__hi0bits>
 8008762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008766:	e7df      	b.n	8008728 <__d2b+0x70>
 8008768:	080099af 	.word	0x080099af
 800876c:	080099c0 	.word	0x080099c0

08008770 <_calloc_r>:
 8008770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008772:	fba1 2402 	umull	r2, r4, r1, r2
 8008776:	b94c      	cbnz	r4, 800878c <_calloc_r+0x1c>
 8008778:	4611      	mov	r1, r2
 800877a:	9201      	str	r2, [sp, #4]
 800877c:	f000 f87a 	bl	8008874 <_malloc_r>
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	4605      	mov	r5, r0
 8008784:	b930      	cbnz	r0, 8008794 <_calloc_r+0x24>
 8008786:	4628      	mov	r0, r5
 8008788:	b003      	add	sp, #12
 800878a:	bd30      	pop	{r4, r5, pc}
 800878c:	220c      	movs	r2, #12
 800878e:	6002      	str	r2, [r0, #0]
 8008790:	2500      	movs	r5, #0
 8008792:	e7f8      	b.n	8008786 <_calloc_r+0x16>
 8008794:	4621      	mov	r1, r4
 8008796:	f7fe f93f 	bl	8006a18 <memset>
 800879a:	e7f4      	b.n	8008786 <_calloc_r+0x16>

0800879c <_free_r>:
 800879c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800879e:	2900      	cmp	r1, #0
 80087a0:	d044      	beq.n	800882c <_free_r+0x90>
 80087a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a6:	9001      	str	r0, [sp, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f1a1 0404 	sub.w	r4, r1, #4
 80087ae:	bfb8      	it	lt
 80087b0:	18e4      	addlt	r4, r4, r3
 80087b2:	f000 fa9b 	bl	8008cec <__malloc_lock>
 80087b6:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <_free_r+0x94>)
 80087b8:	9801      	ldr	r0, [sp, #4]
 80087ba:	6813      	ldr	r3, [r2, #0]
 80087bc:	b933      	cbnz	r3, 80087cc <_free_r+0x30>
 80087be:	6063      	str	r3, [r4, #4]
 80087c0:	6014      	str	r4, [r2, #0]
 80087c2:	b003      	add	sp, #12
 80087c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c8:	f000 ba96 	b.w	8008cf8 <__malloc_unlock>
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d908      	bls.n	80087e2 <_free_r+0x46>
 80087d0:	6825      	ldr	r5, [r4, #0]
 80087d2:	1961      	adds	r1, r4, r5
 80087d4:	428b      	cmp	r3, r1
 80087d6:	bf01      	itttt	eq
 80087d8:	6819      	ldreq	r1, [r3, #0]
 80087da:	685b      	ldreq	r3, [r3, #4]
 80087dc:	1949      	addeq	r1, r1, r5
 80087de:	6021      	streq	r1, [r4, #0]
 80087e0:	e7ed      	b.n	80087be <_free_r+0x22>
 80087e2:	461a      	mov	r2, r3
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	b10b      	cbz	r3, 80087ec <_free_r+0x50>
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d9fa      	bls.n	80087e2 <_free_r+0x46>
 80087ec:	6811      	ldr	r1, [r2, #0]
 80087ee:	1855      	adds	r5, r2, r1
 80087f0:	42a5      	cmp	r5, r4
 80087f2:	d10b      	bne.n	800880c <_free_r+0x70>
 80087f4:	6824      	ldr	r4, [r4, #0]
 80087f6:	4421      	add	r1, r4
 80087f8:	1854      	adds	r4, r2, r1
 80087fa:	42a3      	cmp	r3, r4
 80087fc:	6011      	str	r1, [r2, #0]
 80087fe:	d1e0      	bne.n	80087c2 <_free_r+0x26>
 8008800:	681c      	ldr	r4, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	6053      	str	r3, [r2, #4]
 8008806:	4421      	add	r1, r4
 8008808:	6011      	str	r1, [r2, #0]
 800880a:	e7da      	b.n	80087c2 <_free_r+0x26>
 800880c:	d902      	bls.n	8008814 <_free_r+0x78>
 800880e:	230c      	movs	r3, #12
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	e7d6      	b.n	80087c2 <_free_r+0x26>
 8008814:	6825      	ldr	r5, [r4, #0]
 8008816:	1961      	adds	r1, r4, r5
 8008818:	428b      	cmp	r3, r1
 800881a:	bf04      	itt	eq
 800881c:	6819      	ldreq	r1, [r3, #0]
 800881e:	685b      	ldreq	r3, [r3, #4]
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	bf04      	itt	eq
 8008824:	1949      	addeq	r1, r1, r5
 8008826:	6021      	streq	r1, [r4, #0]
 8008828:	6054      	str	r4, [r2, #4]
 800882a:	e7ca      	b.n	80087c2 <_free_r+0x26>
 800882c:	b003      	add	sp, #12
 800882e:	bd30      	pop	{r4, r5, pc}
 8008830:	200004d4 	.word	0x200004d4

08008834 <sbrk_aligned>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	4e0e      	ldr	r6, [pc, #56]	; (8008870 <sbrk_aligned+0x3c>)
 8008838:	460c      	mov	r4, r1
 800883a:	6831      	ldr	r1, [r6, #0]
 800883c:	4605      	mov	r5, r0
 800883e:	b911      	cbnz	r1, 8008846 <sbrk_aligned+0x12>
 8008840:	f000 f9e8 	bl	8008c14 <_sbrk_r>
 8008844:	6030      	str	r0, [r6, #0]
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f000 f9e3 	bl	8008c14 <_sbrk_r>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d00a      	beq.n	8008868 <sbrk_aligned+0x34>
 8008852:	1cc4      	adds	r4, r0, #3
 8008854:	f024 0403 	bic.w	r4, r4, #3
 8008858:	42a0      	cmp	r0, r4
 800885a:	d007      	beq.n	800886c <sbrk_aligned+0x38>
 800885c:	1a21      	subs	r1, r4, r0
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f9d8 	bl	8008c14 <_sbrk_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d101      	bne.n	800886c <sbrk_aligned+0x38>
 8008868:	f04f 34ff 	mov.w	r4, #4294967295
 800886c:	4620      	mov	r0, r4
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	200004d8 	.word	0x200004d8

08008874 <_malloc_r>:
 8008874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008878:	1ccd      	adds	r5, r1, #3
 800887a:	f025 0503 	bic.w	r5, r5, #3
 800887e:	3508      	adds	r5, #8
 8008880:	2d0c      	cmp	r5, #12
 8008882:	bf38      	it	cc
 8008884:	250c      	movcc	r5, #12
 8008886:	2d00      	cmp	r5, #0
 8008888:	4607      	mov	r7, r0
 800888a:	db01      	blt.n	8008890 <_malloc_r+0x1c>
 800888c:	42a9      	cmp	r1, r5
 800888e:	d905      	bls.n	800889c <_malloc_r+0x28>
 8008890:	230c      	movs	r3, #12
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	2600      	movs	r6, #0
 8008896:	4630      	mov	r0, r6
 8008898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800889c:	4e2e      	ldr	r6, [pc, #184]	; (8008958 <_malloc_r+0xe4>)
 800889e:	f000 fa25 	bl	8008cec <__malloc_lock>
 80088a2:	6833      	ldr	r3, [r6, #0]
 80088a4:	461c      	mov	r4, r3
 80088a6:	bb34      	cbnz	r4, 80088f6 <_malloc_r+0x82>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4638      	mov	r0, r7
 80088ac:	f7ff ffc2 	bl	8008834 <sbrk_aligned>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	4604      	mov	r4, r0
 80088b4:	d14d      	bne.n	8008952 <_malloc_r+0xde>
 80088b6:	6834      	ldr	r4, [r6, #0]
 80088b8:	4626      	mov	r6, r4
 80088ba:	2e00      	cmp	r6, #0
 80088bc:	d140      	bne.n	8008940 <_malloc_r+0xcc>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	4631      	mov	r1, r6
 80088c2:	4638      	mov	r0, r7
 80088c4:	eb04 0803 	add.w	r8, r4, r3
 80088c8:	f000 f9a4 	bl	8008c14 <_sbrk_r>
 80088cc:	4580      	cmp	r8, r0
 80088ce:	d13a      	bne.n	8008946 <_malloc_r+0xd2>
 80088d0:	6821      	ldr	r1, [r4, #0]
 80088d2:	3503      	adds	r5, #3
 80088d4:	1a6d      	subs	r5, r5, r1
 80088d6:	f025 0503 	bic.w	r5, r5, #3
 80088da:	3508      	adds	r5, #8
 80088dc:	2d0c      	cmp	r5, #12
 80088de:	bf38      	it	cc
 80088e0:	250c      	movcc	r5, #12
 80088e2:	4629      	mov	r1, r5
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff ffa5 	bl	8008834 <sbrk_aligned>
 80088ea:	3001      	adds	r0, #1
 80088ec:	d02b      	beq.n	8008946 <_malloc_r+0xd2>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	442b      	add	r3, r5
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	e00e      	b.n	8008914 <_malloc_r+0xa0>
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	1b52      	subs	r2, r2, r5
 80088fa:	d41e      	bmi.n	800893a <_malloc_r+0xc6>
 80088fc:	2a0b      	cmp	r2, #11
 80088fe:	d916      	bls.n	800892e <_malloc_r+0xba>
 8008900:	1961      	adds	r1, r4, r5
 8008902:	42a3      	cmp	r3, r4
 8008904:	6025      	str	r5, [r4, #0]
 8008906:	bf18      	it	ne
 8008908:	6059      	strne	r1, [r3, #4]
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	bf08      	it	eq
 800890e:	6031      	streq	r1, [r6, #0]
 8008910:	5162      	str	r2, [r4, r5]
 8008912:	604b      	str	r3, [r1, #4]
 8008914:	4638      	mov	r0, r7
 8008916:	f104 060b 	add.w	r6, r4, #11
 800891a:	f000 f9ed 	bl	8008cf8 <__malloc_unlock>
 800891e:	f026 0607 	bic.w	r6, r6, #7
 8008922:	1d23      	adds	r3, r4, #4
 8008924:	1af2      	subs	r2, r6, r3
 8008926:	d0b6      	beq.n	8008896 <_malloc_r+0x22>
 8008928:	1b9b      	subs	r3, r3, r6
 800892a:	50a3      	str	r3, [r4, r2]
 800892c:	e7b3      	b.n	8008896 <_malloc_r+0x22>
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	42a3      	cmp	r3, r4
 8008932:	bf0c      	ite	eq
 8008934:	6032      	streq	r2, [r6, #0]
 8008936:	605a      	strne	r2, [r3, #4]
 8008938:	e7ec      	b.n	8008914 <_malloc_r+0xa0>
 800893a:	4623      	mov	r3, r4
 800893c:	6864      	ldr	r4, [r4, #4]
 800893e:	e7b2      	b.n	80088a6 <_malloc_r+0x32>
 8008940:	4634      	mov	r4, r6
 8008942:	6876      	ldr	r6, [r6, #4]
 8008944:	e7b9      	b.n	80088ba <_malloc_r+0x46>
 8008946:	230c      	movs	r3, #12
 8008948:	603b      	str	r3, [r7, #0]
 800894a:	4638      	mov	r0, r7
 800894c:	f000 f9d4 	bl	8008cf8 <__malloc_unlock>
 8008950:	e7a1      	b.n	8008896 <_malloc_r+0x22>
 8008952:	6025      	str	r5, [r4, #0]
 8008954:	e7de      	b.n	8008914 <_malloc_r+0xa0>
 8008956:	bf00      	nop
 8008958:	200004d4 	.word	0x200004d4

0800895c <__ssputs_r>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	688e      	ldr	r6, [r1, #8]
 8008962:	429e      	cmp	r6, r3
 8008964:	4682      	mov	sl, r0
 8008966:	460c      	mov	r4, r1
 8008968:	4690      	mov	r8, r2
 800896a:	461f      	mov	r7, r3
 800896c:	d838      	bhi.n	80089e0 <__ssputs_r+0x84>
 800896e:	898a      	ldrh	r2, [r1, #12]
 8008970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008974:	d032      	beq.n	80089dc <__ssputs_r+0x80>
 8008976:	6825      	ldr	r5, [r4, #0]
 8008978:	6909      	ldr	r1, [r1, #16]
 800897a:	eba5 0901 	sub.w	r9, r5, r1
 800897e:	6965      	ldr	r5, [r4, #20]
 8008980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008988:	3301      	adds	r3, #1
 800898a:	444b      	add	r3, r9
 800898c:	106d      	asrs	r5, r5, #1
 800898e:	429d      	cmp	r5, r3
 8008990:	bf38      	it	cc
 8008992:	461d      	movcc	r5, r3
 8008994:	0553      	lsls	r3, r2, #21
 8008996:	d531      	bpl.n	80089fc <__ssputs_r+0xa0>
 8008998:	4629      	mov	r1, r5
 800899a:	f7ff ff6b 	bl	8008874 <_malloc_r>
 800899e:	4606      	mov	r6, r0
 80089a0:	b950      	cbnz	r0, 80089b8 <__ssputs_r+0x5c>
 80089a2:	230c      	movs	r3, #12
 80089a4:	f8ca 3000 	str.w	r3, [sl]
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	6921      	ldr	r1, [r4, #16]
 80089ba:	464a      	mov	r2, r9
 80089bc:	f7ff fb46 	bl	800804c <memcpy>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	6126      	str	r6, [r4, #16]
 80089ce:	6165      	str	r5, [r4, #20]
 80089d0:	444e      	add	r6, r9
 80089d2:	eba5 0509 	sub.w	r5, r5, r9
 80089d6:	6026      	str	r6, [r4, #0]
 80089d8:	60a5      	str	r5, [r4, #8]
 80089da:	463e      	mov	r6, r7
 80089dc:	42be      	cmp	r6, r7
 80089de:	d900      	bls.n	80089e2 <__ssputs_r+0x86>
 80089e0:	463e      	mov	r6, r7
 80089e2:	6820      	ldr	r0, [r4, #0]
 80089e4:	4632      	mov	r2, r6
 80089e6:	4641      	mov	r1, r8
 80089e8:	f000 f966 	bl	8008cb8 <memmove>
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	1b9b      	subs	r3, r3, r6
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	4433      	add	r3, r6
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	2000      	movs	r0, #0
 80089fa:	e7db      	b.n	80089b4 <__ssputs_r+0x58>
 80089fc:	462a      	mov	r2, r5
 80089fe:	f000 f981 	bl	8008d04 <_realloc_r>
 8008a02:	4606      	mov	r6, r0
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d1e1      	bne.n	80089cc <__ssputs_r+0x70>
 8008a08:	6921      	ldr	r1, [r4, #16]
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	f7ff fec6 	bl	800879c <_free_r>
 8008a10:	e7c7      	b.n	80089a2 <__ssputs_r+0x46>
	...

08008a14 <_svfiprintf_r>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	4698      	mov	r8, r3
 8008a1a:	898b      	ldrh	r3, [r1, #12]
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	b09d      	sub	sp, #116	; 0x74
 8008a20:	4607      	mov	r7, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	d50e      	bpl.n	8008a46 <_svfiprintf_r+0x32>
 8008a28:	690b      	ldr	r3, [r1, #16]
 8008a2a:	b963      	cbnz	r3, 8008a46 <_svfiprintf_r+0x32>
 8008a2c:	2140      	movs	r1, #64	; 0x40
 8008a2e:	f7ff ff21 	bl	8008874 <_malloc_r>
 8008a32:	6028      	str	r0, [r5, #0]
 8008a34:	6128      	str	r0, [r5, #16]
 8008a36:	b920      	cbnz	r0, 8008a42 <_svfiprintf_r+0x2e>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e0d1      	b.n	8008be6 <_svfiprintf_r+0x1d2>
 8008a42:	2340      	movs	r3, #64	; 0x40
 8008a44:	616b      	str	r3, [r5, #20]
 8008a46:	2300      	movs	r3, #0
 8008a48:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a54:	2330      	movs	r3, #48	; 0x30
 8008a56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c00 <_svfiprintf_r+0x1ec>
 8008a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a5e:	f04f 0901 	mov.w	r9, #1
 8008a62:	4623      	mov	r3, r4
 8008a64:	469a      	mov	sl, r3
 8008a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6a:	b10a      	cbz	r2, 8008a70 <_svfiprintf_r+0x5c>
 8008a6c:	2a25      	cmp	r2, #37	; 0x25
 8008a6e:	d1f9      	bne.n	8008a64 <_svfiprintf_r+0x50>
 8008a70:	ebba 0b04 	subs.w	fp, sl, r4
 8008a74:	d00b      	beq.n	8008a8e <_svfiprintf_r+0x7a>
 8008a76:	465b      	mov	r3, fp
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f7ff ff6d 	bl	800895c <__ssputs_r>
 8008a82:	3001      	adds	r0, #1
 8008a84:	f000 80aa 	beq.w	8008bdc <_svfiprintf_r+0x1c8>
 8008a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8a:	445a      	add	r2, fp
 8008a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80a2 	beq.w	8008bdc <_svfiprintf_r+0x1c8>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa2:	f10a 0a01 	add.w	sl, sl, #1
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	9307      	str	r3, [sp, #28]
 8008aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aae:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab0:	4654      	mov	r4, sl
 8008ab2:	2205      	movs	r2, #5
 8008ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab8:	4851      	ldr	r0, [pc, #324]	; (8008c00 <_svfiprintf_r+0x1ec>)
 8008aba:	f7f7 fb91 	bl	80001e0 <memchr>
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	b9d8      	cbnz	r0, 8008afa <_svfiprintf_r+0xe6>
 8008ac2:	06d0      	lsls	r0, r2, #27
 8008ac4:	bf44      	itt	mi
 8008ac6:	2320      	movmi	r3, #32
 8008ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008acc:	0711      	lsls	r1, r2, #28
 8008ace:	bf44      	itt	mi
 8008ad0:	232b      	movmi	r3, #43	; 0x2b
 8008ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ada:	2b2a      	cmp	r3, #42	; 0x2a
 8008adc:	d015      	beq.n	8008b0a <_svfiprintf_r+0xf6>
 8008ade:	9a07      	ldr	r2, [sp, #28]
 8008ae0:	4654      	mov	r4, sl
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f04f 0c0a 	mov.w	ip, #10
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aee:	3b30      	subs	r3, #48	; 0x30
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d94e      	bls.n	8008b92 <_svfiprintf_r+0x17e>
 8008af4:	b1b0      	cbz	r0, 8008b24 <_svfiprintf_r+0x110>
 8008af6:	9207      	str	r2, [sp, #28]
 8008af8:	e014      	b.n	8008b24 <_svfiprintf_r+0x110>
 8008afa:	eba0 0308 	sub.w	r3, r0, r8
 8008afe:	fa09 f303 	lsl.w	r3, r9, r3
 8008b02:	4313      	orrs	r3, r2
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	46a2      	mov	sl, r4
 8008b08:	e7d2      	b.n	8008ab0 <_svfiprintf_r+0x9c>
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	1d19      	adds	r1, r3, #4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	9103      	str	r1, [sp, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bfbb      	ittet	lt
 8008b16:	425b      	neglt	r3, r3
 8008b18:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1c:	9307      	strge	r3, [sp, #28]
 8008b1e:	9307      	strlt	r3, [sp, #28]
 8008b20:	bfb8      	it	lt
 8008b22:	9204      	strlt	r2, [sp, #16]
 8008b24:	7823      	ldrb	r3, [r4, #0]
 8008b26:	2b2e      	cmp	r3, #46	; 0x2e
 8008b28:	d10c      	bne.n	8008b44 <_svfiprintf_r+0x130>
 8008b2a:	7863      	ldrb	r3, [r4, #1]
 8008b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2e:	d135      	bne.n	8008b9c <_svfiprintf_r+0x188>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9203      	str	r2, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfb8      	it	lt
 8008b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b40:	3402      	adds	r4, #2
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c10 <_svfiprintf_r+0x1fc>
 8008b48:	7821      	ldrb	r1, [r4, #0]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	4650      	mov	r0, sl
 8008b4e:	f7f7 fb47 	bl	80001e0 <memchr>
 8008b52:	b140      	cbz	r0, 8008b66 <_svfiprintf_r+0x152>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	eba0 000a 	sub.w	r0, r0, sl
 8008b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	4303      	orrs	r3, r0
 8008b62:	3401      	adds	r4, #1
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6a:	4826      	ldr	r0, [pc, #152]	; (8008c04 <_svfiprintf_r+0x1f0>)
 8008b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b70:	2206      	movs	r2, #6
 8008b72:	f7f7 fb35 	bl	80001e0 <memchr>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d038      	beq.n	8008bec <_svfiprintf_r+0x1d8>
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <_svfiprintf_r+0x1f4>)
 8008b7c:	bb1b      	cbnz	r3, 8008bc6 <_svfiprintf_r+0x1b2>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	f023 0307 	bic.w	r3, r3, #7
 8008b86:	3308      	adds	r3, #8
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	4433      	add	r3, r6
 8008b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b90:	e767      	b.n	8008a62 <_svfiprintf_r+0x4e>
 8008b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b96:	460c      	mov	r4, r1
 8008b98:	2001      	movs	r0, #1
 8008b9a:	e7a5      	b.n	8008ae8 <_svfiprintf_r+0xd4>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	3401      	adds	r4, #1
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f04f 0c0a 	mov.w	ip, #10
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bae:	3a30      	subs	r2, #48	; 0x30
 8008bb0:	2a09      	cmp	r2, #9
 8008bb2:	d903      	bls.n	8008bbc <_svfiprintf_r+0x1a8>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0c5      	beq.n	8008b44 <_svfiprintf_r+0x130>
 8008bb8:	9105      	str	r1, [sp, #20]
 8008bba:	e7c3      	b.n	8008b44 <_svfiprintf_r+0x130>
 8008bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e7f0      	b.n	8008ba8 <_svfiprintf_r+0x194>
 8008bc6:	ab03      	add	r3, sp, #12
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	462a      	mov	r2, r5
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <_svfiprintf_r+0x1f8>)
 8008bce:	a904      	add	r1, sp, #16
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7fd ffc9 	bl	8006b68 <_printf_float>
 8008bd6:	1c42      	adds	r2, r0, #1
 8008bd8:	4606      	mov	r6, r0
 8008bda:	d1d6      	bne.n	8008b8a <_svfiprintf_r+0x176>
 8008bdc:	89ab      	ldrh	r3, [r5, #12]
 8008bde:	065b      	lsls	r3, r3, #25
 8008be0:	f53f af2c 	bmi.w	8008a3c <_svfiprintf_r+0x28>
 8008be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be6:	b01d      	add	sp, #116	; 0x74
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <_svfiprintf_r+0x1f8>)
 8008bf4:	a904      	add	r1, sp, #16
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7fe fa5a 	bl	80070b0 <_printf_i>
 8008bfc:	e7eb      	b.n	8008bd6 <_svfiprintf_r+0x1c2>
 8008bfe:	bf00      	nop
 8008c00:	08009b1c 	.word	0x08009b1c
 8008c04:	08009b26 	.word	0x08009b26
 8008c08:	08006b69 	.word	0x08006b69
 8008c0c:	0800895d 	.word	0x0800895d
 8008c10:	08009b22 	.word	0x08009b22

08008c14 <_sbrk_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d06      	ldr	r5, [pc, #24]	; (8008c30 <_sbrk_r+0x1c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	f7f8 ff84 	bl	8001b2c <_sbrk>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_sbrk_r+0x1a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_sbrk_r+0x1a>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	200004dc 	.word	0x200004dc

08008c34 <__assert_func>:
 8008c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c36:	4614      	mov	r4, r2
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <__assert_func+0x2c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	68d8      	ldr	r0, [r3, #12]
 8008c42:	b14c      	cbz	r4, 8008c58 <__assert_func+0x24>
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <__assert_func+0x30>)
 8008c46:	9100      	str	r1, [sp, #0]
 8008c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c4c:	4906      	ldr	r1, [pc, #24]	; (8008c68 <__assert_func+0x34>)
 8008c4e:	462b      	mov	r3, r5
 8008c50:	f000 f80e 	bl	8008c70 <fiprintf>
 8008c54:	f000 faac 	bl	80091b0 <abort>
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <__assert_func+0x38>)
 8008c5a:	461c      	mov	r4, r3
 8008c5c:	e7f3      	b.n	8008c46 <__assert_func+0x12>
 8008c5e:	bf00      	nop
 8008c60:	20000010 	.word	0x20000010
 8008c64:	08009b2d 	.word	0x08009b2d
 8008c68:	08009b3a 	.word	0x08009b3a
 8008c6c:	08009b68 	.word	0x08009b68

08008c70 <fiprintf>:
 8008c70:	b40e      	push	{r1, r2, r3}
 8008c72:	b503      	push	{r0, r1, lr}
 8008c74:	4601      	mov	r1, r0
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <fiprintf+0x20>)
 8008c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f000 f897 	bl	8008db4 <_vfiprintf_r>
 8008c86:	b002      	add	sp, #8
 8008c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c8c:	b003      	add	sp, #12
 8008c8e:	4770      	bx	lr
 8008c90:	20000010 	.word	0x20000010

08008c94 <__ascii_mbtowc>:
 8008c94:	b082      	sub	sp, #8
 8008c96:	b901      	cbnz	r1, 8008c9a <__ascii_mbtowc+0x6>
 8008c98:	a901      	add	r1, sp, #4
 8008c9a:	b142      	cbz	r2, 8008cae <__ascii_mbtowc+0x1a>
 8008c9c:	b14b      	cbz	r3, 8008cb2 <__ascii_mbtowc+0x1e>
 8008c9e:	7813      	ldrb	r3, [r2, #0]
 8008ca0:	600b      	str	r3, [r1, #0]
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	1e10      	subs	r0, r2, #0
 8008ca6:	bf18      	it	ne
 8008ca8:	2001      	movne	r0, #1
 8008caa:	b002      	add	sp, #8
 8008cac:	4770      	bx	lr
 8008cae:	4610      	mov	r0, r2
 8008cb0:	e7fb      	b.n	8008caa <__ascii_mbtowc+0x16>
 8008cb2:	f06f 0001 	mvn.w	r0, #1
 8008cb6:	e7f8      	b.n	8008caa <__ascii_mbtowc+0x16>

08008cb8 <memmove>:
 8008cb8:	4288      	cmp	r0, r1
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	eb01 0402 	add.w	r4, r1, r2
 8008cc0:	d902      	bls.n	8008cc8 <memmove+0x10>
 8008cc2:	4284      	cmp	r4, r0
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	d807      	bhi.n	8008cd8 <memmove+0x20>
 8008cc8:	1e43      	subs	r3, r0, #1
 8008cca:	42a1      	cmp	r1, r4
 8008ccc:	d008      	beq.n	8008ce0 <memmove+0x28>
 8008cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cd6:	e7f8      	b.n	8008cca <memmove+0x12>
 8008cd8:	4402      	add	r2, r0
 8008cda:	4601      	mov	r1, r0
 8008cdc:	428a      	cmp	r2, r1
 8008cde:	d100      	bne.n	8008ce2 <memmove+0x2a>
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cea:	e7f7      	b.n	8008cdc <memmove+0x24>

08008cec <__malloc_lock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_lock+0x8>)
 8008cee:	f000 bc1f 	b.w	8009530 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	200004e0 	.word	0x200004e0

08008cf8 <__malloc_unlock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_unlock+0x8>)
 8008cfa:	f000 bc1a 	b.w	8009532 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	200004e0 	.word	0x200004e0

08008d04 <_realloc_r>:
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d08:	4680      	mov	r8, r0
 8008d0a:	4614      	mov	r4, r2
 8008d0c:	460e      	mov	r6, r1
 8008d0e:	b921      	cbnz	r1, 8008d1a <_realloc_r+0x16>
 8008d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	4611      	mov	r1, r2
 8008d16:	f7ff bdad 	b.w	8008874 <_malloc_r>
 8008d1a:	b92a      	cbnz	r2, 8008d28 <_realloc_r+0x24>
 8008d1c:	f7ff fd3e 	bl	800879c <_free_r>
 8008d20:	4625      	mov	r5, r4
 8008d22:	4628      	mov	r0, r5
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	f000 fc6a 	bl	8009600 <_malloc_usable_size_r>
 8008d2c:	4284      	cmp	r4, r0
 8008d2e:	4607      	mov	r7, r0
 8008d30:	d802      	bhi.n	8008d38 <_realloc_r+0x34>
 8008d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d36:	d812      	bhi.n	8008d5e <_realloc_r+0x5a>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f7ff fd9a 	bl	8008874 <_malloc_r>
 8008d40:	4605      	mov	r5, r0
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d0ed      	beq.n	8008d22 <_realloc_r+0x1e>
 8008d46:	42bc      	cmp	r4, r7
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	bf28      	it	cs
 8008d4e:	463a      	movcs	r2, r7
 8008d50:	f7ff f97c 	bl	800804c <memcpy>
 8008d54:	4631      	mov	r1, r6
 8008d56:	4640      	mov	r0, r8
 8008d58:	f7ff fd20 	bl	800879c <_free_r>
 8008d5c:	e7e1      	b.n	8008d22 <_realloc_r+0x1e>
 8008d5e:	4635      	mov	r5, r6
 8008d60:	e7df      	b.n	8008d22 <_realloc_r+0x1e>

08008d62 <__sfputc_r>:
 8008d62:	6893      	ldr	r3, [r2, #8]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	b410      	push	{r4}
 8008d6a:	6093      	str	r3, [r2, #8]
 8008d6c:	da08      	bge.n	8008d80 <__sfputc_r+0x1e>
 8008d6e:	6994      	ldr	r4, [r2, #24]
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	db01      	blt.n	8008d78 <__sfputc_r+0x16>
 8008d74:	290a      	cmp	r1, #10
 8008d76:	d103      	bne.n	8008d80 <__sfputc_r+0x1e>
 8008d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7c:	f000 b94a 	b.w	8009014 <__swbuf_r>
 8008d80:	6813      	ldr	r3, [r2, #0]
 8008d82:	1c58      	adds	r0, r3, #1
 8008d84:	6010      	str	r0, [r2, #0]
 8008d86:	7019      	strb	r1, [r3, #0]
 8008d88:	4608      	mov	r0, r1
 8008d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <__sfputs_r>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	4614      	mov	r4, r2
 8008d98:	18d5      	adds	r5, r2, r3
 8008d9a:	42ac      	cmp	r4, r5
 8008d9c:	d101      	bne.n	8008da2 <__sfputs_r+0x12>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e007      	b.n	8008db2 <__sfputs_r+0x22>
 8008da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da6:	463a      	mov	r2, r7
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff ffda 	bl	8008d62 <__sfputc_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	d1f3      	bne.n	8008d9a <__sfputs_r+0xa>
 8008db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008db4 <_vfiprintf_r>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	460d      	mov	r5, r1
 8008dba:	b09d      	sub	sp, #116	; 0x74
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	4698      	mov	r8, r3
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	b118      	cbz	r0, 8008dcc <_vfiprintf_r+0x18>
 8008dc4:	6983      	ldr	r3, [r0, #24]
 8008dc6:	b90b      	cbnz	r3, 8008dcc <_vfiprintf_r+0x18>
 8008dc8:	f000 fb14 	bl	80093f4 <__sinit>
 8008dcc:	4b89      	ldr	r3, [pc, #548]	; (8008ff4 <_vfiprintf_r+0x240>)
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	d11b      	bne.n	8008e0a <_vfiprintf_r+0x56>
 8008dd2:	6875      	ldr	r5, [r6, #4]
 8008dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_vfiprintf_r+0x32>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_vfiprintf_r+0x32>
 8008de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de2:	f000 fba5 	bl	8009530 <__retarget_lock_acquire_recursive>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	071b      	lsls	r3, r3, #28
 8008dea:	d501      	bpl.n	8008df0 <_vfiprintf_r+0x3c>
 8008dec:	692b      	ldr	r3, [r5, #16]
 8008dee:	b9eb      	cbnz	r3, 8008e2c <_vfiprintf_r+0x78>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 f96e 	bl	80090d4 <__swsetup_r>
 8008df8:	b1c0      	cbz	r0, 8008e2c <_vfiprintf_r+0x78>
 8008dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dfc:	07dc      	lsls	r4, r3, #31
 8008dfe:	d50e      	bpl.n	8008e1e <_vfiprintf_r+0x6a>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	b01d      	add	sp, #116	; 0x74
 8008e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0a:	4b7b      	ldr	r3, [pc, #492]	; (8008ff8 <_vfiprintf_r+0x244>)
 8008e0c:	429d      	cmp	r5, r3
 8008e0e:	d101      	bne.n	8008e14 <_vfiprintf_r+0x60>
 8008e10:	68b5      	ldr	r5, [r6, #8]
 8008e12:	e7df      	b.n	8008dd4 <_vfiprintf_r+0x20>
 8008e14:	4b79      	ldr	r3, [pc, #484]	; (8008ffc <_vfiprintf_r+0x248>)
 8008e16:	429d      	cmp	r5, r3
 8008e18:	bf08      	it	eq
 8008e1a:	68f5      	ldreq	r5, [r6, #12]
 8008e1c:	e7da      	b.n	8008dd4 <_vfiprintf_r+0x20>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	0598      	lsls	r0, r3, #22
 8008e22:	d4ed      	bmi.n	8008e00 <_vfiprintf_r+0x4c>
 8008e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e26:	f000 fb84 	bl	8009532 <__retarget_lock_release_recursive>
 8008e2a:	e7e9      	b.n	8008e00 <_vfiprintf_r+0x4c>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e30:	2320      	movs	r3, #32
 8008e32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3a:	2330      	movs	r3, #48	; 0x30
 8008e3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009000 <_vfiprintf_r+0x24c>
 8008e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e44:	f04f 0901 	mov.w	r9, #1
 8008e48:	4623      	mov	r3, r4
 8008e4a:	469a      	mov	sl, r3
 8008e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e50:	b10a      	cbz	r2, 8008e56 <_vfiprintf_r+0xa2>
 8008e52:	2a25      	cmp	r2, #37	; 0x25
 8008e54:	d1f9      	bne.n	8008e4a <_vfiprintf_r+0x96>
 8008e56:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5a:	d00b      	beq.n	8008e74 <_vfiprintf_r+0xc0>
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	4622      	mov	r2, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ff94 	bl	8008d90 <__sfputs_r>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f000 80aa 	beq.w	8008fc2 <_vfiprintf_r+0x20e>
 8008e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e70:	445a      	add	r2, fp
 8008e72:	9209      	str	r2, [sp, #36]	; 0x24
 8008e74:	f89a 3000 	ldrb.w	r3, [sl]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80a2 	beq.w	8008fc2 <_vfiprintf_r+0x20e>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f04f 32ff 	mov.w	r2, #4294967295
 8008e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e88:	f10a 0a01 	add.w	sl, sl, #1
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e94:	931a      	str	r3, [sp, #104]	; 0x68
 8008e96:	4654      	mov	r4, sl
 8008e98:	2205      	movs	r2, #5
 8008e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9e:	4858      	ldr	r0, [pc, #352]	; (8009000 <_vfiprintf_r+0x24c>)
 8008ea0:	f7f7 f99e 	bl	80001e0 <memchr>
 8008ea4:	9a04      	ldr	r2, [sp, #16]
 8008ea6:	b9d8      	cbnz	r0, 8008ee0 <_vfiprintf_r+0x12c>
 8008ea8:	06d1      	lsls	r1, r2, #27
 8008eaa:	bf44      	itt	mi
 8008eac:	2320      	movmi	r3, #32
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb2:	0713      	lsls	r3, r2, #28
 8008eb4:	bf44      	itt	mi
 8008eb6:	232b      	movmi	r3, #43	; 0x2b
 8008eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec2:	d015      	beq.n	8008ef0 <_vfiprintf_r+0x13c>
 8008ec4:	9a07      	ldr	r2, [sp, #28]
 8008ec6:	4654      	mov	r4, sl
 8008ec8:	2000      	movs	r0, #0
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	4621      	mov	r1, r4
 8008ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed4:	3b30      	subs	r3, #48	; 0x30
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d94e      	bls.n	8008f78 <_vfiprintf_r+0x1c4>
 8008eda:	b1b0      	cbz	r0, 8008f0a <_vfiprintf_r+0x156>
 8008edc:	9207      	str	r2, [sp, #28]
 8008ede:	e014      	b.n	8008f0a <_vfiprintf_r+0x156>
 8008ee0:	eba0 0308 	sub.w	r3, r0, r8
 8008ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	46a2      	mov	sl, r4
 8008eee:	e7d2      	b.n	8008e96 <_vfiprintf_r+0xe2>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	1d19      	adds	r1, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	9103      	str	r1, [sp, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bfbb      	ittet	lt
 8008efc:	425b      	neglt	r3, r3
 8008efe:	f042 0202 	orrlt.w	r2, r2, #2
 8008f02:	9307      	strge	r3, [sp, #28]
 8008f04:	9307      	strlt	r3, [sp, #28]
 8008f06:	bfb8      	it	lt
 8008f08:	9204      	strlt	r2, [sp, #16]
 8008f0a:	7823      	ldrb	r3, [r4, #0]
 8008f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f0e:	d10c      	bne.n	8008f2a <_vfiprintf_r+0x176>
 8008f10:	7863      	ldrb	r3, [r4, #1]
 8008f12:	2b2a      	cmp	r3, #42	; 0x2a
 8008f14:	d135      	bne.n	8008f82 <_vfiprintf_r+0x1ce>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	9203      	str	r2, [sp, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfb8      	it	lt
 8008f22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f26:	3402      	adds	r4, #2
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009010 <_vfiprintf_r+0x25c>
 8008f2e:	7821      	ldrb	r1, [r4, #0]
 8008f30:	2203      	movs	r2, #3
 8008f32:	4650      	mov	r0, sl
 8008f34:	f7f7 f954 	bl	80001e0 <memchr>
 8008f38:	b140      	cbz	r0, 8008f4c <_vfiprintf_r+0x198>
 8008f3a:	2340      	movs	r3, #64	; 0x40
 8008f3c:	eba0 000a 	sub.w	r0, r0, sl
 8008f40:	fa03 f000 	lsl.w	r0, r3, r0
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4303      	orrs	r3, r0
 8008f48:	3401      	adds	r4, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	482c      	ldr	r0, [pc, #176]	; (8009004 <_vfiprintf_r+0x250>)
 8008f52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f56:	2206      	movs	r2, #6
 8008f58:	f7f7 f942 	bl	80001e0 <memchr>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d03f      	beq.n	8008fe0 <_vfiprintf_r+0x22c>
 8008f60:	4b29      	ldr	r3, [pc, #164]	; (8009008 <_vfiprintf_r+0x254>)
 8008f62:	bb1b      	cbnz	r3, 8008fac <_vfiprintf_r+0x1f8>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	443b      	add	r3, r7
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	e767      	b.n	8008e48 <_vfiprintf_r+0x94>
 8008f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	2001      	movs	r0, #1
 8008f80:	e7a5      	b.n	8008ece <_vfiprintf_r+0x11a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	3401      	adds	r4, #1
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f04f 0c0a 	mov.w	ip, #10
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f94:	3a30      	subs	r2, #48	; 0x30
 8008f96:	2a09      	cmp	r2, #9
 8008f98:	d903      	bls.n	8008fa2 <_vfiprintf_r+0x1ee>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c5      	beq.n	8008f2a <_vfiprintf_r+0x176>
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	e7c3      	b.n	8008f2a <_vfiprintf_r+0x176>
 8008fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e7f0      	b.n	8008f8e <_vfiprintf_r+0x1da>
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	4b16      	ldr	r3, [pc, #88]	; (800900c <_vfiprintf_r+0x258>)
 8008fb4:	a904      	add	r1, sp, #16
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7fd fdd6 	bl	8006b68 <_printf_float>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	1c78      	adds	r0, r7, #1
 8008fc0:	d1d6      	bne.n	8008f70 <_vfiprintf_r+0x1bc>
 8008fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc4:	07d9      	lsls	r1, r3, #31
 8008fc6:	d405      	bmi.n	8008fd4 <_vfiprintf_r+0x220>
 8008fc8:	89ab      	ldrh	r3, [r5, #12]
 8008fca:	059a      	lsls	r2, r3, #22
 8008fcc:	d402      	bmi.n	8008fd4 <_vfiprintf_r+0x220>
 8008fce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd0:	f000 faaf 	bl	8009532 <__retarget_lock_release_recursive>
 8008fd4:	89ab      	ldrh	r3, [r5, #12]
 8008fd6:	065b      	lsls	r3, r3, #25
 8008fd8:	f53f af12 	bmi.w	8008e00 <_vfiprintf_r+0x4c>
 8008fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fde:	e711      	b.n	8008e04 <_vfiprintf_r+0x50>
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <_vfiprintf_r+0x258>)
 8008fe8:	a904      	add	r1, sp, #16
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7fe f860 	bl	80070b0 <_printf_i>
 8008ff0:	e7e4      	b.n	8008fbc <_vfiprintf_r+0x208>
 8008ff2:	bf00      	nop
 8008ff4:	08009c94 	.word	0x08009c94
 8008ff8:	08009cb4 	.word	0x08009cb4
 8008ffc:	08009c74 	.word	0x08009c74
 8009000:	08009b1c 	.word	0x08009b1c
 8009004:	08009b26 	.word	0x08009b26
 8009008:	08006b69 	.word	0x08006b69
 800900c:	08008d91 	.word	0x08008d91
 8009010:	08009b22 	.word	0x08009b22

08009014 <__swbuf_r>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	460e      	mov	r6, r1
 8009018:	4614      	mov	r4, r2
 800901a:	4605      	mov	r5, r0
 800901c:	b118      	cbz	r0, 8009026 <__swbuf_r+0x12>
 800901e:	6983      	ldr	r3, [r0, #24]
 8009020:	b90b      	cbnz	r3, 8009026 <__swbuf_r+0x12>
 8009022:	f000 f9e7 	bl	80093f4 <__sinit>
 8009026:	4b21      	ldr	r3, [pc, #132]	; (80090ac <__swbuf_r+0x98>)
 8009028:	429c      	cmp	r4, r3
 800902a:	d12b      	bne.n	8009084 <__swbuf_r+0x70>
 800902c:	686c      	ldr	r4, [r5, #4]
 800902e:	69a3      	ldr	r3, [r4, #24]
 8009030:	60a3      	str	r3, [r4, #8]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	071a      	lsls	r2, r3, #28
 8009036:	d52f      	bpl.n	8009098 <__swbuf_r+0x84>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	b36b      	cbz	r3, 8009098 <__swbuf_r+0x84>
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	6820      	ldr	r0, [r4, #0]
 8009040:	1ac0      	subs	r0, r0, r3
 8009042:	6963      	ldr	r3, [r4, #20]
 8009044:	b2f6      	uxtb	r6, r6
 8009046:	4283      	cmp	r3, r0
 8009048:	4637      	mov	r7, r6
 800904a:	dc04      	bgt.n	8009056 <__swbuf_r+0x42>
 800904c:	4621      	mov	r1, r4
 800904e:	4628      	mov	r0, r5
 8009050:	f000 f93c 	bl	80092cc <_fflush_r>
 8009054:	bb30      	cbnz	r0, 80090a4 <__swbuf_r+0x90>
 8009056:	68a3      	ldr	r3, [r4, #8]
 8009058:	3b01      	subs	r3, #1
 800905a:	60a3      	str	r3, [r4, #8]
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	6022      	str	r2, [r4, #0]
 8009062:	701e      	strb	r6, [r3, #0]
 8009064:	6963      	ldr	r3, [r4, #20]
 8009066:	3001      	adds	r0, #1
 8009068:	4283      	cmp	r3, r0
 800906a:	d004      	beq.n	8009076 <__swbuf_r+0x62>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	07db      	lsls	r3, r3, #31
 8009070:	d506      	bpl.n	8009080 <__swbuf_r+0x6c>
 8009072:	2e0a      	cmp	r6, #10
 8009074:	d104      	bne.n	8009080 <__swbuf_r+0x6c>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f000 f927 	bl	80092cc <_fflush_r>
 800907e:	b988      	cbnz	r0, 80090a4 <__swbuf_r+0x90>
 8009080:	4638      	mov	r0, r7
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <__swbuf_r+0x9c>)
 8009086:	429c      	cmp	r4, r3
 8009088:	d101      	bne.n	800908e <__swbuf_r+0x7a>
 800908a:	68ac      	ldr	r4, [r5, #8]
 800908c:	e7cf      	b.n	800902e <__swbuf_r+0x1a>
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <__swbuf_r+0xa0>)
 8009090:	429c      	cmp	r4, r3
 8009092:	bf08      	it	eq
 8009094:	68ec      	ldreq	r4, [r5, #12]
 8009096:	e7ca      	b.n	800902e <__swbuf_r+0x1a>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f81a 	bl	80090d4 <__swsetup_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0cb      	beq.n	800903c <__swbuf_r+0x28>
 80090a4:	f04f 37ff 	mov.w	r7, #4294967295
 80090a8:	e7ea      	b.n	8009080 <__swbuf_r+0x6c>
 80090aa:	bf00      	nop
 80090ac:	08009c94 	.word	0x08009c94
 80090b0:	08009cb4 	.word	0x08009cb4
 80090b4:	08009c74 	.word	0x08009c74

080090b8 <__ascii_wctomb>:
 80090b8:	b149      	cbz	r1, 80090ce <__ascii_wctomb+0x16>
 80090ba:	2aff      	cmp	r2, #255	; 0xff
 80090bc:	bf85      	ittet	hi
 80090be:	238a      	movhi	r3, #138	; 0x8a
 80090c0:	6003      	strhi	r3, [r0, #0]
 80090c2:	700a      	strbls	r2, [r1, #0]
 80090c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80090c8:	bf98      	it	ls
 80090ca:	2001      	movls	r0, #1
 80090cc:	4770      	bx	lr
 80090ce:	4608      	mov	r0, r1
 80090d0:	4770      	bx	lr
	...

080090d4 <__swsetup_r>:
 80090d4:	4b32      	ldr	r3, [pc, #200]	; (80091a0 <__swsetup_r+0xcc>)
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	681d      	ldr	r5, [r3, #0]
 80090da:	4606      	mov	r6, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	b125      	cbz	r5, 80090ea <__swsetup_r+0x16>
 80090e0:	69ab      	ldr	r3, [r5, #24]
 80090e2:	b913      	cbnz	r3, 80090ea <__swsetup_r+0x16>
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 f985 	bl	80093f4 <__sinit>
 80090ea:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <__swsetup_r+0xd0>)
 80090ec:	429c      	cmp	r4, r3
 80090ee:	d10f      	bne.n	8009110 <__swsetup_r+0x3c>
 80090f0:	686c      	ldr	r4, [r5, #4]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f8:	0719      	lsls	r1, r3, #28
 80090fa:	d42c      	bmi.n	8009156 <__swsetup_r+0x82>
 80090fc:	06dd      	lsls	r5, r3, #27
 80090fe:	d411      	bmi.n	8009124 <__swsetup_r+0x50>
 8009100:	2309      	movs	r3, #9
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	f04f 30ff 	mov.w	r0, #4294967295
 800910e:	e03e      	b.n	800918e <__swsetup_r+0xba>
 8009110:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <__swsetup_r+0xd4>)
 8009112:	429c      	cmp	r4, r3
 8009114:	d101      	bne.n	800911a <__swsetup_r+0x46>
 8009116:	68ac      	ldr	r4, [r5, #8]
 8009118:	e7eb      	b.n	80090f2 <__swsetup_r+0x1e>
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <__swsetup_r+0xd8>)
 800911c:	429c      	cmp	r4, r3
 800911e:	bf08      	it	eq
 8009120:	68ec      	ldreq	r4, [r5, #12]
 8009122:	e7e6      	b.n	80090f2 <__swsetup_r+0x1e>
 8009124:	0758      	lsls	r0, r3, #29
 8009126:	d512      	bpl.n	800914e <__swsetup_r+0x7a>
 8009128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800912a:	b141      	cbz	r1, 800913e <__swsetup_r+0x6a>
 800912c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009130:	4299      	cmp	r1, r3
 8009132:	d002      	beq.n	800913a <__swsetup_r+0x66>
 8009134:	4630      	mov	r0, r6
 8009136:	f7ff fb31 	bl	800879c <_free_r>
 800913a:	2300      	movs	r3, #0
 800913c:	6363      	str	r3, [r4, #52]	; 0x34
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	2300      	movs	r3, #0
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	b94b      	cbnz	r3, 800916e <__swsetup_r+0x9a>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009164:	d003      	beq.n	800916e <__swsetup_r+0x9a>
 8009166:	4621      	mov	r1, r4
 8009168:	4630      	mov	r0, r6
 800916a:	f000 fa09 	bl	8009580 <__smakebuf_r>
 800916e:	89a0      	ldrh	r0, [r4, #12]
 8009170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009174:	f010 0301 	ands.w	r3, r0, #1
 8009178:	d00a      	beq.n	8009190 <__swsetup_r+0xbc>
 800917a:	2300      	movs	r3, #0
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	6963      	ldr	r3, [r4, #20]
 8009180:	425b      	negs	r3, r3
 8009182:	61a3      	str	r3, [r4, #24]
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b943      	cbnz	r3, 800919a <__swsetup_r+0xc6>
 8009188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800918c:	d1ba      	bne.n	8009104 <__swsetup_r+0x30>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	0781      	lsls	r1, r0, #30
 8009192:	bf58      	it	pl
 8009194:	6963      	ldrpl	r3, [r4, #20]
 8009196:	60a3      	str	r3, [r4, #8]
 8009198:	e7f4      	b.n	8009184 <__swsetup_r+0xb0>
 800919a:	2000      	movs	r0, #0
 800919c:	e7f7      	b.n	800918e <__swsetup_r+0xba>
 800919e:	bf00      	nop
 80091a0:	20000010 	.word	0x20000010
 80091a4:	08009c94 	.word	0x08009c94
 80091a8:	08009cb4 	.word	0x08009cb4
 80091ac:	08009c74 	.word	0x08009c74

080091b0 <abort>:
 80091b0:	b508      	push	{r3, lr}
 80091b2:	2006      	movs	r0, #6
 80091b4:	f000 fa54 	bl	8009660 <raise>
 80091b8:	2001      	movs	r0, #1
 80091ba:	f7f8 fc3f 	bl	8001a3c <_exit>
	...

080091c0 <__sflush_r>:
 80091c0:	898a      	ldrh	r2, [r1, #12]
 80091c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	0710      	lsls	r0, r2, #28
 80091ca:	460c      	mov	r4, r1
 80091cc:	d458      	bmi.n	8009280 <__sflush_r+0xc0>
 80091ce:	684b      	ldr	r3, [r1, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc05      	bgt.n	80091e0 <__sflush_r+0x20>
 80091d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dc02      	bgt.n	80091e0 <__sflush_r+0x20>
 80091da:	2000      	movs	r0, #0
 80091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d0f9      	beq.n	80091da <__sflush_r+0x1a>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091ec:	682f      	ldr	r7, [r5, #0]
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	d032      	beq.n	8009258 <__sflush_r+0x98>
 80091f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	075a      	lsls	r2, r3, #29
 80091f8:	d505      	bpl.n	8009206 <__sflush_r+0x46>
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	1ac0      	subs	r0, r0, r3
 80091fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009200:	b10b      	cbz	r3, 8009206 <__sflush_r+0x46>
 8009202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009204:	1ac0      	subs	r0, r0, r3
 8009206:	2300      	movs	r3, #0
 8009208:	4602      	mov	r2, r0
 800920a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920c:	6a21      	ldr	r1, [r4, #32]
 800920e:	4628      	mov	r0, r5
 8009210:	47b0      	blx	r6
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	d106      	bne.n	8009226 <__sflush_r+0x66>
 8009218:	6829      	ldr	r1, [r5, #0]
 800921a:	291d      	cmp	r1, #29
 800921c:	d82c      	bhi.n	8009278 <__sflush_r+0xb8>
 800921e:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <__sflush_r+0x108>)
 8009220:	40ca      	lsrs	r2, r1
 8009222:	07d6      	lsls	r6, r2, #31
 8009224:	d528      	bpl.n	8009278 <__sflush_r+0xb8>
 8009226:	2200      	movs	r2, #0
 8009228:	6062      	str	r2, [r4, #4]
 800922a:	04d9      	lsls	r1, r3, #19
 800922c:	6922      	ldr	r2, [r4, #16]
 800922e:	6022      	str	r2, [r4, #0]
 8009230:	d504      	bpl.n	800923c <__sflush_r+0x7c>
 8009232:	1c42      	adds	r2, r0, #1
 8009234:	d101      	bne.n	800923a <__sflush_r+0x7a>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b903      	cbnz	r3, 800923c <__sflush_r+0x7c>
 800923a:	6560      	str	r0, [r4, #84]	; 0x54
 800923c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923e:	602f      	str	r7, [r5, #0]
 8009240:	2900      	cmp	r1, #0
 8009242:	d0ca      	beq.n	80091da <__sflush_r+0x1a>
 8009244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009248:	4299      	cmp	r1, r3
 800924a:	d002      	beq.n	8009252 <__sflush_r+0x92>
 800924c:	4628      	mov	r0, r5
 800924e:	f7ff faa5 	bl	800879c <_free_r>
 8009252:	2000      	movs	r0, #0
 8009254:	6360      	str	r0, [r4, #52]	; 0x34
 8009256:	e7c1      	b.n	80091dc <__sflush_r+0x1c>
 8009258:	6a21      	ldr	r1, [r4, #32]
 800925a:	2301      	movs	r3, #1
 800925c:	4628      	mov	r0, r5
 800925e:	47b0      	blx	r6
 8009260:	1c41      	adds	r1, r0, #1
 8009262:	d1c7      	bne.n	80091f4 <__sflush_r+0x34>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0c4      	beq.n	80091f4 <__sflush_r+0x34>
 800926a:	2b1d      	cmp	r3, #29
 800926c:	d001      	beq.n	8009272 <__sflush_r+0xb2>
 800926e:	2b16      	cmp	r3, #22
 8009270:	d101      	bne.n	8009276 <__sflush_r+0xb6>
 8009272:	602f      	str	r7, [r5, #0]
 8009274:	e7b1      	b.n	80091da <__sflush_r+0x1a>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	e7ad      	b.n	80091dc <__sflush_r+0x1c>
 8009280:	690f      	ldr	r7, [r1, #16]
 8009282:	2f00      	cmp	r7, #0
 8009284:	d0a9      	beq.n	80091da <__sflush_r+0x1a>
 8009286:	0793      	lsls	r3, r2, #30
 8009288:	680e      	ldr	r6, [r1, #0]
 800928a:	bf08      	it	eq
 800928c:	694b      	ldreq	r3, [r1, #20]
 800928e:	600f      	str	r7, [r1, #0]
 8009290:	bf18      	it	ne
 8009292:	2300      	movne	r3, #0
 8009294:	eba6 0807 	sub.w	r8, r6, r7
 8009298:	608b      	str	r3, [r1, #8]
 800929a:	f1b8 0f00 	cmp.w	r8, #0
 800929e:	dd9c      	ble.n	80091da <__sflush_r+0x1a>
 80092a0:	6a21      	ldr	r1, [r4, #32]
 80092a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092a4:	4643      	mov	r3, r8
 80092a6:	463a      	mov	r2, r7
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b0      	blx	r6
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dc06      	bgt.n	80092be <__sflush_r+0xfe>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e78e      	b.n	80091dc <__sflush_r+0x1c>
 80092be:	4407      	add	r7, r0
 80092c0:	eba8 0800 	sub.w	r8, r8, r0
 80092c4:	e7e9      	b.n	800929a <__sflush_r+0xda>
 80092c6:	bf00      	nop
 80092c8:	20400001 	.word	0x20400001

080092cc <_fflush_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	690b      	ldr	r3, [r1, #16]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b913      	cbnz	r3, 80092dc <_fflush_r+0x10>
 80092d6:	2500      	movs	r5, #0
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	b118      	cbz	r0, 80092e6 <_fflush_r+0x1a>
 80092de:	6983      	ldr	r3, [r0, #24]
 80092e0:	b90b      	cbnz	r3, 80092e6 <_fflush_r+0x1a>
 80092e2:	f000 f887 	bl	80093f4 <__sinit>
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <_fflush_r+0x6c>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	d11b      	bne.n	8009324 <_fflush_r+0x58>
 80092ec:	686c      	ldr	r4, [r5, #4]
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0ef      	beq.n	80092d6 <_fflush_r+0xa>
 80092f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092f8:	07d0      	lsls	r0, r2, #31
 80092fa:	d404      	bmi.n	8009306 <_fflush_r+0x3a>
 80092fc:	0599      	lsls	r1, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_fflush_r+0x3a>
 8009300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009302:	f000 f915 	bl	8009530 <__retarget_lock_acquire_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7ff ff59 	bl	80091c0 <__sflush_r>
 800930e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009310:	07da      	lsls	r2, r3, #31
 8009312:	4605      	mov	r5, r0
 8009314:	d4e0      	bmi.n	80092d8 <_fflush_r+0xc>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	059b      	lsls	r3, r3, #22
 800931a:	d4dd      	bmi.n	80092d8 <_fflush_r+0xc>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f000 f908 	bl	8009532 <__retarget_lock_release_recursive>
 8009322:	e7d9      	b.n	80092d8 <_fflush_r+0xc>
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <_fflush_r+0x70>)
 8009326:	429c      	cmp	r4, r3
 8009328:	d101      	bne.n	800932e <_fflush_r+0x62>
 800932a:	68ac      	ldr	r4, [r5, #8]
 800932c:	e7df      	b.n	80092ee <_fflush_r+0x22>
 800932e:	4b04      	ldr	r3, [pc, #16]	; (8009340 <_fflush_r+0x74>)
 8009330:	429c      	cmp	r4, r3
 8009332:	bf08      	it	eq
 8009334:	68ec      	ldreq	r4, [r5, #12]
 8009336:	e7da      	b.n	80092ee <_fflush_r+0x22>
 8009338:	08009c94 	.word	0x08009c94
 800933c:	08009cb4 	.word	0x08009cb4
 8009340:	08009c74 	.word	0x08009c74

08009344 <std>:
 8009344:	2300      	movs	r3, #0
 8009346:	b510      	push	{r4, lr}
 8009348:	4604      	mov	r4, r0
 800934a:	e9c0 3300 	strd	r3, r3, [r0]
 800934e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009352:	6083      	str	r3, [r0, #8]
 8009354:	8181      	strh	r1, [r0, #12]
 8009356:	6643      	str	r3, [r0, #100]	; 0x64
 8009358:	81c2      	strh	r2, [r0, #14]
 800935a:	6183      	str	r3, [r0, #24]
 800935c:	4619      	mov	r1, r3
 800935e:	2208      	movs	r2, #8
 8009360:	305c      	adds	r0, #92	; 0x5c
 8009362:	f7fd fb59 	bl	8006a18 <memset>
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <std+0x38>)
 8009368:	6263      	str	r3, [r4, #36]	; 0x24
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <std+0x3c>)
 800936c:	62a3      	str	r3, [r4, #40]	; 0x28
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <std+0x40>)
 8009370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <std+0x44>)
 8009374:	6224      	str	r4, [r4, #32]
 8009376:	6323      	str	r3, [r4, #48]	; 0x30
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	08009699 	.word	0x08009699
 8009380:	080096bb 	.word	0x080096bb
 8009384:	080096f3 	.word	0x080096f3
 8009388:	08009717 	.word	0x08009717

0800938c <_cleanup_r>:
 800938c:	4901      	ldr	r1, [pc, #4]	; (8009394 <_cleanup_r+0x8>)
 800938e:	f000 b8af 	b.w	80094f0 <_fwalk_reent>
 8009392:	bf00      	nop
 8009394:	080092cd 	.word	0x080092cd

08009398 <__sfmoreglue>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	2268      	movs	r2, #104	; 0x68
 800939c:	1e4d      	subs	r5, r1, #1
 800939e:	4355      	muls	r5, r2
 80093a0:	460e      	mov	r6, r1
 80093a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093a6:	f7ff fa65 	bl	8008874 <_malloc_r>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b140      	cbz	r0, 80093c0 <__sfmoreglue+0x28>
 80093ae:	2100      	movs	r1, #0
 80093b0:	e9c0 1600 	strd	r1, r6, [r0]
 80093b4:	300c      	adds	r0, #12
 80093b6:	60a0      	str	r0, [r4, #8]
 80093b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093bc:	f7fd fb2c 	bl	8006a18 <memset>
 80093c0:	4620      	mov	r0, r4
 80093c2:	bd70      	pop	{r4, r5, r6, pc}

080093c4 <__sfp_lock_acquire>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__sfp_lock_acquire+0x8>)
 80093c6:	f000 b8b3 	b.w	8009530 <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	200004e1 	.word	0x200004e1

080093d0 <__sfp_lock_release>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__sfp_lock_release+0x8>)
 80093d2:	f000 b8ae 	b.w	8009532 <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	200004e1 	.word	0x200004e1

080093dc <__sinit_lock_acquire>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sinit_lock_acquire+0x8>)
 80093de:	f000 b8a7 	b.w	8009530 <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	200004e2 	.word	0x200004e2

080093e8 <__sinit_lock_release>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__sinit_lock_release+0x8>)
 80093ea:	f000 b8a2 	b.w	8009532 <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	200004e2 	.word	0x200004e2

080093f4 <__sinit>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	4604      	mov	r4, r0
 80093f8:	f7ff fff0 	bl	80093dc <__sinit_lock_acquire>
 80093fc:	69a3      	ldr	r3, [r4, #24]
 80093fe:	b11b      	cbz	r3, 8009408 <__sinit+0x14>
 8009400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009404:	f7ff bff0 	b.w	80093e8 <__sinit_lock_release>
 8009408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800940c:	6523      	str	r3, [r4, #80]	; 0x50
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <__sinit+0x68>)
 8009410:	4a13      	ldr	r2, [pc, #76]	; (8009460 <__sinit+0x6c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	62a2      	str	r2, [r4, #40]	; 0x28
 8009416:	42a3      	cmp	r3, r4
 8009418:	bf04      	itt	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	61a3      	streq	r3, [r4, #24]
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f820 	bl	8009464 <__sfp>
 8009424:	6060      	str	r0, [r4, #4]
 8009426:	4620      	mov	r0, r4
 8009428:	f000 f81c 	bl	8009464 <__sfp>
 800942c:	60a0      	str	r0, [r4, #8]
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f818 	bl	8009464 <__sfp>
 8009434:	2200      	movs	r2, #0
 8009436:	60e0      	str	r0, [r4, #12]
 8009438:	2104      	movs	r1, #4
 800943a:	6860      	ldr	r0, [r4, #4]
 800943c:	f7ff ff82 	bl	8009344 <std>
 8009440:	68a0      	ldr	r0, [r4, #8]
 8009442:	2201      	movs	r2, #1
 8009444:	2109      	movs	r1, #9
 8009446:	f7ff ff7d 	bl	8009344 <std>
 800944a:	68e0      	ldr	r0, [r4, #12]
 800944c:	2202      	movs	r2, #2
 800944e:	2112      	movs	r1, #18
 8009450:	f7ff ff78 	bl	8009344 <std>
 8009454:	2301      	movs	r3, #1
 8009456:	61a3      	str	r3, [r4, #24]
 8009458:	e7d2      	b.n	8009400 <__sinit+0xc>
 800945a:	bf00      	nop
 800945c:	080098f8 	.word	0x080098f8
 8009460:	0800938d 	.word	0x0800938d

08009464 <__sfp>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	4607      	mov	r7, r0
 8009468:	f7ff ffac 	bl	80093c4 <__sfp_lock_acquire>
 800946c:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <__sfp+0x84>)
 800946e:	681e      	ldr	r6, [r3, #0]
 8009470:	69b3      	ldr	r3, [r6, #24]
 8009472:	b913      	cbnz	r3, 800947a <__sfp+0x16>
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff ffbd 	bl	80093f4 <__sinit>
 800947a:	3648      	adds	r6, #72	; 0x48
 800947c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	d503      	bpl.n	800948c <__sfp+0x28>
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	b30b      	cbz	r3, 80094cc <__sfp+0x68>
 8009488:	6836      	ldr	r6, [r6, #0]
 800948a:	e7f7      	b.n	800947c <__sfp+0x18>
 800948c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009490:	b9d5      	cbnz	r5, 80094c8 <__sfp+0x64>
 8009492:	4b16      	ldr	r3, [pc, #88]	; (80094ec <__sfp+0x88>)
 8009494:	60e3      	str	r3, [r4, #12]
 8009496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800949a:	6665      	str	r5, [r4, #100]	; 0x64
 800949c:	f000 f847 	bl	800952e <__retarget_lock_init_recursive>
 80094a0:	f7ff ff96 	bl	80093d0 <__sfp_lock_release>
 80094a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094ac:	6025      	str	r5, [r4, #0]
 80094ae:	61a5      	str	r5, [r4, #24]
 80094b0:	2208      	movs	r2, #8
 80094b2:	4629      	mov	r1, r5
 80094b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094b8:	f7fd faae 	bl	8006a18 <memset>
 80094bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094c4:	4620      	mov	r0, r4
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c8:	3468      	adds	r4, #104	; 0x68
 80094ca:	e7d9      	b.n	8009480 <__sfp+0x1c>
 80094cc:	2104      	movs	r1, #4
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff ff62 	bl	8009398 <__sfmoreglue>
 80094d4:	4604      	mov	r4, r0
 80094d6:	6030      	str	r0, [r6, #0]
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1d5      	bne.n	8009488 <__sfp+0x24>
 80094dc:	f7ff ff78 	bl	80093d0 <__sfp_lock_release>
 80094e0:	230c      	movs	r3, #12
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	e7ee      	b.n	80094c4 <__sfp+0x60>
 80094e6:	bf00      	nop
 80094e8:	080098f8 	.word	0x080098f8
 80094ec:	ffff0001 	.word	0xffff0001

080094f0 <_fwalk_reent>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	4606      	mov	r6, r0
 80094f6:	4688      	mov	r8, r1
 80094f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094fc:	2700      	movs	r7, #0
 80094fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009502:	f1b9 0901 	subs.w	r9, r9, #1
 8009506:	d505      	bpl.n	8009514 <_fwalk_reent+0x24>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	2c00      	cmp	r4, #0
 800950c:	d1f7      	bne.n	80094fe <_fwalk_reent+0xe>
 800950e:	4638      	mov	r0, r7
 8009510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009514:	89ab      	ldrh	r3, [r5, #12]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d907      	bls.n	800952a <_fwalk_reent+0x3a>
 800951a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800951e:	3301      	adds	r3, #1
 8009520:	d003      	beq.n	800952a <_fwalk_reent+0x3a>
 8009522:	4629      	mov	r1, r5
 8009524:	4630      	mov	r0, r6
 8009526:	47c0      	blx	r8
 8009528:	4307      	orrs	r7, r0
 800952a:	3568      	adds	r5, #104	; 0x68
 800952c:	e7e9      	b.n	8009502 <_fwalk_reent+0x12>

0800952e <__retarget_lock_init_recursive>:
 800952e:	4770      	bx	lr

08009530 <__retarget_lock_acquire_recursive>:
 8009530:	4770      	bx	lr

08009532 <__retarget_lock_release_recursive>:
 8009532:	4770      	bx	lr

08009534 <__swhatbuf_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953c:	2900      	cmp	r1, #0
 800953e:	b096      	sub	sp, #88	; 0x58
 8009540:	4614      	mov	r4, r2
 8009542:	461d      	mov	r5, r3
 8009544:	da08      	bge.n	8009558 <__swhatbuf_r+0x24>
 8009546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	061a      	lsls	r2, r3, #24
 8009550:	d410      	bmi.n	8009574 <__swhatbuf_r+0x40>
 8009552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009556:	e00e      	b.n	8009576 <__swhatbuf_r+0x42>
 8009558:	466a      	mov	r2, sp
 800955a:	f000 f903 	bl	8009764 <_fstat_r>
 800955e:	2800      	cmp	r0, #0
 8009560:	dbf1      	blt.n	8009546 <__swhatbuf_r+0x12>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800956c:	425a      	negs	r2, r3
 800956e:	415a      	adcs	r2, r3
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	e7ee      	b.n	8009552 <__swhatbuf_r+0x1e>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	2000      	movs	r0, #0
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	b016      	add	sp, #88	; 0x58
 800957c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009580 <__smakebuf_r>:
 8009580:	898b      	ldrh	r3, [r1, #12]
 8009582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009584:	079d      	lsls	r5, r3, #30
 8009586:	4606      	mov	r6, r0
 8009588:	460c      	mov	r4, r1
 800958a:	d507      	bpl.n	800959c <__smakebuf_r+0x1c>
 800958c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	2301      	movs	r3, #1
 8009596:	6163      	str	r3, [r4, #20]
 8009598:	b002      	add	sp, #8
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	ab01      	add	r3, sp, #4
 800959e:	466a      	mov	r2, sp
 80095a0:	f7ff ffc8 	bl	8009534 <__swhatbuf_r>
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	4605      	mov	r5, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff f963 	bl	8008874 <_malloc_r>
 80095ae:	b948      	cbnz	r0, 80095c4 <__smakebuf_r+0x44>
 80095b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d4ef      	bmi.n	8009598 <__smakebuf_r+0x18>
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	e7e3      	b.n	800958c <__smakebuf_r+0xc>
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <__smakebuf_r+0x7c>)
 80095c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	6020      	str	r0, [r4, #0]
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	9b00      	ldr	r3, [sp, #0]
 80095d4:	6163      	str	r3, [r4, #20]
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	6120      	str	r0, [r4, #16]
 80095da:	b15b      	cbz	r3, 80095f4 <__smakebuf_r+0x74>
 80095dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 f8d1 	bl	8009788 <_isatty_r>
 80095e6:	b128      	cbz	r0, 80095f4 <__smakebuf_r+0x74>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f023 0303 	bic.w	r3, r3, #3
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	89a0      	ldrh	r0, [r4, #12]
 80095f6:	4305      	orrs	r5, r0
 80095f8:	81a5      	strh	r5, [r4, #12]
 80095fa:	e7cd      	b.n	8009598 <__smakebuf_r+0x18>
 80095fc:	0800938d 	.word	0x0800938d

08009600 <_malloc_usable_size_r>:
 8009600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009604:	1f18      	subs	r0, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfbc      	itt	lt
 800960a:	580b      	ldrlt	r3, [r1, r0]
 800960c:	18c0      	addlt	r0, r0, r3
 800960e:	4770      	bx	lr

08009610 <_raise_r>:
 8009610:	291f      	cmp	r1, #31
 8009612:	b538      	push	{r3, r4, r5, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	d904      	bls.n	8009624 <_raise_r+0x14>
 800961a:	2316      	movs	r3, #22
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009626:	b112      	cbz	r2, 800962e <_raise_r+0x1e>
 8009628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800962c:	b94b      	cbnz	r3, 8009642 <_raise_r+0x32>
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f830 	bl	8009694 <_getpid_r>
 8009634:	462a      	mov	r2, r5
 8009636:	4601      	mov	r1, r0
 8009638:	4620      	mov	r0, r4
 800963a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800963e:	f000 b817 	b.w	8009670 <_kill_r>
 8009642:	2b01      	cmp	r3, #1
 8009644:	d00a      	beq.n	800965c <_raise_r+0x4c>
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	d103      	bne.n	8009652 <_raise_r+0x42>
 800964a:	2316      	movs	r3, #22
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	2001      	movs	r0, #1
 8009650:	e7e7      	b.n	8009622 <_raise_r+0x12>
 8009652:	2400      	movs	r4, #0
 8009654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009658:	4628      	mov	r0, r5
 800965a:	4798      	blx	r3
 800965c:	2000      	movs	r0, #0
 800965e:	e7e0      	b.n	8009622 <_raise_r+0x12>

08009660 <raise>:
 8009660:	4b02      	ldr	r3, [pc, #8]	; (800966c <raise+0xc>)
 8009662:	4601      	mov	r1, r0
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f7ff bfd3 	b.w	8009610 <_raise_r>
 800966a:	bf00      	nop
 800966c:	20000010 	.word	0x20000010

08009670 <_kill_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	; (8009690 <_kill_r+0x20>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	f7f8 f9cd 	bl	8001a1c <_kill>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	d102      	bne.n	800968c <_kill_r+0x1c>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	b103      	cbz	r3, 800968c <_kill_r+0x1c>
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	bd38      	pop	{r3, r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	200004dc 	.word	0x200004dc

08009694 <_getpid_r>:
 8009694:	f7f8 b9ba 	b.w	8001a0c <_getpid>

08009698 <__sread>:
 8009698:	b510      	push	{r4, lr}
 800969a:	460c      	mov	r4, r1
 800969c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a0:	f000 f894 	bl	80097cc <_read_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	bfab      	itete	ge
 80096a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096aa:	89a3      	ldrhlt	r3, [r4, #12]
 80096ac:	181b      	addge	r3, r3, r0
 80096ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096b2:	bfac      	ite	ge
 80096b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80096b6:	81a3      	strhlt	r3, [r4, #12]
 80096b8:	bd10      	pop	{r4, pc}

080096ba <__swrite>:
 80096ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096be:	461f      	mov	r7, r3
 80096c0:	898b      	ldrh	r3, [r1, #12]
 80096c2:	05db      	lsls	r3, r3, #23
 80096c4:	4605      	mov	r5, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4616      	mov	r6, r2
 80096ca:	d505      	bpl.n	80096d8 <__swrite+0x1e>
 80096cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d0:	2302      	movs	r3, #2
 80096d2:	2200      	movs	r2, #0
 80096d4:	f000 f868 	bl	80097a8 <_lseek_r>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	4628      	mov	r0, r5
 80096ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ee:	f000 b817 	b.w	8009720 <_write_r>

080096f2 <__sseek>:
 80096f2:	b510      	push	{r4, lr}
 80096f4:	460c      	mov	r4, r1
 80096f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fa:	f000 f855 	bl	80097a8 <_lseek_r>
 80096fe:	1c43      	adds	r3, r0, #1
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	bf15      	itete	ne
 8009704:	6560      	strne	r0, [r4, #84]	; 0x54
 8009706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800970a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800970e:	81a3      	strheq	r3, [r4, #12]
 8009710:	bf18      	it	ne
 8009712:	81a3      	strhne	r3, [r4, #12]
 8009714:	bd10      	pop	{r4, pc}

08009716 <__sclose>:
 8009716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971a:	f000 b813 	b.w	8009744 <_close_r>
	...

08009720 <_write_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_write_r+0x20>)
 8009724:	4604      	mov	r4, r0
 8009726:	4608      	mov	r0, r1
 8009728:	4611      	mov	r1, r2
 800972a:	2200      	movs	r2, #0
 800972c:	602a      	str	r2, [r5, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	f7f8 f9ab 	bl	8001a8a <_write>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_write_r+0x1e>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_write_r+0x1e>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	200004dc 	.word	0x200004dc

08009744 <_close_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d06      	ldr	r5, [pc, #24]	; (8009760 <_close_r+0x1c>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	f7f8 f9b7 	bl	8001ac2 <_close>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_close_r+0x1a>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_close_r+0x1a>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	200004dc 	.word	0x200004dc

08009764 <_fstat_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_fstat_r+0x20>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f7f8 f9b2 	bl	8001ada <_fstat>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d102      	bne.n	8009780 <_fstat_r+0x1c>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b103      	cbz	r3, 8009780 <_fstat_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd38      	pop	{r3, r4, r5, pc}
 8009782:	bf00      	nop
 8009784:	200004dc 	.word	0x200004dc

08009788 <_isatty_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d06      	ldr	r5, [pc, #24]	; (80097a4 <_isatty_r+0x1c>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f8 f9b1 	bl	8001afa <_isatty>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_isatty_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_isatty_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	200004dc 	.word	0x200004dc

080097a8 <_lseek_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4d07      	ldr	r5, [pc, #28]	; (80097c8 <_lseek_r+0x20>)
 80097ac:	4604      	mov	r4, r0
 80097ae:	4608      	mov	r0, r1
 80097b0:	4611      	mov	r1, r2
 80097b2:	2200      	movs	r2, #0
 80097b4:	602a      	str	r2, [r5, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	f7f8 f9aa 	bl	8001b10 <_lseek>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_lseek_r+0x1e>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_lseek_r+0x1e>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	200004dc 	.word	0x200004dc

080097cc <_read_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_read_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f8 f938 	bl	8001a50 <_read>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_read_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_read_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200004dc 	.word	0x200004dc

080097f0 <_init>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr

080097fc <_fini>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr
