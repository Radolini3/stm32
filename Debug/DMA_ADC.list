
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e4c  08008e4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008e4c  08008e4c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e4c  08008e4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000278  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013221  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbe  00000000  00000000  0003342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  00037150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dd4  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc3  00000000  00000000  0005ae24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbdc9  00000000  00000000  00070de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cbb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005480  00000000  00000000  0013cc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a08 	.word	0x08008a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008a08 	.word	0x08008a08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Set_Pin_Output>:

	/*Zmienne do obsługi czujnika DTH11 */


	/*=============================Ustaw PA6 jako wyjście=============================*/
	void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f002 fa36 	bl	8003048 <HAL_GPIO_Init>
	}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Set_Pin_Input>:
	/*=============================Ustaw PA6 jako wejście=============================*/
	void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f002 fa18 	bl	8003048 <HAL_GPIO_Init>
	}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DHT11sensorInit>:


	/*=============================Inicjalizuj czujnik=============================*/
	void DHT11sensorInit(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
		Set_Pin_Output (PORT_A, DHT11_PIN);  // set the pin as output
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f7ff ffbd 	bl	8000ba8 <Set_Pin_Output>
		HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 0);   // pull the pin low
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 fb91 	bl	800335c <HAL_GPIO_WritePin>
		delay_us (18000);   // wait for 18ms
 8000c3a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c3e:	f000 fae5 	bl	800120c <delay_us>
	    HAL_GPIO_WritePin (PORT_A, DHT11_PIN, 1);   // pull the pin high
 8000c42:	2201      	movs	r2, #1
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f002 fb87 	bl	800335c <HAL_GPIO_WritePin>
		delay_us (20);   // wait for 20us
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f000 fadc 	bl	800120c <delay_us>
		Set_Pin_Input(PORT_A, DHT11_PIN);    // set as input
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f7ff ffc3 	bl	8000be4 <Set_Pin_Input>
	}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <sensorResponse>:


	/*=============================Odpowiedź czujnika=============================*/
	uint8_t sensorResponse(void){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
		uint8_t Response = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
		delay_us (40);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f000 facd 	bl	800120c <delay_us>
		if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))){
 8000c72:	2140      	movs	r1, #64	; 0x40
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f002 fb58 	bl	800332c <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <sensorResponse+0x40>
			delay_us (80);
 8000c82:	2050      	movs	r0, #80	; 0x50
 8000c84:	f000 fac2 	bl	800120c <delay_us>
			if ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN))) Response = 1;
 8000c88:	2140      	movs	r1, #64	; 0x40
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f002 fb4d 	bl	800332c <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <sensorResponse+0x3c>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e001      	b.n	8000ca2 <sensorResponse+0x40>
			else Response = -1; // 255
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	71fb      	strb	r3, [r7, #7]
		}
		while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // wait for the pin to go low
 8000ca2:	bf00      	nop
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f002 fb3f 	bl	800332c <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f7      	bne.n	8000ca4 <sensorResponse+0x42>

		return Response;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
	}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <sensorRead>:

	/*=============================Odczyt=============================*/
	uint8_t sensorRead(void){
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
		uint8_t i,j;
		for (j=0;j<8;j++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71bb      	strb	r3, [r7, #6]
 8000cc8:	e03a      	b.n	8000d40 <sensorRead+0x82>
		{
			while (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));   // wait for the pin to go high
 8000cca:	bf00      	nop
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 fb2b 	bl	800332c <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f7      	beq.n	8000ccc <sensorRead+0xe>
			delay_us (40);   // wait for 40 us
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f000 fa95 	bl	800120c <delay_us>
			if (!(HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)))   // if the pin is low
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 fb20 	bl	800332c <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10e      	bne.n	8000d10 <sensorRead+0x52>
			{
				i&= ~(1<<(7-j));   // write 0
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f1c3 0307 	rsb	r3, r3, #7
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e00b      	b.n	8000d28 <sensorRead+0x6a>
			}
			else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (PORT_A, DHT11_PIN)));  // wait for the pin to go low
 8000d28:	bf00      	nop
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f002 fafc 	bl	800332c <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f7      	bne.n	8000d2a <sensorRead+0x6c>
		for (j=0;j<8;j++)
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	71bb      	strb	r3, [r7, #6]
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	d9c1      	bls.n	8000cca <sensorRead+0xc>
		}
		return i;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
	}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <DHT11_allData>:

	void DHT11_allData(){
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af02      	add	r7, sp, #8
		  DHT11sensorInit();
 8000d56:	f7ff ff63 	bl	8000c20 <DHT11sensorInit>
		  Presence = sensorResponse();
 8000d5a:	f7ff ff82 	bl	8000c62 <sensorResponse>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <DHT11_allData+0xc4>)
 8000d64:	701a      	strb	r2, [r3, #0]
		  Rh_byte1 = sensorRead ();
 8000d66:	f7ff ffaa 	bl	8000cbe <sensorRead>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <DHT11_allData+0xc8>)
 8000d70:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = sensorRead ();
 8000d72:	f7ff ffa4 	bl	8000cbe <sensorRead>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <DHT11_allData+0xcc>)
 8000d7c:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = sensorRead ();
 8000d7e:	f7ff ff9e 	bl	8000cbe <sensorRead>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <DHT11_allData+0xd0>)
 8000d88:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = sensorRead ();
 8000d8a:	f7ff ff98 	bl	8000cbe <sensorRead>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <DHT11_allData+0xd4>)
 8000d94:	701a      	strb	r2, [r3, #0]
		  SUM = sensorRead();
 8000d96:	f7ff ff92 	bl	8000cbe <sensorRead>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <DHT11_allData+0xd8>)
 8000da0:	801a      	strh	r2, [r3, #0]
		  TEMP = Temp_byte1;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <DHT11_allData+0xd0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <DHT11_allData+0xdc>)
 8000daa:	801a      	strh	r2, [r3, #0]
		  RH = Rh_byte1;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <DHT11_allData+0xc8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <DHT11_allData+0xe0>)
 8000db4:	801a      	strh	r2, [r3, #0]
		  Temperature = (float) TEMP;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <DHT11_allData+0xdc>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <DHT11_allData+0xe4>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
		  Humidity = (float) RH;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <DHT11_allData+0xe0>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <DHT11_allData+0xe8>)
 8000dd6:	edc3 7a00 	vstr	s15, [r3]


		  sprintf(UartOutText, "Temp: %f Humidity %f \n\r ", Temperature, Humidity);
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <DHT11_allData+0xe4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbb2 	bl	8000548 <__aeabi_f2d>
 8000de4:	4604      	mov	r4, r0
 8000de6:	460d      	mov	r5, r1
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <DHT11_allData+0xe8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fbab 	bl	8000548 <__aeabi_f2d>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	e9cd 2300 	strd	r2, r3, [sp]
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	490f      	ldr	r1, [pc, #60]	; (8000e3c <DHT11_allData+0xec>)
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <DHT11_allData+0xf0>)
 8000e02:	f005 fb87 	bl	8006514 <siprintf>
		  sendString_UART(UartOutText);
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <DHT11_allData+0xf0>)
 8000e08:	f000 fa18 	bl	800123c <sendString_UART>

	}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200002fa 	.word	0x200002fa
 8000e18:	200002f0 	.word	0x200002f0
 8000e1c:	200002f1 	.word	0x200002f1
 8000e20:	200002f2 	.word	0x200002f2
 8000e24:	200002f3 	.word	0x200002f3
 8000e28:	200002f4 	.word	0x200002f4
 8000e2c:	200002f8 	.word	0x200002f8
 8000e30:	200002f6 	.word	0x200002f6
 8000e34:	20000318 	.word	0x20000318
 8000e38:	2000031c 	.word	0x2000031c
 8000e3c:	08008a20 	.word	0x08008a20
 8000e40:	2000028c 	.word	0x2000028c

08000e44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e66:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e6e:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e80:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000ea0:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec0:	4841      	ldr	r0, [pc, #260]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000ec2:	f000 fda5 	bl	8001a10 <HAL_ADC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 fa5e 	bl	800138c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	483b      	ldr	r0, [pc, #236]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000edc:	f001 fb26 	bl	800252c <HAL_ADCEx_MultiModeConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ee6:	f000 fa51 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4830      	ldr	r0, [pc, #192]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f08:	f001 f850 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f12:	f000 fa3b 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f24:	f001 f842 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000f2e:	f000 fa2d 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f32:	2306      	movs	r3, #6
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f36:	2303      	movs	r3, #3
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4822      	ldr	r0, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f40:	f001 f834 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000f4a:	f000 fa1f 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f52:	2304      	movs	r3, #4
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f5c:	f001 f826 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f66:	f000 fa11 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f78:	f001 f818 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000f82:	f000 fa03 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f86:	2309      	movs	r3, #9
 8000f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000f94:	f001 f80a 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000f9e:	f000 f9f5 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fa2:	230b      	movs	r3, #11
 8000fa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_ADC1_Init+0x184>)
 8000fb0:	f000 fffc 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000fba:	f000 f9e7 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8

08000fcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d17c      	bne.n	80010e8 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a39      	ldr	r2, [pc, #228]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 800100c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_ADC_MspInit+0x124>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800104e:	230f      	movs	r3, #15
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	; (80010f4 <HAL_ADC_MspInit+0x128>)
 8001062:	f001 fff1 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001066:	2303      	movs	r3, #3
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f001 ffe4 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	; (80010f8 <HAL_ADC_MspInit+0x12c>)
 8001094:	f001 ffd8 	bl	8003048 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_ADC_MspInit+0x130>)
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_ADC_MspInit+0x134>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010ce:	f001 fdea 	bl	8002ca6 <HAL_DMA_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 80010d8:	f000 f958 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
 80010e2:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_ADC_MspInit+0x130>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	; 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48000400 	.word	0x48000400
 80010fc:	20000248 	.word	0x20000248
 8001100:	40020008 	.word	0x40020008

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_DMA_Init+0x38>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <MX_DMA_Init+0x38>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_DMA_Init+0x38>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	200b      	movs	r0, #11
 8001128:	f001 fd87 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800112c:	200b      	movs	r0, #11
 800112e:	f001 fda0 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <MX_GPIO_Init+0xc4>)
 800115c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0xc4>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xc4>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xc4>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_GPIO_Init+0xc4>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f002 f8cd 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0xc8>)
 80011da:	f001 ff35 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011de:	2320      	movs	r3, #32
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 ff26 	bl	8003048 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	48000800 	.word	0x48000800

0800120c <delay_us>:
float map(uint16_t val, int in_min, int in_max, int out_min, int out_max) {
  return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

/*=============================Milisekundowy delay na timerze=============================*/
void delay_us(uint32_t time){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <delay_us+0x2c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 800121c:	bf00      	nop
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <delay_us+0x2c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d8f9      	bhi.n	800121e <delay_us+0x12>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000324 	.word	0x20000324

0800123c <sendString_UART>:

/*=============================Wyślij po UARCIE numer 2=============================*/
void sendString_UART(char*text){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,  (uint8_t*)text, strlen(text), 1000);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7fe ffc3 	bl	80001d0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <sendString_UART+0x28>)
 8001256:	f004 f947 	bl	80054e8 <HAL_UART_Transmit>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200003bc 	.word	0x200003bc

08001268 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
//	dirtHumRead();s
	DHT11_allData();
 8001270:	f7ff fd6e 	bl	8000d50 <DHT11_allData>

}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fb1e 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f828 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f7ff ff5a 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f7ff ff3a 	bl	8001104 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f000 fa7a 	bl	8001788 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001294:	f7ff fdd6 	bl	8000e44 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001298:	f000 f9b8 	bl	800160c <MX_TIM2_Init>
  MX_TIM6_Init();
 800129c:	f000 fa04 	bl	80016a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <main+0x4c>)
 80012a2:	f003 fc75 	bl	8004b90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <main+0x50>)
 80012a8:	f003 fcc6 	bl	8004c38 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 7);
 80012ac:	2207      	movs	r2, #7
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <main+0x54>)
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <main+0x58>)
 80012b2:	f000 fd3f 	bl	8001d34 <HAL_ADC_Start_DMA>
	  HAL_Delay(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f000 fb67 	bl	800198c <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <main+0x58>)
 80012c0:	f000 fe12 	bl	8001ee8 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 7);
 80012c4:	e7f2      	b.n	80012ac <main+0x30>
 80012c6:	bf00      	nop
 80012c8:	20000324 	.word	0x20000324
 80012cc:	20000370 	.word	0x20000370
 80012d0:	200002fc 	.word	0x200002fc
 80012d4:	200001f8 	.word	0x200001f8

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fca2 	bl	8005c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131e:	2300      	movs	r3, #0
 8001320:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001322:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	4618      	mov	r0, r3
 800132e:	f002 f82d 	bl	800338c <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001338:	f000 f828 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f855 	bl	8004408 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001364:	f000 f812 	bl	800138c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800136c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fa7d 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001380:	f000 f804 	bl	800138c <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3758      	adds	r7, #88	; 0x58
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x44>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x44>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x44>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x44>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f001 fc28 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 fa8e 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Channel1_IRQHandler+0x10>)
 800143a:	f001 fd13 	bl	8002e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000248 	.word	0x20000248

08001448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM2_IRQHandler+0x10>)
 800144e:	f003 fc4f 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000324 	.word	0x20000324

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001476:	f004 fbb1 	bl	8005bdc <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
	return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
	while (1) {}		/* Make sure we hang here */
 800149e:	e7fe      	b.n	800149e <_exit+0x12>

080014a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014b2:	f3af 8000 	nop.w
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
	}

return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e009      	b.n	8001500 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf1      	blt.n	80014ec <_write+0x12>
	}
	return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	605a      	str	r2, [r3, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f004 fb16 	bl	8005bdc <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20003000 	.word	0x20003000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	20000320 	.word	0x20000320
 80015e4:	20000458 	.word	0x20000458

080015e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM2_Init+0x98>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001634:	2247      	movs	r2, #71	; 0x47
 8001636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM2_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM2_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001654:	f003 fa44 	bl	8004ae0 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800165e:	f7ff fe95 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001670:	f003 fc5d 	bl	8004f2e <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800167a:	f7ff fe87 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM2_Init+0x98>)
 800168c:	f003 fe52 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001696:	f7ff fe79 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000324 	.word	0x20000324

080016a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_TIM6_Init+0x68>)
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <MX_TIM6_Init+0x6c>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_TIM6_Init+0x68>)
 80016c0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_TIM6_Init+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_TIM6_Init+0x68>)
 80016ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_TIM6_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_TIM6_Init+0x68>)
 80016dc:	f003 fa00 	bl	8004ae0 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80016e6:	f7ff fe51 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <MX_TIM6_Init+0x68>)
 80016f8:	f003 fe1c 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001702:	f7ff fe43 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000370 	.word	0x20000370
 8001714:	40001000 	.word	0x40001000

08001718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d114      	bne.n	8001754 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201c      	movs	r0, #28
 8001748:	f001 fa77 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f001 fa90 	bl	8002c72 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001752:	e010      	b.n	8001776 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_TIM_Base_MspInit+0x6c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10b      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40001000 	.word	0x40001000

08001788 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <MX_USART2_UART_Init+0x5c>)
 8001790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x58>)
 80017cc:	f003 fe3e 	bl	800544c <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d6:	f7ff fdd9 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003bc 	.word	0x200003bc
 80017e4:	40004400 	.word	0x40004400

080017e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_UART_MspInit+0x80>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_UART_MspInit+0x80>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184a:	2307      	movs	r3, #7
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f001 fbf6 	bl	8003048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40004400 	.word	0x40004400
 8001868:	40021000 	.word	0x40021000

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001896:	f7ff fea7 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f004 f9a5 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff fced 	bl	800127c <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018b0:	08008e54 	.word	0x08008e54
  ldr r2, =_sbss
 80018b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018b8:	20000454 	.word	0x20000454

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x28>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 f9a7 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fd5c 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f001 f9bf 	bl	8002c8e <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f001 f987 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000440 	.word	0x20000440

08001974 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;  
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000440 	.word	0x20000440

0800198c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b09a      	sub	sp, #104	; 0x68
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e172      	b.n	8001d16 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d176      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d152      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fab1 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fee7 	bl	800284c <ADC_Disable>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d12f      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
 8001a90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f043 0202 	orr.w	r2, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b94      	ldr	r3, [pc, #592]	; (8001d20 <HAL_ADC_Init+0x310>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a94      	ldr	r2, [pc, #592]	; (8001d24 <HAL_ADC_Init+0x314>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d110      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f023 0312 	bic.w	r3, r3, #18
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 80df 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
 8001b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80da 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80d2 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_ADC_Init+0x318>)
 8001b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b74:	d102      	bne.n	8001b7c <HAL_ADC_Init+0x16c>
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_ADC_Init+0x31c>)
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Init+0x172>
 8001b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_ADC_Init+0x192>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x192>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x194>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11c      	bne.n	8001be2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_Init+0x1bc>
 8001bca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	035b      	lsls	r3, r3, #13
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_Init+0x1e6>
 8001bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_Init+0x1e8>
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d11b      	bne.n	8001c4e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7e5b      	ldrb	r3, [r3, #25]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	045a      	lsls	r2, r3, #17
 8001c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c30:	e00d      	b.n	8001c4e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d007      	beq.n	8001c66 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c62:	4313      	orrs	r3, r2
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	039a      	lsls	r2, r3, #14
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_ADC_Init+0x320>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f023 010f 	bic.w	r1, r3, #15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd2:	e007      	b.n	8001ce4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfa:	e00a      	b.n	8001d12 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f023 0312 	bic.w	r3, r3, #18
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3768      	adds	r7, #104	; 0x68
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	431bde83 	.word	0x431bde83
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	50000100 	.word	0x50000100
 8001d30:	fff0c007 	.word	0xfff0c007

08001d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 80b9 	bne.w	8001ec6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Start_DMA+0x2e>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0b4      	b.n	8001ecc <HAL_ADC_Start_DMA+0x198>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_ADC_Start_DMA+0x1a0>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80a0 	bne.w	8001eb8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fd03 	bl	8002784 <ADC_Enable>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 8092 	bne.w	8001eae <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_ADC_Start_DMA+0x1a0>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_Start_DMA+0x80>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db2:	d115      	bne.n	8001de0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d027      	beq.n	8001e1e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dde:	e01e      	b.n	8001e1e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df4:	d004      	beq.n	8001e00 <HAL_ADC_Start_DMA+0xcc>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <HAL_ADC_Start_DMA+0x1a4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d10e      	bne.n	8001e1e <HAL_ADC_Start_DMA+0xea>
 8001e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d106      	bne.n	8001e3a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f023 0206 	bic.w	r2, r3, #6
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_ADC_Start_DMA+0x1a8>)
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_ADC_Start_DMA+0x1ac>)
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <HAL_ADC_Start_DMA+0x1b0>)
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	221c      	movs	r2, #28
 8001e66:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0210 	orr.w	r2, r2, #16
 8001e76:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3340      	adds	r3, #64	; 0x40
 8001e92:	4619      	mov	r1, r3
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f000 ff4c 	bl	8002d34 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0204 	orr.w	r2, r2, #4
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e00d      	b.n	8001eca <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001eb6:	e008      	b.n	8001eca <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ec4:	e001      	b.n	8001eca <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	50000300 	.word	0x50000300
 8001ed8:	50000100 	.word	0x50000100
 8001edc:	080026b9 	.word	0x080026b9
 8001ee0:	08002733 	.word	0x08002733
 8001ee4:	0800274f 	.word	0x0800274f

08001ee8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Stop_DMA+0x1a>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e050      	b.n	8001fa4 <HAL_ADC_Stop_DMA+0xbc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f0a:	216c      	movs	r1, #108	; 0x6c
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fd03 	bl	8002918 <ADC_ConversionStop>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d13e      	bne.n	8001f9a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d10f      	bne.n	8001f58 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 ff58 	bl	8002df2 <HAL_DMA_Abort>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0210 	bic.w	r2, r2, #16
 8001f66:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fc6c 	bl	800284c <ADC_Disable>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fc66 	bl	800284c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b09b      	sub	sp, #108	; 0x6c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x22>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e2a4      	b.n	8002518 <HAL_ADC_ConfigChannel+0x56c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 8288 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d81c      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	461a      	mov	r2, r3
 8002002:	231f      	movs	r3, #31
 8002004:	4093      	lsls	r3, r2
 8002006:	43db      	mvns	r3, r3
 8002008:	4019      	ands	r1, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
 8002026:	e063      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d81e      	bhi.n	800206e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	3b1e      	subs	r3, #30
 8002044:	221f      	movs	r2, #31
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	4019      	ands	r1, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	3b1e      	subs	r3, #30
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	; 0x34
 800206c:	e040      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b0e      	cmp	r3, #14
 8002074:	d81e      	bhi.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	3b3c      	subs	r3, #60	; 0x3c
 800208a:	221f      	movs	r2, #31
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	4019      	ands	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	3b3c      	subs	r3, #60	; 0x3c
 80020a6:	fa00 f203 	lsl.w	r2, r0, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
 80020b2:	e01d      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	3b5a      	subs	r3, #90	; 0x5a
 80020c8:	221f      	movs	r2, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4019      	ands	r1, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	3b5a      	subs	r3, #90	; 0x5a
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80e5 	bne.w	80022ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d91c      	bls.n	8002142 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4019      	ands	r1, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6898      	ldr	r0, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	3b1e      	subs	r3, #30
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e019      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6959      	ldr	r1, [r3, #20]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	3b01      	subs	r3, #1
 8002194:	2b03      	cmp	r3, #3
 8002196:	d84f      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x28c>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021d3 	.word	0x080021d3
 80021a8:	080021f5 	.word	0x080021f5
 80021ac:	08002217 	.word	0x08002217
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b6:	4b94      	ldr	r3, [pc, #592]	; (8002408 <HAL_ADC_ConfigChannel+0x45c>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	0691      	lsls	r1, r2, #26
 80021c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c2:	430a      	orrs	r2, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d0:	e07e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021d8:	4b8b      	ldr	r3, [pc, #556]	; (8002408 <HAL_ADC_ConfigChannel+0x45c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	0691      	lsls	r1, r2, #26
 80021e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021e4:	430a      	orrs	r2, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021f2:	e06d      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_ADC_ConfigChannel+0x45c>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	0691      	lsls	r1, r2, #26
 8002204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002206:	430a      	orrs	r2, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002212:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002214:	e05c      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800221c:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <HAL_ADC_ConfigChannel+0x45c>)
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	0691      	lsls	r1, r2, #26
 8002226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002228:	430a      	orrs	r2, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002234:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002236:	e04b      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	069b      	lsls	r3, r3, #26
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800225a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	069b      	lsls	r3, r3, #26
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800227e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	069b      	lsls	r3, r3, #26
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80022c8:	e001      	b.n	80022ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80022ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x344>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x344>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x346>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 810a 	bne.w	800250c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00f      	beq.n	8002320 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800231e:	e049      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b09      	cmp	r3, #9
 8002340:	d91c      	bls.n	800237c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6999      	ldr	r1, [r3, #24]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b1b      	subs	r3, #27
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	4019      	ands	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6898      	ldr	r0, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	3b1b      	subs	r3, #27
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	619a      	str	r2, [r3, #24]
 800237a:	e01b      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6959      	ldr	r1, [r3, #20]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	2207      	movs	r2, #7
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	4019      	ands	r1, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6898      	ldr	r0, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_ADC_ConfigChannel+0x460>)
 80023b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d105      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023d0:	2b11      	cmp	r3, #17
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	f040 8091 	bne.w	800250c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 808a 	bne.w	800250c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002400:	d108      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x468>
 8002402:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_ADC_ConfigChannel+0x464>)
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e008      	b.n	800241a <HAL_ADC_ConfigChannel+0x46e>
 8002408:	83fff000 	.word	0x83fff000
 800240c:	50000300 	.word	0x50000300
 8002410:	50000100 	.word	0x50000100
 8002414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002418:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_ADC_ConfigChannel+0x48e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x48e>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_ADC_ConfigChannel+0x490>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d150      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002440:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x4b6>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x4b6>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_ADC_ConfigChannel+0x4b8>
 8002462:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13c      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b10      	cmp	r3, #16
 800246e:	d11d      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x500>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002478:	d118      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800247a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002484:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_ADC_ConfigChannel+0x578>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_ADC_ConfigChannel+0x57c>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9a      	lsrs	r2, r3, #18
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024aa:	e02e      	b.n	800250a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x520>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024ca:	e01e      	b.n	800250a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b12      	cmp	r3, #18
 80024d2:	d11a      	bne.n	800250a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e0:	e013      	b.n	800250a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024f4:	e00a      	b.n	800250c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002508:	e000      	b.n	800250c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800250a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002518:	4618      	mov	r0, r3
 800251a:	376c      	adds	r7, #108	; 0x6c
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800252c:	b480      	push	{r7}
 800252e:	b099      	sub	sp, #100	; 0x64
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002544:	d102      	bne.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	e002      	b.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800254c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002550:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0a2      	b.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002566:	2302      	movs	r3, #2
 8002568:	e09b      	b.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d17f      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d179      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258c:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800258e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d040      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025aa:	035b      	lsls	r3, r3, #13
 80025ac:	430b      	orrs	r3, r1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80025d4:	2300      	movs	r3, #0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d15c      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d14b      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002604:	f023 030f 	bic.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	430a      	orrs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002618:	e03c      	b.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800261a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002624:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d108      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d123      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002668:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800266e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002676:	f023 030f 	bic.w	r3, r3, #15
 800267a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800267c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800267e:	e009      	b.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002692:	e000      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002694:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800269e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026a2:	4618      	mov	r0, r3
 80026a4:	3764      	adds	r7, #100	; 0x64
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	50000100 	.word	0x50000100
 80026b4:	50000300 	.word	0x50000300

080026b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d126      	bne.n	8002720 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d115      	bne.n	8002718 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff f95b 	bl	80019d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800271e:	e004      	b.n	800272a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff f951 	bl	80019e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff f941 	bl	80019fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d108      	bne.n	80027b0 <ADC_Enable+0x2c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <ADC_Enable+0x2c>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <ADC_Enable+0x2e>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d143      	bne.n	800283e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <ADC_Enable+0xc4>)
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02f      	b.n	8002840 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027f0:	f7ff f8c0 	bl	8001974 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027f6:	e01b      	b.n	8002830 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027f8:	f7ff f8bc 	bl	8001974 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d914      	bls.n	8002830 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d00d      	beq.n	8002830 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d1dc      	bne.n	80027f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	8000003f 	.word	0x8000003f

0800284c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <ADC_Disable+0x2c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <ADC_Disable+0x2c>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <ADC_Disable+0x2e>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d047      	beq.n	800290e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030d 	and.w	r3, r3, #13
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10f      	bne.n	80028ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0202 	orr.w	r2, r2, #2
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2203      	movs	r2, #3
 80028a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028a4:	f7ff f866 	bl	8001974 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028aa:	e029      	b.n	8002900 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e023      	b.n	8002910 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028c8:	f7ff f854 	bl	8001974 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d914      	bls.n	8002900 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10d      	bne.n	8002900 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0210 	orr.w	r2, r3, #16
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e007      	b.n	8002910 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d0dc      	beq.n	80028c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 809b 	beq.w	8002a74 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294c:	d12a      	bne.n	80029a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002952:	2b01      	cmp	r3, #1
 8002954:	d126      	bne.n	80029a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800295a:	2b01      	cmp	r3, #1
 800295c:	d122      	bne.n	80029a4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800295e:	230c      	movs	r3, #12
 8002960:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002962:	e014      	b.n	800298e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4a46      	ldr	r2, [pc, #280]	; (8002a80 <ADC_ConversionStop+0x168>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d90d      	bls.n	8002988 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e076      	b.n	8002a76 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3301      	adds	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d1e3      	bne.n	8002964 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b60      	cmp	r3, #96	; 0x60
 80029a8:	d015      	beq.n	80029d6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d10e      	bne.n	80029d6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0210 	orr.w	r2, r2, #16
 80029d4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d015      	beq.n	8002a08 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d10e      	bne.n	8002a08 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b60      	cmp	r3, #96	; 0x60
 8002a0c:	d005      	beq.n	8002a1a <ADC_ConversionStop+0x102>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b6c      	cmp	r3, #108	; 0x6c
 8002a12:	d105      	bne.n	8002a20 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a14:	230c      	movs	r3, #12
 8002a16:	617b      	str	r3, [r7, #20]
        break;
 8002a18:	e005      	b.n	8002a26 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	617b      	str	r3, [r7, #20]
        break;
 8002a1e:	e002      	b.n	8002a26 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a20:	2304      	movs	r3, #4
 8002a22:	617b      	str	r3, [r7, #20]
        break;
 8002a24:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a26:	f7fe ffa5 	bl	8001974 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a2c:	e01b      	b.n	8002a66 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a2e:	f7fe ffa1 	bl	8001974 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b0b      	cmp	r3, #11
 8002a3a:	d914      	bls.n	8002a66 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1dc      	bne.n	8002a2e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000993ff 	.word	0x000993ff

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff3e 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff8e 	bl	8002b78 <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5d 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff31 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffa2 	bl	8002be0 <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e037      	b.n	8002d2c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f97a 	bl	8003008 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}  
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA_Start_IT+0x20>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e04a      	b.n	8002dea <HAL_DMA_Start_IT+0xb6>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d13a      	bne.n	8002ddc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f90d 	bl	8002faa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 020e 	orr.w	r2, r2, #14
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e00f      	b.n	8002dca <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 020a 	orr.w	r2, r2, #10
 8002db8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e005      	b.n	8002de8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
 8002de6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d008      	beq.n	8002e16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2204      	movs	r2, #4
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e020      	b.n	8002e58 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 020e 	bic.w	r2, r2, #14
 8002e24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2204      	movs	r2, #4
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d024      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x72>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01f      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d06a      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	e065      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2202      	movs	r2, #2
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02c      	beq.n	8002f40 <HAL_DMA_IRQHandler+0xdc>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d027      	beq.n	8002f40 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 020a 	bic.w	r2, r2, #10
 8002f0c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2102      	movs	r1, #2
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d035      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002f3e:	e030      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2208      	movs	r2, #8
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d028      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d023      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 020e 	bic.w	r2, r2, #14
 8002f68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
    }
  }
}  
 8002fa0:	e7ff      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x13e>
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d108      	bne.n	8002fea <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fe8:	e007      	b.n	8002ffa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	60da      	str	r2, [r3, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <DMA_CalcBaseAndBitshift+0x34>)
 8003018:	4413      	add	r3, r2
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <DMA_CalcBaseAndBitshift+0x38>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	009a      	lsls	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a06      	ldr	r2, [pc, #24]	; (8003044 <DMA_CalcBaseAndBitshift+0x3c>)
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	bffdfff8 	.word	0xbffdfff8
 8003040:	cccccccd 	.word	0xcccccccd
 8003044:	40020000 	.word	0x40020000

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003056:	e14e      	b.n	80032f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8140 	beq.w	80032f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d005      	beq.n	8003088 <HAL_GPIO_Init+0x40>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0201 	and.w	r2, r3, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d017      	beq.n	8003126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d123      	bne.n	800317a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	6939      	ldr	r1, [r7, #16]
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 809a 	beq.w	80032f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_GPIO_Init+0x2cc>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a54      	ldr	r2, [pc, #336]	; (8003314 <HAL_GPIO_Init+0x2cc>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b52      	ldr	r3, [pc, #328]	; (8003314 <HAL_GPIO_Init+0x2cc>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031fe:	d013      	beq.n	8003228 <HAL_GPIO_Init+0x1e0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_GPIO_Init+0x2d4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00d      	beq.n	8003224 <HAL_GPIO_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a45      	ldr	r2, [pc, #276]	; (8003320 <HAL_GPIO_Init+0x2d8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <HAL_GPIO_Init+0x1d8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a44      	ldr	r2, [pc, #272]	; (8003324 <HAL_GPIO_Init+0x2dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_GPIO_Init+0x1d4>
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_GPIO_Init+0x1e2>
 800321c:	2305      	movs	r3, #5
 800321e:	e004      	b.n	800322a <HAL_GPIO_Init+0x1e2>
 8003220:	2302      	movs	r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_Init+0x1e2>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_GPIO_Init+0x1e2>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4093      	lsls	r3, r2
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800323a:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_GPIO_Init+0x2d0>)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800326c:	4a2e      	ldr	r2, [pc, #184]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003296:	4a24      	ldr	r2, [pc, #144]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329c:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032ea:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_GPIO_Init+0x2e0>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aea9 	bne.w	8003058 <HAL_GPIO_Init+0x10>
  }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000
 800331c:	48000400 	.word	0x48000400
 8003320:	48000800 	.word	0x48000800
 8003324:	48000c00 	.word	0x48000c00
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e001      	b.n	800334e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003378:	e002      	b.n	8003380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003392:	af00      	add	r7, sp, #0
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f001 b823 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 817d 	beq.w	80036c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033c8:	4bbc      	ldr	r3, [pc, #752]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00c      	beq.n	80033ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d4:	4bb9      	ldr	r3, [pc, #740]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d15c      	bne.n	800349a <HAL_RCC_OscConfig+0x10e>
 80033e0:	4bb6      	ldr	r3, [pc, #728]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d155      	bne.n	800349a <HAL_RCC_OscConfig+0x10e>
 80033ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_RCC_OscConfig+0x94>
 800341a:	4ba8      	ldr	r3, [pc, #672]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e015      	b.n	800344c <HAL_RCC_OscConfig+0xc0>
 8003420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003424:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800343c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003448:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003450:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003454:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003458:	fa92 f2a2 	rbit	r2, r2
 800345c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003460:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	f042 0220 	orr.w	r2, r2, #32
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f002 021f 	and.w	r2, r2, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 811f 	beq.w	80036c0 <HAL_RCC_OscConfig+0x334>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8116 	bne.w	80036c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f000 bfaf 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x12e>
 80034ac:	4b83      	ldr	r3, [pc, #524]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a82      	ldr	r2, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e036      	b.n	8003528 <HAL_RCC_OscConfig+0x19c>
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x158>
 80034ca:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7b      	ldr	r2, [pc, #492]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b79      	ldr	r3, [pc, #484]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a78      	ldr	r2, [pc, #480]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e021      	b.n	8003528 <HAL_RCC_OscConfig+0x19c>
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x184>
 80034f6:	4b71      	ldr	r3, [pc, #452]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a70      	ldr	r2, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6d      	ldr	r2, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x19c>
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a69      	ldr	r2, [pc, #420]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a66      	ldr	r2, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	f023 020f 	bic.w	r2, r3, #15
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	495f      	ldr	r1, [pc, #380]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 800353e:	4313      	orrs	r3, r2
 8003540:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d059      	beq.n	8003606 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fa0f 	bl	8001974 <HAL_GetTick>
 8003556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fa0a 	bl	8001974 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	; 0x64
 800356a:	d902      	bls.n	8003572 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	f000 bf43 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003576:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003586:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0x218>
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e015      	b.n	80035d0 <HAL_RCC_OscConfig+0x244>
 80035a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	f042 0220 	orr.w	r2, r2, #32
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f002 021f 	and.w	r2, r2, #31
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ab      	beq.n	800355c <HAL_RCC_OscConfig+0x1d0>
 8003604:	e05d      	b.n	80036c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe f9b5 	bl	8001974 <HAL_GetTick>
 800360a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe f9b0 	bl	8001974 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b64      	cmp	r3, #100	; 0x64
 800361e:	d902      	bls.n	8003626 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	f000 bee9 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800363a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_RCC_OscConfig+0x2cc>
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e015      	b.n	8003684 <HAL_RCC_OscConfig+0x2f8>
 8003658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800365c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003670:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003674:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_RCC_OscConfig+0x330>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003688:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800368c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003690:	fa92 f2a2 	rbit	r2, r2
 8003694:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003698:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ab      	bne.n	8003610 <HAL_RCC_OscConfig+0x284>
 80036b8:	e003      	b.n	80036c2 <HAL_RCC_OscConfig+0x336>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 817d 	beq.w	80039d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036d8:	4ba6      	ldr	r3, [pc, #664]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036e4:	4ba3      	ldr	r3, [pc, #652]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d172      	bne.n	80037d6 <HAL_RCC_OscConfig+0x44a>
 80036f0:	4ba0      	ldr	r3, [pc, #640]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d16c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x44a>
 80036fc:	2302      	movs	r3, #2
 80036fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800370e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0x3a0>
 8003726:	4b93      	ldr	r3, [pc, #588]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	e013      	b.n	8003754 <HAL_RCC_OscConfig+0x3c8>
 800372c:	2302      	movs	r3, #2
 800372e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003744:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003750:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800375a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003766:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f042 0220 	orr.w	r2, r2, #32
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f002 021f 	and.w	r2, r2, #31
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCC_OscConfig+0x410>
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f000 be2e 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	21f8      	movs	r1, #248	; 0xf8
 80037b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037ba:	fa91 f1a1 	rbit	r1, r1
 80037be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037c6:	fab1 f181 	clz	r1, r1
 80037ca:	b2c9      	uxtb	r1, r1
 80037cc:	408b      	lsls	r3, r1
 80037ce:	4969      	ldr	r1, [pc, #420]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d4:	e0fd      	b.n	80039d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8088 	beq.w	80038f8 <HAL_RCC_OscConfig+0x56c>
 80037e8:	2301      	movs	r3, #1
 80037ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	461a      	mov	r2, r3
 8003810:	2301      	movs	r3, #1
 8003812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe f8ae 	bl	8001974 <HAL_GetTick>
 8003818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381e:	f7fe f8a9 	bl	8001974 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	f000 bde2 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003834:	2302      	movs	r3, #2
 8003836:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003846:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HAL_RCC_OscConfig+0x4d8>
 800385e:	4b45      	ldr	r3, [pc, #276]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	e013      	b.n	800388c <HAL_RCC_OscConfig+0x500>
 8003864:	2302      	movs	r3, #2
 8003866:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003876:	2302      	movs	r3, #2
 8003878:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800387c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2202      	movs	r2, #2
 800388e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003892:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003896:	fa92 f2a2 	rbit	r2, r2
 800389a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800389e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038a2:	fab2 f282 	clz	r2, r2
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f002 021f 	and.w	r2, r2, #31
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f202 	lsl.w	r2, r1, r2
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0af      	beq.n	800381e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	21f8      	movs	r1, #248	; 0xf8
 80038d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038dc:	fa91 f1a1 	rbit	r1, r1
 80038e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038e8:	fab1 f181 	clz	r1, r1
 80038ec:	b2c9      	uxtb	r1, r1
 80038ee:	408b      	lsls	r3, r1
 80038f0:	4920      	ldr	r1, [pc, #128]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
 80038f6:	e06c      	b.n	80039d2 <HAL_RCC_OscConfig+0x646>
 80038f8:	2301      	movs	r3, #1
 80038fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800390a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe f826 	bl	8001974 <HAL_GetTick>
 8003928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392e:	f7fe f821 	bl	8001974 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	f000 bd5a 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003944:	2302      	movs	r3, #2
 8003946:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d104      	bne.n	8003978 <HAL_RCC_OscConfig+0x5ec>
 800396e:	4b01      	ldr	r3, [pc, #4]	; (8003974 <HAL_RCC_OscConfig+0x5e8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e015      	b.n	80039a0 <HAL_RCC_OscConfig+0x614>
 8003974:	40021000 	.word	0x40021000
 8003978:	2302      	movs	r3, #2
 800397a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800398a:	2302      	movs	r3, #2
 800398c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003990:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800399c:	4bc8      	ldr	r3, [pc, #800]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ad      	bne.n	800392e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8110 	beq.w	8003c08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d079      	beq.n	8003aec <HAL_RCC_OscConfig+0x760>
 80039f8:	2301      	movs	r3, #1
 80039fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4bab      	ldr	r3, [pc, #684]	; (8003cc4 <HAL_RCC_OscConfig+0x938>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2301      	movs	r3, #1
 8003a20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd ffa7 	bl	8001974 <HAL_GetTick>
 8003a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fd ffa2 	bl	8001974 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f000 bcdb 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003a42:	2302      	movs	r3, #2
 8003a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a80:	2202      	movs	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	6019      	str	r1, [r3, #0]
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f1a3 	rbit	r1, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ac2:	6019      	str	r1, [r3, #0]
  return result;
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0a0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x6a0>
 8003aea:	e08d      	b.n	8003c08 <HAL_RCC_OscConfig+0x87c>
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b0e:	601a      	str	r2, [r3, #0]
  return result;
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_OscConfig+0x938>)
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd ff21 	bl	8001974 <HAL_GetTick>
 8003b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd ff1c 	bl	8001974 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d902      	bls.n	8003b4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	f000 bc55 	b.w	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	fa93 f2a3 	rbit	r2, r3
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f1a3 	rbit	r1, r3
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003be0:	6019      	str	r1, [r3, #0]
  return result;
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d197      	bne.n	8003b38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 81a1 	beq.w	8003f60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d116      	bne.n	8003c5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	61d3      	str	r3, [r2, #28]
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCC_OscConfig+0x93c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_RCC_OscConfig+0x93c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <HAL_RCC_OscConfig+0x93c>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c76:	f7fd fe7d 	bl	8001974 <HAL_GetTick>
 8003c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	e009      	b.n	8003c94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c80:	f7fd fe78 	bl	8001974 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e3b1      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x93c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10d      	bne.n	8003ccc <HAL_RCC_OscConfig+0x940>
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4a02      	ldr	r2, [pc, #8]	; (8003cc0 <HAL_RCC_OscConfig+0x934>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6213      	str	r3, [r2, #32]
 8003cbc:	e03c      	b.n	8003d38 <HAL_RCC_OscConfig+0x9ac>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	10908120 	.word	0x10908120
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x96a>
 8003cdc:	4bc1      	ldr	r3, [pc, #772]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4ac0      	ldr	r2, [pc, #768]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6213      	str	r3, [r2, #32]
 8003ce8:	4bbe      	ldr	r3, [pc, #760]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4abd      	ldr	r2, [pc, #756]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003cee:	f023 0304 	bic.w	r3, r3, #4
 8003cf2:	6213      	str	r3, [r2, #32]
 8003cf4:	e020      	b.n	8003d38 <HAL_RCC_OscConfig+0x9ac>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x994>
 8003d06:	4bb7      	ldr	r3, [pc, #732]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4ab6      	ldr	r2, [pc, #728]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	6213      	str	r3, [r2, #32]
 8003d12:	4bb4      	ldr	r3, [pc, #720]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4ab3      	ldr	r2, [pc, #716]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6213      	str	r3, [r2, #32]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0x9ac>
 8003d20:	4bb0      	ldr	r3, [pc, #704]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4aaf      	ldr	r2, [pc, #700]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6213      	str	r3, [r2, #32]
 8003d2c:	4bad      	ldr	r3, [pc, #692]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4aac      	ldr	r2, [pc, #688]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003d32:	f023 0304 	bic.w	r3, r3, #4
 8003d36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8081 	beq.w	8003e4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fe13 	bl	8001974 <HAL_GetTick>
 8003d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fd fe0e 	bl	8001974 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e345      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d74:	2202      	movs	r2, #2
 8003d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d98:	2202      	movs	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003db2:	601a      	str	r2, [r3, #0]
  return result;
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003dbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xa4c>
 8003dd2:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	e013      	b.n	8003e00 <HAL_RCC_OscConfig+0xa74>
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003de0:	2202      	movs	r2, #2
 8003de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	fa93 f2a3 	rbit	r2, r3
 8003df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	4b79      	ldr	r3, [pc, #484]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e08:	2102      	movs	r1, #2
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	fa92 f1a2 	rbit	r1, r2
 8003e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e22:	6011      	str	r1, [r2, #0]
  return result;
 8003e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	fab2 f282 	clz	r2, r2
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f002 021f 	and.w	r2, r2, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d084      	beq.n	8003d54 <HAL_RCC_OscConfig+0x9c8>
 8003e4a:	e07f      	b.n	8003f4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fd92 	bl	8001974 <HAL_GetTick>
 8003e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	e00b      	b.n	8003e6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fd8d 	bl	8001974 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e2c4      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e76:	2202      	movs	r2, #2
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003eb4:	601a      	str	r2, [r3, #0]
  return result;
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ebe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0302 	orr.w	r3, r3, #2
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_OscConfig+0xb4e>
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	e013      	b.n	8003f02 <HAL_RCC_OscConfig+0xb76>
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	fa93 f2a3 	rbit	r2, r3
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	fa92 f1a2 	rbit	r1, r2
 8003f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f24:	6011      	str	r1, [r2, #0]
  return result;
 8003f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	fab2 f282 	clz	r2, r2
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	f002 021f 	and.w	r2, r2, #31
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d184      	bne.n	8003e56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8242 	beq.w	80043f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCC_OscConfig+0xc58>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	f000 8213 	beq.w	80043a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f040 8162 	bne.w	8004256 <HAL_RCC_OscConfig+0xeca>
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fa93 f2a3 	rbit	r2, r3
 8003fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fb6:	601a      	str	r2, [r3, #0]
  return result;
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003fc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fccc 	bl	8001974 <HAL_GetTick>
 8003fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCC_OscConfig+0xc70>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd fcc4 	bl	8001974 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1fd      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004020:	601a      	str	r2, [r3, #0]
  return result;
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800402a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <HAL_RCC_OscConfig+0xcba>
 8004040:	4bb0      	ldr	r3, [pc, #704]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	e027      	b.n	8004096 <HAL_RCC_OscConfig+0xd0a>
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800404e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004058:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	4b9c      	ldr	r3, [pc, #624]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800409a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800409e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040a2:	6011      	str	r1, [r2, #0]
 80040a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	fa92 f1a2 	rbit	r1, r2
 80040b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040ba:	6011      	str	r1, [r2, #0]
  return result;
 80040bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	fab2 f282 	clz	r2, r2
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f042 0220 	orr.w	r2, r2, #32
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f002 021f 	and.w	r2, r2, #31
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d182      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e2:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	430b      	orrs	r3, r1
 8004104:	497f      	ldr	r1, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	fa93 f2a3 	rbit	r2, r3
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800412e:	601a      	str	r2, [r3, #0]
  return result;
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004138:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	461a      	mov	r2, r3
 800414c:	2301      	movs	r3, #1
 800414e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fd fc10 	bl	8001974 <HAL_GetTick>
 8004154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004158:	e009      	b.n	800416e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd fc0b 	bl	8001974 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e144      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
 800416e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004172:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004180:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004192:	601a      	str	r2, [r3, #0]
  return result;
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800419c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe2c>
 80041b2:	4b54      	ldr	r3, [pc, #336]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	e027      	b.n	8004208 <HAL_RCC_OscConfig+0xe7c>
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f2a3 	rbit	r2, r3
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80041e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	fa93 f2a3 	rbit	r2, r3
 80041fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800420c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004210:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004214:	6011      	str	r1, [r2, #0]
 8004216:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800421a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	fa92 f1a2 	rbit	r1, r2
 8004224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004228:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800422c:	6011      	str	r1, [r2, #0]
  return result;
 800422e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004232:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	fab2 f282 	clz	r2, r2
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	f042 0220 	orr.w	r2, r2, #32
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	f002 021f 	and.w	r2, r2, #31
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f202 	lsl.w	r2, r1, r2
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d082      	beq.n	800415a <HAL_RCC_OscConfig+0xdce>
 8004254:	e0cf      	b.n	80043f6 <HAL_RCC_OscConfig+0x106a>
 8004256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800425e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	fa93 f2a3 	rbit	r2, r3
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800427a:	601a      	str	r2, [r3, #0]
  return result;
 800427c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004280:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004284:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	461a      	mov	r2, r3
 8004298:	2300      	movs	r3, #0
 800429a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fd fb6a 	bl	8001974 <HAL_GetTick>
 80042a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a4:	e009      	b.n	80042ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fd fb65 	bl	8001974 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e09e      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
 80042ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fa93 f2a3 	rbit	r2, r3
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80042de:	601a      	str	r2, [r3, #0]
  return result;
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80042e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d104      	bne.n	8004308 <HAL_RCC_OscConfig+0xf7c>
 80042fe:	4b01      	ldr	r3, [pc, #4]	; (8004304 <HAL_RCC_OscConfig+0xf78>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	e029      	b.n	8004358 <HAL_RCC_OscConfig+0xfcc>
 8004304:	40021000 	.word	0x40021000
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fa93 f2a3 	rbit	r2, r3
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x1078>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800435c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004360:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800436a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	fa92 f1a2 	rbit	r1, r2
 8004374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004378:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800437c:	6011      	str	r1, [r2, #0]
  return result;
 800437e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004382:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	fab2 f282 	clz	r2, r2
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f042 0220 	orr.w	r2, r2, #32
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	f002 021f 	and.w	r2, r2, #31
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d180      	bne.n	80042a6 <HAL_RCC_OscConfig+0xf1a>
 80043a4:	e027      	b.n	80043f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01e      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCC_OscConfig+0x1078>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b09e      	sub	sp, #120	; 0x78
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e162      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004420:	4b90      	ldr	r3, [pc, #576]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d910      	bls.n	8004450 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b8d      	ldr	r3, [pc, #564]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 0207 	bic.w	r2, r3, #7
 8004436:	498b      	ldr	r1, [pc, #556]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b89      	ldr	r3, [pc, #548]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e14a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b82      	ldr	r3, [pc, #520]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	497f      	ldr	r1, [pc, #508]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80dc 	beq.w	8004634 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d13c      	bne.n	80044fe <HAL_RCC_ClockConfig+0xf6>
 8004484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004488:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_ClockConfig+0xa6>
 80044a8:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	e00f      	b.n	80044ce <HAL_RCC_ClockConfig+0xc6>
 80044ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	667b      	str	r3, [r7, #100]	; 0x64
 80044bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c0:	663b      	str	r3, [r7, #96]	; 0x60
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ca:	4b67      	ldr	r3, [pc, #412]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80044d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d6:	fa92 f2a2 	rbit	r2, r2
 80044da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80044dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044de:	fab2 f282 	clz	r2, r2
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	f002 021f 	and.w	r2, r2, #31
 80044ee:	2101      	movs	r1, #1
 80044f0:	fa01 f202 	lsl.w	r2, r1, r2
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d17b      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0f3      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d13c      	bne.n	8004580 <HAL_RCC_ClockConfig+0x178>
 8004506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d102      	bne.n	8004530 <HAL_RCC_ClockConfig+0x128>
 800452a:	4b4f      	ldr	r3, [pc, #316]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	e00f      	b.n	8004550 <HAL_RCC_ClockConfig+0x148>
 8004530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	647b      	str	r3, [r7, #68]	; 0x44
 800453e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004542:	643b      	str	r3, [r7, #64]	; 0x40
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800454c:	4b46      	ldr	r3, [pc, #280]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004554:	63ba      	str	r2, [r7, #56]	; 0x38
 8004556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004558:	fa92 f2a2 	rbit	r2, r2
 800455c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800455e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	f042 0220 	orr.w	r2, r2, #32
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	f002 021f 	and.w	r2, r2, #31
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f202 	lsl.w	r2, r1, r2
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d13a      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b2      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
 8004580:	2302      	movs	r3, #2
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x1a0>
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	e00d      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1bc>
 80045a8:	2302      	movs	r3, #2
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	2302      	movs	r3, #2
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2202      	movs	r2, #2
 80045c6:	61ba      	str	r2, [r7, #24]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	fa92 f2a2 	rbit	r2, r2
 80045ce:	617a      	str	r2, [r7, #20]
  return result;
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	fab2 f282 	clz	r2, r2
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	f042 0220 	orr.w	r2, r2, #32
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	f002 021f 	and.w	r2, r2, #31
 80045e2:	2101      	movs	r1, #1
 80045e4:	fa01 f202 	lsl.w	r2, r1, r2
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e079      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 0203 	bic.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	491a      	ldr	r1, [pc, #104]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004604:	f7fd f9b6 	bl	8001974 <HAL_GetTick>
 8004608:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	e00a      	b.n	8004622 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460c:	f7fd f9b2 	bl	8001974 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e061      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <HAL_RCC_ClockConfig+0x260>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 020c 	and.w	r2, r3, #12
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	429a      	cmp	r2, r3
 8004632:	d1eb      	bne.n	800460c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d214      	bcs.n	800466c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4906      	ldr	r1, [pc, #24]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCC_ClockConfig+0x25c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e040      	b.n	80046e6 <HAL_RCC_ClockConfig+0x2de>
 8004664:	40022000 	.word	0x40022000
 8004668:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x2e8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x2e8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x2e8>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4912      	ldr	r1, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x2e8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046aa:	f000 f829 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046ae:	4601      	mov	r1, r0
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCC_ClockConfig+0x2e8>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	22f0      	movs	r2, #240	; 0xf0
 80046ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	fa92 f2a2 	rbit	r2, r2
 80046c2:	60fa      	str	r2, [r7, #12]
  return result;
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	fab2 f282 	clz	r2, r2
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	40d3      	lsrs	r3, r2
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x2ec>)
 80046d0:	5cd3      	ldrb	r3, [r2, r3]
 80046d2:	fa21 f303 	lsr.w	r3, r1, r3
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <HAL_RCC_ClockConfig+0x2f0>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <HAL_RCC_ClockConfig+0x2f4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd f904 	bl	80018ec <HAL_InitTick>
  
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3778      	adds	r7, #120	; 0x78
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08008a3c 	.word	0x08008a3c
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000004 	.word	0x20000004

08004700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b08b      	sub	sp, #44	; 0x2c
 8004704:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x30>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x36>
 800472e:	e03c      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004732:	623b      	str	r3, [r7, #32]
      break;
 8004734:	e03c      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800473c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004740:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	fa92 f2a2 	rbit	r2, r2
 8004748:	607a      	str	r2, [r7, #4]
  return result;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	fab2 f282 	clz	r2, r2
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	40d3      	lsrs	r3, r2
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004756:	5cd3      	ldrb	r3, [r2, r3]
 8004758:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800475a:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	220f      	movs	r2, #15
 8004764:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	fa92 f2a2 	rbit	r2, r2
 800476c:	60fa      	str	r2, [r7, #12]
  return result;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	fab2 f282 	clz	r2, r2
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	40d3      	lsrs	r3, r2
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	e004      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	623b      	str	r3, [r7, #32]
      break;
 80047a8:	e002      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ac:	623b      	str	r3, [r7, #32]
      break;
 80047ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	372c      	adds	r7, #44	; 0x2c
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	007a1200 	.word	0x007a1200
 80047c8:	08008a54 	.word	0x08008a54
 80047cc:	08008a64 	.word	0x08008a64
 80047d0:	003d0900 	.word	0x003d0900

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80047f2:	f7ff ffef 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f6:	4601      	mov	r1, r0
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004800:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004804:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	fa92 f2a2 	rbit	r2, r2
 800480c:	603a      	str	r2, [r7, #0]
  return result;
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	fab2 f282 	clz	r2, r2
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	40d3      	lsrs	r3, r2
 8004818:	4a04      	ldr	r2, [pc, #16]	; (800482c <HAL_RCC_GetPCLK1Freq+0x40>)
 800481a:	5cd3      	ldrb	r3, [r2, r3]
 800481c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	08008a4c 	.word	0x08008a4c

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004836:	f7ff ffcd 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800483a:	4601      	mov	r1, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004844:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004848:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	fa92 f2a2 	rbit	r2, r2
 8004850:	603a      	str	r2, [r7, #0]
  return result;
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	fab2 f282 	clz	r2, r2
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	40d3      	lsrs	r3, r2
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x40>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	08008a4c 	.word	0x08008a4c

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b092      	sub	sp, #72	; 0x48
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80cd 	beq.w	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004898:	4b8e      	ldr	r3, [pc, #568]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10e      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4a8a      	ldr	r2, [pc, #552]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ae:	61d3      	str	r3, [r2, #28]
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b85      	ldr	r3, [pc, #532]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d118      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b82      	ldr	r3, [pc, #520]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a81      	ldr	r2, [pc, #516]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fd f84b 	bl	8001974 <HAL_GetTick>
 80048de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fd f847 	bl	8001974 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b64      	cmp	r3, #100	; 0x64
 80048ee:	d901      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0ea      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004900:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d07d      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491a:	429a      	cmp	r2, r3
 800491c:	d076      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800491e:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	461a      	mov	r2, r3
 8004948:	2301      	movs	r3, #1
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800495a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	4b5d      	ldr	r3, [pc, #372]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004970:	4a58      	ldr	r2, [pc, #352]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d045      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fff8 	bl	8001974 <HAL_GetTick>
 8004984:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004986:	e00a      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fc fff4 	bl	8001974 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e095      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x256>
 800499e:	2302      	movs	r3, #2
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	2302      	movs	r3, #2
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	61fb      	str	r3, [r7, #28]
  return result;
 80049b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	fab3 f383 	clz	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f043 0302 	orr.w	r3, r3, #2
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d102      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049cc:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	e007      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	fa93 f3a3 	rbit	r3, r3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2202      	movs	r2, #2
 80049e4:	613a      	str	r2, [r7, #16]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	fa92 f2a2 	rbit	r2, r2
 80049ec:	60fa      	str	r2, [r7, #12]
  return result;
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	fab2 f282 	clz	r2, r2
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	f002 021f 	and.w	r2, r2, #31
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0bd      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a0c:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	492e      	ldr	r1, [pc, #184]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3e:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f023 0203 	bic.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f023 0210 	bic.w	r2, r3, #16
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	491a      	ldr	r1, [pc, #104]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a7a:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	4913      	ldr	r1, [pc, #76]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	490b      	ldr	r1, [pc, #44]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3748      	adds	r7, #72	; 0x48
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	10908100 	.word	0x10908100

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e049      	b.n	8004b86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc fe06 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 faf6 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e038      	b.n	8004c1a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <HAL_TIM_Base_Start+0x98>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x48>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x48>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_TIM_Base_Start+0x9c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x48>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_TIM_Base_Start+0xa0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d115      	bne.n	8004c04 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <HAL_TIM_Base_Start+0xa4>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d015      	beq.n	8004c16 <HAL_TIM_Base_Start+0x86>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d011      	beq.n	8004c16 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	e008      	b.n	8004c16 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	00010007 	.word	0x00010007

08004c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d001      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e040      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0x58>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d009      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0x58>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0x58>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d115      	bne.n	8004cbc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_TIM_Base_Start_IT+0xb4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d015      	beq.n	8004cce <HAL_TIM_Base_Start_IT+0x96>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d011      	beq.n	8004cce <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	e008      	b.n	8004cce <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d122      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11b      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0202 	mvn.w	r2, #2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9ce 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9c0 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9d1 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d122      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d11b      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0204 	mvn.w	r2, #4
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9a4 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f996 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f9a7 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0208 	mvn.w	r2, #8
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f97a 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f96c 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f97d 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0210 	mvn.w	r2, #16
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f950 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f942 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f953 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0201 	mvn.w	r2, #1
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc f9fa 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b80      	cmp	r3, #128	; 0x80
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fac2 	bl	8005424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fab5 	bl	8005438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f901 	bl	80050fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0220 	mvn.w	r2, #32
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa75 	bl	8005410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_ConfigClockSource+0x1c>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e0b6      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x18a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d03e      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xd8>
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8c:	f200 8087 	bhi.w	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	f000 8086 	beq.w	80050a4 <HAL_TIM_ConfigClockSource+0x176>
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9c:	d87f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004f9e:	2b70      	cmp	r3, #112	; 0x70
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0xaa>
 8004fa2:	2b70      	cmp	r3, #112	; 0x70
 8004fa4:	d87b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fa6:	2b60      	cmp	r3, #96	; 0x60
 8004fa8:	d050      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x11e>
 8004faa:	2b60      	cmp	r3, #96	; 0x60
 8004fac:	d877      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fae:	2b50      	cmp	r3, #80	; 0x50
 8004fb0:	d03c      	beq.n	800502c <HAL_TIM_ConfigClockSource+0xfe>
 8004fb2:	2b50      	cmp	r3, #80	; 0x50
 8004fb4:	d873      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d058      	beq.n	800506c <HAL_TIM_ConfigClockSource+0x13e>
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d86f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d064      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15e>
 8004fc2:	2b30      	cmp	r3, #48	; 0x30
 8004fc4:	d86b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d060      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15e>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d867      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x170>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d05c      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15e>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d05a      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15e>
 8004fd6:	e062      	b.n	800509e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 f984 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e04f      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f000 f96d 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005028:	609a      	str	r2, [r3, #8]
      break;
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	461a      	mov	r2, r3
 800503a:	f000 f8e1 	bl	8005200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2150      	movs	r1, #80	; 0x50
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f93a 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800504a:	e02c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	461a      	mov	r2, r3
 800505a:	f000 f900 	bl	800525e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2160      	movs	r1, #96	; 0x60
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f92a 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800506a:	e01c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	461a      	mov	r2, r3
 800507a:	f000 f8c1 	bl	8005200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f91a 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800508a:	e00c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 f911 	bl	80052be <TIM_ITRx_SetConfig>
      break;
 800509c:	e003      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a32      	ldr	r2, [pc, #200]	; (80051ec <TIM_Base_SetConfig+0xdc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x28>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x28>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <TIM_Base_SetConfig+0xe0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <TIM_Base_SetConfig+0xdc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <TIM_Base_SetConfig+0x6a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d00f      	beq.n	800517a <TIM_Base_SetConfig+0x6a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <TIM_Base_SetConfig+0xe0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x6a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <TIM_Base_SetConfig+0xe4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x6a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <TIM_Base_SetConfig+0xe8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x6a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a21      	ldr	r2, [pc, #132]	; (80051fc <TIM_Base_SetConfig+0xec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <TIM_Base_SetConfig+0xdc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0xc0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <TIM_Base_SetConfig+0xe4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0xc0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <TIM_Base_SetConfig+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <TIM_Base_SetConfig+0xec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d103      	bne.n	80051d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	615a      	str	r2, [r3, #20]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 030a 	bic.w	r3, r3, #10
 800523c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525e:	b480      	push	{r7}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800529a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f043 0307 	orr.w	r3, r3, #7
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e054      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800537c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d009      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10c      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40014000 	.word	0x40014000

08005410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e040      	b.n	80054e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc f9ba 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	; 0x24
 8005478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f8c0 	bl	8005610 <UART_SetConfig>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e022      	b.n	80054e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9ea 	bl	800587c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa71 	bl	80059c0 <UART_CheckIdleState>
 80054de:	4603      	mov	r3, r0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	f040 8082 	bne.w	8005606 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_UART_Transmit+0x26>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e07a      	b.n	8005608 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_UART_Transmit+0x38>
 800551c:	2302      	movs	r3, #2
 800551e:	e073      	b.n	8005608 <HAL_UART_Transmit+0x120>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2221      	movs	r2, #33	; 0x21
 8005534:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005536:	f7fc fa1d 	bl	8001974 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	88fa      	ldrh	r2, [r7, #6]
 8005548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d108      	bne.n	8005568 <HAL_UART_Transmit+0x80>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e003      	b.n	8005570 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005578:	e02d      	b.n	80055d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fa64 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e039      	b.n	8005608 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a6:	b292      	uxth	r2, r2
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3302      	adds	r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e008      	b.n	80055c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b292      	uxth	r2, r2
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1cb      	bne.n	800557a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2140      	movs	r1, #64	; 0x40
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fa30 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e005      	b.n	8005608 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b8a      	ldr	r3, [pc, #552]	; (8005864 <UART_SetConfig+0x254>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	430b      	orrs	r3, r1
 8005646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a78      	ldr	r2, [pc, #480]	; (8005868 <UART_SetConfig+0x258>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d120      	bne.n	80056ce <UART_SetConfig+0xbe>
 800568c:	4b77      	ldr	r3, [pc, #476]	; (800586c <UART_SetConfig+0x25c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b03      	cmp	r3, #3
 8005696:	d817      	bhi.n	80056c8 <UART_SetConfig+0xb8>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x90>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056bd 	.word	0x080056bd
 80056a8:	080056c3 	.word	0x080056c3
 80056ac:	080056b7 	.word	0x080056b7
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e01d      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e01a      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056bc:	2304      	movs	r3, #4
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e017      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056c2:	2308      	movs	r3, #8
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e014      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e011      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a67      	ldr	r2, [pc, #412]	; (8005870 <UART_SetConfig+0x260>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d102      	bne.n	80056de <UART_SetConfig+0xce>
 80056d8:	2300      	movs	r3, #0
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e009      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a64      	ldr	r2, [pc, #400]	; (8005874 <UART_SetConfig+0x264>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d102      	bne.n	80056ee <UART_SetConfig+0xde>
 80056e8:	2300      	movs	r3, #0
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e001      	b.n	80056f2 <UART_SetConfig+0xe2>
 80056ee:	2310      	movs	r3, #16
 80056f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d15b      	bne.n	80057b4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80056fc:	7ffb      	ldrb	r3, [r7, #31]
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d827      	bhi.n	8005752 <UART_SetConfig+0x142>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0xf8>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005753 	.word	0x08005753
 8005718:	08005743 	.word	0x08005743
 800571c:	08005753 	.word	0x08005753
 8005720:	08005753 	.word	0x08005753
 8005724:	08005753 	.word	0x08005753
 8005728:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7ff f85e 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005730:	61b8      	str	r0, [r7, #24]
        break;
 8005732:	e013      	b.n	800575c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7ff f87c 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8005738:	61b8      	str	r0, [r7, #24]
        break;
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b4e      	ldr	r3, [pc, #312]	; (8005878 <UART_SetConfig+0x268>)
 800573e:	61bb      	str	r3, [r7, #24]
        break;
 8005740:	e00c      	b.n	800575c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7fe ffdd 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8005746:	61b8      	str	r0, [r7, #24]
        break;
 8005748:	e008      	b.n	800575c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	61bb      	str	r3, [r7, #24]
        break;
 8005750:	e004      	b.n	800575c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	77bb      	strb	r3, [r7, #30]
        break;
 800575a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d074      	beq.n	800584c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	005a      	lsls	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	441a      	add	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d916      	bls.n	80057ae <UART_SetConfig+0x19e>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005786:	d212      	bcs.n	80057ae <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f023 030f 	bic.w	r3, r3, #15
 8005790:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	b29b      	uxth	r3, r3
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	b29a      	uxth	r2, r3
 800579e:	89fb      	ldrh	r3, [r7, #14]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	89fa      	ldrh	r2, [r7, #14]
 80057aa:	60da      	str	r2, [r3, #12]
 80057ac:	e04e      	b.n	800584c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	77bb      	strb	r3, [r7, #30]
 80057b2:	e04b      	b.n	800584c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b4:	7ffb      	ldrb	r3, [r7, #31]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d827      	bhi.n	800580a <UART_SetConfig+0x1fa>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x1b0>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7ff f802 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80057e8:	61b8      	str	r0, [r7, #24]
        break;
 80057ea:	e013      	b.n	8005814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7ff f820 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80057f0:	61b8      	str	r0, [r7, #24]
        break;
 80057f2:	e00f      	b.n	8005814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b20      	ldr	r3, [pc, #128]	; (8005878 <UART_SetConfig+0x268>)
 80057f6:	61bb      	str	r3, [r7, #24]
        break;
 80057f8:	e00c      	b.n	8005814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe ff81 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80057fe:	61b8      	str	r0, [r7, #24]
        break;
 8005800:	e008      	b.n	8005814 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	61bb      	str	r3, [r7, #24]
        break;
 8005808:	e004      	b.n	8005814 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	77bb      	strb	r3, [r7, #30]
        break;
 8005812:	bf00      	nop
    }

    if (pclk != 0U)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	085a      	lsrs	r2, r3, #1
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	441a      	add	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	b29b      	uxth	r3, r3
 800582e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d908      	bls.n	8005848 <UART_SetConfig+0x238>
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d204      	bcs.n	8005848 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	e001      	b.n	800584c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005858:	7fbb      	ldrb	r3, [r7, #30]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	efff69f3 	.word	0xefff69f3
 8005868:	40013800 	.word	0x40013800
 800586c:	40021000 	.word	0x40021000
 8005870:	40004400 	.word	0x40004400
 8005874:	40004800 	.word	0x40004800
 8005878:	007a1200 	.word	0x007a1200

0800587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d10a      	bne.n	8005992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d0:	f7fb ffd0 	bl	8001974 <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10e      	bne.n	8005a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f82d 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e023      	b.n	8005a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d10e      	bne.n	8005a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f817 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e00d      	b.n	8005a4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b09c      	sub	sp, #112	; 0x70
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a62:	e0a5      	b.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	f000 80a1 	beq.w	8005bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fb ff81 	bl	8001974 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d13e      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a98:	667b      	str	r3, [r7, #100]	; 0x64
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e6      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e067      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d04f      	beq.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1e:	d147      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b7c:	623a      	str	r2, [r7, #32]
 8005b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	69f9      	ldr	r1, [r7, #28]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e010      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2301      	moveq	r3, #1
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f43f af4a 	beq.w	8005a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3770      	adds	r7, #112	; 0x70
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <__errno>:
 8005bdc:	4b01      	ldr	r3, [pc, #4]	; (8005be4 <__errno+0x8>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4d0d      	ldr	r5, [pc, #52]	; (8005c20 <__libc_init_array+0x38>)
 8005bec:	4c0d      	ldr	r4, [pc, #52]	; (8005c24 <__libc_init_array+0x3c>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	4d0b      	ldr	r5, [pc, #44]	; (8005c28 <__libc_init_array+0x40>)
 8005bfa:	4c0c      	ldr	r4, [pc, #48]	; (8005c2c <__libc_init_array+0x44>)
 8005bfc:	f002 ff04 	bl	8008a08 <_init>
 8005c00:	1b64      	subs	r4, r4, r5
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	2600      	movs	r6, #0
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	08008e4c 	.word	0x08008e4c
 8005c24:	08008e4c 	.word	0x08008e4c
 8005c28:	08008e4c 	.word	0x08008e4c
 8005c2c:	08008e50 	.word	0x08008e50

08005c30 <memset>:
 8005c30:	4402      	add	r2, r0
 8005c32:	4603      	mov	r3, r0
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <memset+0xa>
 8005c38:	4770      	bx	lr
 8005c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3e:	e7f9      	b.n	8005c34 <memset+0x4>

08005c40 <__cvt>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	ec55 4b10 	vmov	r4, r5, d0
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	460e      	mov	r6, r1
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	462b      	mov	r3, r5
 8005c50:	bfbb      	ittet	lt
 8005c52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c56:	461d      	movlt	r5, r3
 8005c58:	2300      	movge	r3, #0
 8005c5a:	232d      	movlt	r3, #45	; 0x2d
 8005c5c:	700b      	strb	r3, [r1, #0]
 8005c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c64:	4691      	mov	r9, r2
 8005c66:	f023 0820 	bic.w	r8, r3, #32
 8005c6a:	bfbc      	itt	lt
 8005c6c:	4622      	movlt	r2, r4
 8005c6e:	4614      	movlt	r4, r2
 8005c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c74:	d005      	beq.n	8005c82 <__cvt+0x42>
 8005c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c7a:	d100      	bne.n	8005c7e <__cvt+0x3e>
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	2102      	movs	r1, #2
 8005c80:	e000      	b.n	8005c84 <__cvt+0x44>
 8005c82:	2103      	movs	r1, #3
 8005c84:	ab03      	add	r3, sp, #12
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	ab02      	add	r3, sp, #8
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	ec45 4b10 	vmov	d0, r4, r5
 8005c90:	4653      	mov	r3, sl
 8005c92:	4632      	mov	r2, r6
 8005c94:	f000 fcec 	bl	8006670 <_dtoa_r>
 8005c98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	d102      	bne.n	8005ca6 <__cvt+0x66>
 8005ca0:	f019 0f01 	tst.w	r9, #1
 8005ca4:	d022      	beq.n	8005cec <__cvt+0xac>
 8005ca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005caa:	eb07 0906 	add.w	r9, r7, r6
 8005cae:	d110      	bne.n	8005cd2 <__cvt+0x92>
 8005cb0:	783b      	ldrb	r3, [r7, #0]
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d10a      	bne.n	8005ccc <__cvt+0x8c>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cc2:	b918      	cbnz	r0, 8005ccc <__cvt+0x8c>
 8005cc4:	f1c6 0601 	rsb	r6, r6, #1
 8005cc8:	f8ca 6000 	str.w	r6, [sl]
 8005ccc:	f8da 3000 	ldr.w	r3, [sl]
 8005cd0:	4499      	add	r9, r3
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cde:	b108      	cbz	r0, 8005ce4 <__cvt+0xa4>
 8005ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce4:	2230      	movs	r2, #48	; 0x30
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	454b      	cmp	r3, r9
 8005cea:	d307      	bcc.n	8005cfc <__cvt+0xbc>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cf0:	1bdb      	subs	r3, r3, r7
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	b004      	add	sp, #16
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	9103      	str	r1, [sp, #12]
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e7f0      	b.n	8005ce6 <__cvt+0xa6>

08005d04 <__exponent>:
 8005d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d06:	4603      	mov	r3, r0
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	bfb8      	it	lt
 8005d0c:	4249      	neglt	r1, r1
 8005d0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005d12:	bfb4      	ite	lt
 8005d14:	222d      	movlt	r2, #45	; 0x2d
 8005d16:	222b      	movge	r2, #43	; 0x2b
 8005d18:	2909      	cmp	r1, #9
 8005d1a:	7042      	strb	r2, [r0, #1]
 8005d1c:	dd2a      	ble.n	8005d74 <__exponent+0x70>
 8005d1e:	f10d 0407 	add.w	r4, sp, #7
 8005d22:	46a4      	mov	ip, r4
 8005d24:	270a      	movs	r7, #10
 8005d26:	46a6      	mov	lr, r4
 8005d28:	460a      	mov	r2, r1
 8005d2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005d32:	3530      	adds	r5, #48	; 0x30
 8005d34:	2a63      	cmp	r2, #99	; 0x63
 8005d36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d3e:	4631      	mov	r1, r6
 8005d40:	dcf1      	bgt.n	8005d26 <__exponent+0x22>
 8005d42:	3130      	adds	r1, #48	; 0x30
 8005d44:	f1ae 0502 	sub.w	r5, lr, #2
 8005d48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d4c:	1c44      	adds	r4, r0, #1
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4561      	cmp	r1, ip
 8005d52:	d30a      	bcc.n	8005d6a <__exponent+0x66>
 8005d54:	f10d 0209 	add.w	r2, sp, #9
 8005d58:	eba2 020e 	sub.w	r2, r2, lr
 8005d5c:	4565      	cmp	r5, ip
 8005d5e:	bf88      	it	hi
 8005d60:	2200      	movhi	r2, #0
 8005d62:	4413      	add	r3, r2
 8005d64:	1a18      	subs	r0, r3, r0
 8005d66:	b003      	add	sp, #12
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d72:	e7ed      	b.n	8005d50 <__exponent+0x4c>
 8005d74:	2330      	movs	r3, #48	; 0x30
 8005d76:	3130      	adds	r1, #48	; 0x30
 8005d78:	7083      	strb	r3, [r0, #2]
 8005d7a:	70c1      	strb	r1, [r0, #3]
 8005d7c:	1d03      	adds	r3, r0, #4
 8005d7e:	e7f1      	b.n	8005d64 <__exponent+0x60>

08005d80 <_printf_float>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	ed2d 8b02 	vpush	{d8}
 8005d88:	b08d      	sub	sp, #52	; 0x34
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d90:	4616      	mov	r6, r2
 8005d92:	461f      	mov	r7, r3
 8005d94:	4605      	mov	r5, r0
 8005d96:	f001 fa59 	bl	800724c <_localeconv_r>
 8005d9a:	f8d0 a000 	ldr.w	sl, [r0]
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f7fa fa16 	bl	80001d0 <strlen>
 8005da4:	2300      	movs	r3, #0
 8005da6:	930a      	str	r3, [sp, #40]	; 0x28
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	9305      	str	r3, [sp, #20]
 8005dac:	f8d8 3000 	ldr.w	r3, [r8]
 8005db0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005db4:	3307      	adds	r3, #7
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	f103 0208 	add.w	r2, r3, #8
 8005dbe:	f8c8 2000 	str.w	r2, [r8]
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dd2:	9307      	str	r3, [sp, #28]
 8005dd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dd8:	ee08 0a10 	vmov	s16, r0
 8005ddc:	4b9f      	ldr	r3, [pc, #636]	; (800605c <_printf_float+0x2dc>)
 8005dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	f7fa fea1 	bl	8000b2c <__aeabi_dcmpun>
 8005dea:	bb88      	cbnz	r0, 8005e50 <_printf_float+0xd0>
 8005dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005df0:	4b9a      	ldr	r3, [pc, #616]	; (800605c <_printf_float+0x2dc>)
 8005df2:	f04f 32ff 	mov.w	r2, #4294967295
 8005df6:	f7fa fe7b 	bl	8000af0 <__aeabi_dcmple>
 8005dfa:	bb48      	cbnz	r0, 8005e50 <_printf_float+0xd0>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe6a 	bl	8000adc <__aeabi_dcmplt>
 8005e08:	b110      	cbz	r0, 8005e10 <_printf_float+0x90>
 8005e0a:	232d      	movs	r3, #45	; 0x2d
 8005e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e10:	4b93      	ldr	r3, [pc, #588]	; (8006060 <_printf_float+0x2e0>)
 8005e12:	4894      	ldr	r0, [pc, #592]	; (8006064 <_printf_float+0x2e4>)
 8005e14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e18:	bf94      	ite	ls
 8005e1a:	4698      	movls	r8, r3
 8005e1c:	4680      	movhi	r8, r0
 8005e1e:	2303      	movs	r3, #3
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	f023 0204 	bic.w	r2, r3, #4
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	9700      	str	r7, [sp, #0]
 8005e30:	4633      	mov	r3, r6
 8005e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 f9d8 	bl	80061ec <_printf_common>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f040 8090 	bne.w	8005f62 <_printf_float+0x1e2>
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	b00d      	add	sp, #52	; 0x34
 8005e48:	ecbd 8b02 	vpop	{d8}
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	4649      	mov	r1, r9
 8005e58:	f7fa fe68 	bl	8000b2c <__aeabi_dcmpun>
 8005e5c:	b140      	cbz	r0, 8005e70 <_printf_float+0xf0>
 8005e5e:	464b      	mov	r3, r9
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bfbc      	itt	lt
 8005e64:	232d      	movlt	r3, #45	; 0x2d
 8005e66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e6a:	487f      	ldr	r0, [pc, #508]	; (8006068 <_printf_float+0x2e8>)
 8005e6c:	4b7f      	ldr	r3, [pc, #508]	; (800606c <_printf_float+0x2ec>)
 8005e6e:	e7d1      	b.n	8005e14 <_printf_float+0x94>
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e76:	9206      	str	r2, [sp, #24]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	d13f      	bne.n	8005efc <_printf_float+0x17c>
 8005e7c:	2306      	movs	r3, #6
 8005e7e:	6063      	str	r3, [r4, #4]
 8005e80:	9b05      	ldr	r3, [sp, #20]
 8005e82:	6861      	ldr	r1, [r4, #4]
 8005e84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e92:	ab09      	add	r3, sp, #36	; 0x24
 8005e94:	ec49 8b10 	vmov	d0, r8, r9
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	6022      	str	r2, [r4, #0]
 8005e9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f7ff fecd 	bl	8005c40 <__cvt>
 8005ea6:	9b06      	ldr	r3, [sp, #24]
 8005ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eaa:	2b47      	cmp	r3, #71	; 0x47
 8005eac:	4680      	mov	r8, r0
 8005eae:	d108      	bne.n	8005ec2 <_printf_float+0x142>
 8005eb0:	1cc8      	adds	r0, r1, #3
 8005eb2:	db02      	blt.n	8005eba <_printf_float+0x13a>
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	4299      	cmp	r1, r3
 8005eb8:	dd41      	ble.n	8005f3e <_printf_float+0x1be>
 8005eba:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ebe:	fa5f fb8b 	uxtb.w	fp, fp
 8005ec2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ec6:	d820      	bhi.n	8005f0a <_printf_float+0x18a>
 8005ec8:	3901      	subs	r1, #1
 8005eca:	465a      	mov	r2, fp
 8005ecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8005ed2:	f7ff ff17 	bl	8005d04 <__exponent>
 8005ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed8:	1813      	adds	r3, r2, r0
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	4681      	mov	r9, r0
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	dc02      	bgt.n	8005ee8 <_printf_float+0x168>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	07d2      	lsls	r2, r2, #31
 8005ee6:	d501      	bpl.n	8005eec <_printf_float+0x16c>
 8005ee8:	3301      	adds	r3, #1
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d09c      	beq.n	8005e2e <_printf_float+0xae>
 8005ef4:	232d      	movs	r3, #45	; 0x2d
 8005ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efa:	e798      	b.n	8005e2e <_printf_float+0xae>
 8005efc:	9a06      	ldr	r2, [sp, #24]
 8005efe:	2a47      	cmp	r2, #71	; 0x47
 8005f00:	d1be      	bne.n	8005e80 <_printf_float+0x100>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1bc      	bne.n	8005e80 <_printf_float+0x100>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e7b9      	b.n	8005e7e <_printf_float+0xfe>
 8005f0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f0e:	d118      	bne.n	8005f42 <_printf_float+0x1c2>
 8005f10:	2900      	cmp	r1, #0
 8005f12:	6863      	ldr	r3, [r4, #4]
 8005f14:	dd0b      	ble.n	8005f2e <_printf_float+0x1ae>
 8005f16:	6121      	str	r1, [r4, #16]
 8005f18:	b913      	cbnz	r3, 8005f20 <_printf_float+0x1a0>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	07d0      	lsls	r0, r2, #31
 8005f1e:	d502      	bpl.n	8005f26 <_printf_float+0x1a6>
 8005f20:	3301      	adds	r3, #1
 8005f22:	440b      	add	r3, r1
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f28:	f04f 0900 	mov.w	r9, #0
 8005f2c:	e7de      	b.n	8005eec <_printf_float+0x16c>
 8005f2e:	b913      	cbnz	r3, 8005f36 <_printf_float+0x1b6>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	07d2      	lsls	r2, r2, #31
 8005f34:	d501      	bpl.n	8005f3a <_printf_float+0x1ba>
 8005f36:	3302      	adds	r3, #2
 8005f38:	e7f4      	b.n	8005f24 <_printf_float+0x1a4>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7f2      	b.n	8005f24 <_printf_float+0x1a4>
 8005f3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f44:	4299      	cmp	r1, r3
 8005f46:	db05      	blt.n	8005f54 <_printf_float+0x1d4>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	6121      	str	r1, [r4, #16]
 8005f4c:	07d8      	lsls	r0, r3, #31
 8005f4e:	d5ea      	bpl.n	8005f26 <_printf_float+0x1a6>
 8005f50:	1c4b      	adds	r3, r1, #1
 8005f52:	e7e7      	b.n	8005f24 <_printf_float+0x1a4>
 8005f54:	2900      	cmp	r1, #0
 8005f56:	bfd4      	ite	le
 8005f58:	f1c1 0202 	rsble	r2, r1, #2
 8005f5c:	2201      	movgt	r2, #1
 8005f5e:	4413      	add	r3, r2
 8005f60:	e7e0      	b.n	8005f24 <_printf_float+0x1a4>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	055a      	lsls	r2, r3, #21
 8005f66:	d407      	bmi.n	8005f78 <_printf_float+0x1f8>
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	d12c      	bne.n	8005fd0 <_printf_float+0x250>
 8005f76:	e764      	b.n	8005e42 <_printf_float+0xc2>
 8005f78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f7c:	f240 80e0 	bls.w	8006140 <_printf_float+0x3c0>
 8005f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f84:	2200      	movs	r2, #0
 8005f86:	2300      	movs	r3, #0
 8005f88:	f7fa fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d034      	beq.n	8005ffa <_printf_float+0x27a>
 8005f90:	4a37      	ldr	r2, [pc, #220]	; (8006070 <_printf_float+0x2f0>)
 8005f92:	2301      	movs	r3, #1
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af51 	beq.w	8005e42 <_printf_float+0xc2>
 8005fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	db02      	blt.n	8005fae <_printf_float+0x22e>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	07d8      	lsls	r0, r3, #31
 8005fac:	d510      	bpl.n	8005fd0 <_printf_float+0x250>
 8005fae:	ee18 3a10 	vmov	r3, s16
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f af41 	beq.w	8005e42 <_printf_float+0xc2>
 8005fc0:	f04f 0800 	mov.w	r8, #0
 8005fc4:	f104 091a 	add.w	r9, r4, #26
 8005fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4543      	cmp	r3, r8
 8005fce:	dc09      	bgt.n	8005fe4 <_printf_float+0x264>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	079b      	lsls	r3, r3, #30
 8005fd4:	f100 8105 	bmi.w	80061e2 <_printf_float+0x462>
 8005fd8:	68e0      	ldr	r0, [r4, #12]
 8005fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fdc:	4298      	cmp	r0, r3
 8005fde:	bfb8      	it	lt
 8005fe0:	4618      	movlt	r0, r3
 8005fe2:	e730      	b.n	8005e46 <_printf_float+0xc6>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	464a      	mov	r2, r9
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af27 	beq.w	8005e42 <_printf_float+0xc2>
 8005ff4:	f108 0801 	add.w	r8, r8, #1
 8005ff8:	e7e6      	b.n	8005fc8 <_printf_float+0x248>
 8005ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dc39      	bgt.n	8006074 <_printf_float+0x2f4>
 8006000:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <_printf_float+0x2f0>)
 8006002:	2301      	movs	r3, #1
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f af19 	beq.w	8005e42 <_printf_float+0xc2>
 8006010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006014:	4313      	orrs	r3, r2
 8006016:	d102      	bne.n	800601e <_printf_float+0x29e>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07d9      	lsls	r1, r3, #31
 800601c:	d5d8      	bpl.n	8005fd0 <_printf_float+0x250>
 800601e:	ee18 3a10 	vmov	r3, s16
 8006022:	4652      	mov	r2, sl
 8006024:	4631      	mov	r1, r6
 8006026:	4628      	mov	r0, r5
 8006028:	47b8      	blx	r7
 800602a:	3001      	adds	r0, #1
 800602c:	f43f af09 	beq.w	8005e42 <_printf_float+0xc2>
 8006030:	f04f 0900 	mov.w	r9, #0
 8006034:	f104 0a1a 	add.w	sl, r4, #26
 8006038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603a:	425b      	negs	r3, r3
 800603c:	454b      	cmp	r3, r9
 800603e:	dc01      	bgt.n	8006044 <_printf_float+0x2c4>
 8006040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006042:	e792      	b.n	8005f6a <_printf_float+0x1ea>
 8006044:	2301      	movs	r3, #1
 8006046:	4652      	mov	r2, sl
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	f43f aef7 	beq.w	8005e42 <_printf_float+0xc2>
 8006054:	f109 0901 	add.w	r9, r9, #1
 8006058:	e7ee      	b.n	8006038 <_printf_float+0x2b8>
 800605a:	bf00      	nop
 800605c:	7fefffff 	.word	0x7fefffff
 8006060:	08008a78 	.word	0x08008a78
 8006064:	08008a7c 	.word	0x08008a7c
 8006068:	08008a84 	.word	0x08008a84
 800606c:	08008a80 	.word	0x08008a80
 8006070:	08008a88 	.word	0x08008a88
 8006074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006078:	429a      	cmp	r2, r3
 800607a:	bfa8      	it	ge
 800607c:	461a      	movge	r2, r3
 800607e:	2a00      	cmp	r2, #0
 8006080:	4691      	mov	r9, r2
 8006082:	dc37      	bgt.n	80060f4 <_printf_float+0x374>
 8006084:	f04f 0b00 	mov.w	fp, #0
 8006088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608c:	f104 021a 	add.w	r2, r4, #26
 8006090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	eba3 0309 	sub.w	r3, r3, r9
 8006098:	455b      	cmp	r3, fp
 800609a:	dc33      	bgt.n	8006104 <_printf_float+0x384>
 800609c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a0:	429a      	cmp	r2, r3
 80060a2:	db3b      	blt.n	800611c <_printf_float+0x39c>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	07da      	lsls	r2, r3, #31
 80060a8:	d438      	bmi.n	800611c <_printf_float+0x39c>
 80060aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ac:	9a05      	ldr	r2, [sp, #20]
 80060ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b0:	1a9a      	subs	r2, r3, r2
 80060b2:	eba3 0901 	sub.w	r9, r3, r1
 80060b6:	4591      	cmp	r9, r2
 80060b8:	bfa8      	it	ge
 80060ba:	4691      	movge	r9, r2
 80060bc:	f1b9 0f00 	cmp.w	r9, #0
 80060c0:	dc35      	bgt.n	800612e <_printf_float+0x3ae>
 80060c2:	f04f 0800 	mov.w	r8, #0
 80060c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ca:	f104 0a1a 	add.w	sl, r4, #26
 80060ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	eba3 0309 	sub.w	r3, r3, r9
 80060d8:	4543      	cmp	r3, r8
 80060da:	f77f af79 	ble.w	8005fd0 <_printf_float+0x250>
 80060de:	2301      	movs	r3, #1
 80060e0:	4652      	mov	r2, sl
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f aeaa 	beq.w	8005e42 <_printf_float+0xc2>
 80060ee:	f108 0801 	add.w	r8, r8, #1
 80060f2:	e7ec      	b.n	80060ce <_printf_float+0x34e>
 80060f4:	4613      	mov	r3, r2
 80060f6:	4631      	mov	r1, r6
 80060f8:	4642      	mov	r2, r8
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	d1c0      	bne.n	8006084 <_printf_float+0x304>
 8006102:	e69e      	b.n	8005e42 <_printf_float+0xc2>
 8006104:	2301      	movs	r3, #1
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	9205      	str	r2, [sp, #20]
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f ae97 	beq.w	8005e42 <_printf_float+0xc2>
 8006114:	9a05      	ldr	r2, [sp, #20]
 8006116:	f10b 0b01 	add.w	fp, fp, #1
 800611a:	e7b9      	b.n	8006090 <_printf_float+0x310>
 800611c:	ee18 3a10 	vmov	r3, s16
 8006120:	4652      	mov	r2, sl
 8006122:	4631      	mov	r1, r6
 8006124:	4628      	mov	r0, r5
 8006126:	47b8      	blx	r7
 8006128:	3001      	adds	r0, #1
 800612a:	d1be      	bne.n	80060aa <_printf_float+0x32a>
 800612c:	e689      	b.n	8005e42 <_printf_float+0xc2>
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	464b      	mov	r3, r9
 8006132:	4442      	add	r2, r8
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	d1c1      	bne.n	80060c2 <_printf_float+0x342>
 800613e:	e680      	b.n	8005e42 <_printf_float+0xc2>
 8006140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006142:	2a01      	cmp	r2, #1
 8006144:	dc01      	bgt.n	800614a <_printf_float+0x3ca>
 8006146:	07db      	lsls	r3, r3, #31
 8006148:	d538      	bpl.n	80061bc <_printf_float+0x43c>
 800614a:	2301      	movs	r3, #1
 800614c:	4642      	mov	r2, r8
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f ae74 	beq.w	8005e42 <_printf_float+0xc2>
 800615a:	ee18 3a10 	vmov	r3, s16
 800615e:	4652      	mov	r2, sl
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	f43f ae6b 	beq.w	8005e42 <_printf_float+0xc2>
 800616c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006170:	2200      	movs	r2, #0
 8006172:	2300      	movs	r3, #0
 8006174:	f7fa fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006178:	b9d8      	cbnz	r0, 80061b2 <_printf_float+0x432>
 800617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617c:	f108 0201 	add.w	r2, r8, #1
 8006180:	3b01      	subs	r3, #1
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	d10e      	bne.n	80061aa <_printf_float+0x42a>
 800618c:	e659      	b.n	8005e42 <_printf_float+0xc2>
 800618e:	2301      	movs	r3, #1
 8006190:	4652      	mov	r2, sl
 8006192:	4631      	mov	r1, r6
 8006194:	4628      	mov	r0, r5
 8006196:	47b8      	blx	r7
 8006198:	3001      	adds	r0, #1
 800619a:	f43f ae52 	beq.w	8005e42 <_printf_float+0xc2>
 800619e:	f108 0801 	add.w	r8, r8, #1
 80061a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	4543      	cmp	r3, r8
 80061a8:	dcf1      	bgt.n	800618e <_printf_float+0x40e>
 80061aa:	464b      	mov	r3, r9
 80061ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061b0:	e6dc      	b.n	8005f6c <_printf_float+0x1ec>
 80061b2:	f04f 0800 	mov.w	r8, #0
 80061b6:	f104 0a1a 	add.w	sl, r4, #26
 80061ba:	e7f2      	b.n	80061a2 <_printf_float+0x422>
 80061bc:	2301      	movs	r3, #1
 80061be:	4642      	mov	r2, r8
 80061c0:	e7df      	b.n	8006182 <_printf_float+0x402>
 80061c2:	2301      	movs	r3, #1
 80061c4:	464a      	mov	r2, r9
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f ae38 	beq.w	8005e42 <_printf_float+0xc2>
 80061d2:	f108 0801 	add.w	r8, r8, #1
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061da:	1a5b      	subs	r3, r3, r1
 80061dc:	4543      	cmp	r3, r8
 80061de:	dcf0      	bgt.n	80061c2 <_printf_float+0x442>
 80061e0:	e6fa      	b.n	8005fd8 <_printf_float+0x258>
 80061e2:	f04f 0800 	mov.w	r8, #0
 80061e6:	f104 0919 	add.w	r9, r4, #25
 80061ea:	e7f4      	b.n	80061d6 <_printf_float+0x456>

080061ec <_printf_common>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	4616      	mov	r6, r2
 80061f2:	4699      	mov	r9, r3
 80061f4:	688a      	ldr	r2, [r1, #8]
 80061f6:	690b      	ldr	r3, [r1, #16]
 80061f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	bfb8      	it	lt
 8006200:	4613      	movlt	r3, r2
 8006202:	6033      	str	r3, [r6, #0]
 8006204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006208:	4607      	mov	r7, r0
 800620a:	460c      	mov	r4, r1
 800620c:	b10a      	cbz	r2, 8006212 <_printf_common+0x26>
 800620e:	3301      	adds	r3, #1
 8006210:	6033      	str	r3, [r6, #0]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	0699      	lsls	r1, r3, #26
 8006216:	bf42      	ittt	mi
 8006218:	6833      	ldrmi	r3, [r6, #0]
 800621a:	3302      	addmi	r3, #2
 800621c:	6033      	strmi	r3, [r6, #0]
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	f015 0506 	ands.w	r5, r5, #6
 8006224:	d106      	bne.n	8006234 <_printf_common+0x48>
 8006226:	f104 0a19 	add.w	sl, r4, #25
 800622a:	68e3      	ldr	r3, [r4, #12]
 800622c:	6832      	ldr	r2, [r6, #0]
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	42ab      	cmp	r3, r5
 8006232:	dc26      	bgt.n	8006282 <_printf_common+0x96>
 8006234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006238:	1e13      	subs	r3, r2, #0
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	bf18      	it	ne
 800623e:	2301      	movne	r3, #1
 8006240:	0692      	lsls	r2, r2, #26
 8006242:	d42b      	bmi.n	800629c <_printf_common+0xb0>
 8006244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006248:	4649      	mov	r1, r9
 800624a:	4638      	mov	r0, r7
 800624c:	47c0      	blx	r8
 800624e:	3001      	adds	r0, #1
 8006250:	d01e      	beq.n	8006290 <_printf_common+0xa4>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	68e5      	ldr	r5, [r4, #12]
 8006256:	6832      	ldr	r2, [r6, #0]
 8006258:	f003 0306 	and.w	r3, r3, #6
 800625c:	2b04      	cmp	r3, #4
 800625e:	bf08      	it	eq
 8006260:	1aad      	subeq	r5, r5, r2
 8006262:	68a3      	ldr	r3, [r4, #8]
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	bf0c      	ite	eq
 8006268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800626c:	2500      	movne	r5, #0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfc4      	itt	gt
 8006272:	1a9b      	subgt	r3, r3, r2
 8006274:	18ed      	addgt	r5, r5, r3
 8006276:	2600      	movs	r6, #0
 8006278:	341a      	adds	r4, #26
 800627a:	42b5      	cmp	r5, r6
 800627c:	d11a      	bne.n	80062b4 <_printf_common+0xc8>
 800627e:	2000      	movs	r0, #0
 8006280:	e008      	b.n	8006294 <_printf_common+0xa8>
 8006282:	2301      	movs	r3, #1
 8006284:	4652      	mov	r2, sl
 8006286:	4649      	mov	r1, r9
 8006288:	4638      	mov	r0, r7
 800628a:	47c0      	blx	r8
 800628c:	3001      	adds	r0, #1
 800628e:	d103      	bne.n	8006298 <_printf_common+0xac>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	3501      	adds	r5, #1
 800629a:	e7c6      	b.n	800622a <_printf_common+0x3e>
 800629c:	18e1      	adds	r1, r4, r3
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	2030      	movs	r0, #48	; 0x30
 80062a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a6:	4422      	add	r2, r4
 80062a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b0:	3302      	adds	r3, #2
 80062b2:	e7c7      	b.n	8006244 <_printf_common+0x58>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4622      	mov	r2, r4
 80062b8:	4649      	mov	r1, r9
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c0      	blx	r8
 80062be:	3001      	adds	r0, #1
 80062c0:	d0e6      	beq.n	8006290 <_printf_common+0xa4>
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7d9      	b.n	800627a <_printf_common+0x8e>
	...

080062c8 <_printf_i>:
 80062c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	7e0f      	ldrb	r7, [r1, #24]
 80062ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062d0:	2f78      	cmp	r7, #120	; 0x78
 80062d2:	4691      	mov	r9, r2
 80062d4:	4680      	mov	r8, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	469a      	mov	sl, r3
 80062da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062de:	d807      	bhi.n	80062f0 <_printf_i+0x28>
 80062e0:	2f62      	cmp	r7, #98	; 0x62
 80062e2:	d80a      	bhi.n	80062fa <_printf_i+0x32>
 80062e4:	2f00      	cmp	r7, #0
 80062e6:	f000 80d8 	beq.w	800649a <_printf_i+0x1d2>
 80062ea:	2f58      	cmp	r7, #88	; 0x58
 80062ec:	f000 80a3 	beq.w	8006436 <_printf_i+0x16e>
 80062f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f8:	e03a      	b.n	8006370 <_printf_i+0xa8>
 80062fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062fe:	2b15      	cmp	r3, #21
 8006300:	d8f6      	bhi.n	80062f0 <_printf_i+0x28>
 8006302:	a101      	add	r1, pc, #4	; (adr r1, 8006308 <_printf_i+0x40>)
 8006304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006308:	08006361 	.word	0x08006361
 800630c:	08006375 	.word	0x08006375
 8006310:	080062f1 	.word	0x080062f1
 8006314:	080062f1 	.word	0x080062f1
 8006318:	080062f1 	.word	0x080062f1
 800631c:	080062f1 	.word	0x080062f1
 8006320:	08006375 	.word	0x08006375
 8006324:	080062f1 	.word	0x080062f1
 8006328:	080062f1 	.word	0x080062f1
 800632c:	080062f1 	.word	0x080062f1
 8006330:	080062f1 	.word	0x080062f1
 8006334:	08006481 	.word	0x08006481
 8006338:	080063a5 	.word	0x080063a5
 800633c:	08006463 	.word	0x08006463
 8006340:	080062f1 	.word	0x080062f1
 8006344:	080062f1 	.word	0x080062f1
 8006348:	080064a3 	.word	0x080064a3
 800634c:	080062f1 	.word	0x080062f1
 8006350:	080063a5 	.word	0x080063a5
 8006354:	080062f1 	.word	0x080062f1
 8006358:	080062f1 	.word	0x080062f1
 800635c:	0800646b 	.word	0x0800646b
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	602a      	str	r2, [r5, #0]
 8006368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800636c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006370:	2301      	movs	r3, #1
 8006372:	e0a3      	b.n	80064bc <_printf_i+0x1f4>
 8006374:	6820      	ldr	r0, [r4, #0]
 8006376:	6829      	ldr	r1, [r5, #0]
 8006378:	0606      	lsls	r6, r0, #24
 800637a:	f101 0304 	add.w	r3, r1, #4
 800637e:	d50a      	bpl.n	8006396 <_printf_i+0xce>
 8006380:	680e      	ldr	r6, [r1, #0]
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	2e00      	cmp	r6, #0
 8006386:	da03      	bge.n	8006390 <_printf_i+0xc8>
 8006388:	232d      	movs	r3, #45	; 0x2d
 800638a:	4276      	negs	r6, r6
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006390:	485e      	ldr	r0, [pc, #376]	; (800650c <_printf_i+0x244>)
 8006392:	230a      	movs	r3, #10
 8006394:	e019      	b.n	80063ca <_printf_i+0x102>
 8006396:	680e      	ldr	r6, [r1, #0]
 8006398:	602b      	str	r3, [r5, #0]
 800639a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800639e:	bf18      	it	ne
 80063a0:	b236      	sxthne	r6, r6
 80063a2:	e7ef      	b.n	8006384 <_printf_i+0xbc>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	6820      	ldr	r0, [r4, #0]
 80063a8:	1d19      	adds	r1, r3, #4
 80063aa:	6029      	str	r1, [r5, #0]
 80063ac:	0601      	lsls	r1, r0, #24
 80063ae:	d501      	bpl.n	80063b4 <_printf_i+0xec>
 80063b0:	681e      	ldr	r6, [r3, #0]
 80063b2:	e002      	b.n	80063ba <_printf_i+0xf2>
 80063b4:	0646      	lsls	r6, r0, #25
 80063b6:	d5fb      	bpl.n	80063b0 <_printf_i+0xe8>
 80063b8:	881e      	ldrh	r6, [r3, #0]
 80063ba:	4854      	ldr	r0, [pc, #336]	; (800650c <_printf_i+0x244>)
 80063bc:	2f6f      	cmp	r7, #111	; 0x6f
 80063be:	bf0c      	ite	eq
 80063c0:	2308      	moveq	r3, #8
 80063c2:	230a      	movne	r3, #10
 80063c4:	2100      	movs	r1, #0
 80063c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ca:	6865      	ldr	r5, [r4, #4]
 80063cc:	60a5      	str	r5, [r4, #8]
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	bfa2      	ittt	ge
 80063d2:	6821      	ldrge	r1, [r4, #0]
 80063d4:	f021 0104 	bicge.w	r1, r1, #4
 80063d8:	6021      	strge	r1, [r4, #0]
 80063da:	b90e      	cbnz	r6, 80063e0 <_printf_i+0x118>
 80063dc:	2d00      	cmp	r5, #0
 80063de:	d04d      	beq.n	800647c <_printf_i+0x1b4>
 80063e0:	4615      	mov	r5, r2
 80063e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063e6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ea:	5dc7      	ldrb	r7, [r0, r7]
 80063ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063f0:	4637      	mov	r7, r6
 80063f2:	42bb      	cmp	r3, r7
 80063f4:	460e      	mov	r6, r1
 80063f6:	d9f4      	bls.n	80063e2 <_printf_i+0x11a>
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d10b      	bne.n	8006414 <_printf_i+0x14c>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	07de      	lsls	r6, r3, #31
 8006400:	d508      	bpl.n	8006414 <_printf_i+0x14c>
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	6861      	ldr	r1, [r4, #4]
 8006406:	4299      	cmp	r1, r3
 8006408:	bfde      	ittt	le
 800640a:	2330      	movle	r3, #48	; 0x30
 800640c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006414:	1b52      	subs	r2, r2, r5
 8006416:	6122      	str	r2, [r4, #16]
 8006418:	f8cd a000 	str.w	sl, [sp]
 800641c:	464b      	mov	r3, r9
 800641e:	aa03      	add	r2, sp, #12
 8006420:	4621      	mov	r1, r4
 8006422:	4640      	mov	r0, r8
 8006424:	f7ff fee2 	bl	80061ec <_printf_common>
 8006428:	3001      	adds	r0, #1
 800642a:	d14c      	bne.n	80064c6 <_printf_i+0x1fe>
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	b004      	add	sp, #16
 8006432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006436:	4835      	ldr	r0, [pc, #212]	; (800650c <_printf_i+0x244>)
 8006438:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800643c:	6829      	ldr	r1, [r5, #0]
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f851 6b04 	ldr.w	r6, [r1], #4
 8006444:	6029      	str	r1, [r5, #0]
 8006446:	061d      	lsls	r5, r3, #24
 8006448:	d514      	bpl.n	8006474 <_printf_i+0x1ac>
 800644a:	07df      	lsls	r7, r3, #31
 800644c:	bf44      	itt	mi
 800644e:	f043 0320 	orrmi.w	r3, r3, #32
 8006452:	6023      	strmi	r3, [r4, #0]
 8006454:	b91e      	cbnz	r6, 800645e <_printf_i+0x196>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	f023 0320 	bic.w	r3, r3, #32
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	2310      	movs	r3, #16
 8006460:	e7b0      	b.n	80063c4 <_printf_i+0xfc>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	f043 0320 	orr.w	r3, r3, #32
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	2378      	movs	r3, #120	; 0x78
 800646c:	4828      	ldr	r0, [pc, #160]	; (8006510 <_printf_i+0x248>)
 800646e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006472:	e7e3      	b.n	800643c <_printf_i+0x174>
 8006474:	0659      	lsls	r1, r3, #25
 8006476:	bf48      	it	mi
 8006478:	b2b6      	uxthmi	r6, r6
 800647a:	e7e6      	b.n	800644a <_printf_i+0x182>
 800647c:	4615      	mov	r5, r2
 800647e:	e7bb      	b.n	80063f8 <_printf_i+0x130>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	6826      	ldr	r6, [r4, #0]
 8006484:	6961      	ldr	r1, [r4, #20]
 8006486:	1d18      	adds	r0, r3, #4
 8006488:	6028      	str	r0, [r5, #0]
 800648a:	0635      	lsls	r5, r6, #24
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	d501      	bpl.n	8006494 <_printf_i+0x1cc>
 8006490:	6019      	str	r1, [r3, #0]
 8006492:	e002      	b.n	800649a <_printf_i+0x1d2>
 8006494:	0670      	lsls	r0, r6, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0x1c8>
 8006498:	8019      	strh	r1, [r3, #0]
 800649a:	2300      	movs	r3, #0
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	4615      	mov	r5, r2
 80064a0:	e7ba      	b.n	8006418 <_printf_i+0x150>
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	1d1a      	adds	r2, r3, #4
 80064a6:	602a      	str	r2, [r5, #0]
 80064a8:	681d      	ldr	r5, [r3, #0]
 80064aa:	6862      	ldr	r2, [r4, #4]
 80064ac:	2100      	movs	r1, #0
 80064ae:	4628      	mov	r0, r5
 80064b0:	f7f9 fe96 	bl	80001e0 <memchr>
 80064b4:	b108      	cbz	r0, 80064ba <_printf_i+0x1f2>
 80064b6:	1b40      	subs	r0, r0, r5
 80064b8:	6060      	str	r0, [r4, #4]
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	e7a8      	b.n	8006418 <_printf_i+0x150>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	462a      	mov	r2, r5
 80064ca:	4649      	mov	r1, r9
 80064cc:	4640      	mov	r0, r8
 80064ce:	47d0      	blx	sl
 80064d0:	3001      	adds	r0, #1
 80064d2:	d0ab      	beq.n	800642c <_printf_i+0x164>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	d413      	bmi.n	8006502 <_printf_i+0x23a>
 80064da:	68e0      	ldr	r0, [r4, #12]
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	4298      	cmp	r0, r3
 80064e0:	bfb8      	it	lt
 80064e2:	4618      	movlt	r0, r3
 80064e4:	e7a4      	b.n	8006430 <_printf_i+0x168>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4632      	mov	r2, r6
 80064ea:	4649      	mov	r1, r9
 80064ec:	4640      	mov	r0, r8
 80064ee:	47d0      	blx	sl
 80064f0:	3001      	adds	r0, #1
 80064f2:	d09b      	beq.n	800642c <_printf_i+0x164>
 80064f4:	3501      	adds	r5, #1
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	9903      	ldr	r1, [sp, #12]
 80064fa:	1a5b      	subs	r3, r3, r1
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dcf2      	bgt.n	80064e6 <_printf_i+0x21e>
 8006500:	e7eb      	b.n	80064da <_printf_i+0x212>
 8006502:	2500      	movs	r5, #0
 8006504:	f104 0619 	add.w	r6, r4, #25
 8006508:	e7f5      	b.n	80064f6 <_printf_i+0x22e>
 800650a:	bf00      	nop
 800650c:	08008a8a 	.word	0x08008a8a
 8006510:	08008a9b 	.word	0x08008a9b

08006514 <siprintf>:
 8006514:	b40e      	push	{r1, r2, r3}
 8006516:	b500      	push	{lr}
 8006518:	b09c      	sub	sp, #112	; 0x70
 800651a:	ab1d      	add	r3, sp, #116	; 0x74
 800651c:	9002      	str	r0, [sp, #8]
 800651e:	9006      	str	r0, [sp, #24]
 8006520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006524:	4809      	ldr	r0, [pc, #36]	; (800654c <siprintf+0x38>)
 8006526:	9107      	str	r1, [sp, #28]
 8006528:	9104      	str	r1, [sp, #16]
 800652a:	4909      	ldr	r1, [pc, #36]	; (8006550 <siprintf+0x3c>)
 800652c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006530:	9105      	str	r1, [sp, #20]
 8006532:	6800      	ldr	r0, [r0, #0]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	a902      	add	r1, sp, #8
 8006538:	f001 fb78 	bl	8007c2c <_svfiprintf_r>
 800653c:	9b02      	ldr	r3, [sp, #8]
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	b01c      	add	sp, #112	; 0x70
 8006544:	f85d eb04 	ldr.w	lr, [sp], #4
 8006548:	b003      	add	sp, #12
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c
 8006550:	ffff0208 	.word	0xffff0208

08006554 <quorem>:
 8006554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	6903      	ldr	r3, [r0, #16]
 800655a:	690c      	ldr	r4, [r1, #16]
 800655c:	42a3      	cmp	r3, r4
 800655e:	4607      	mov	r7, r0
 8006560:	f2c0 8081 	blt.w	8006666 <quorem+0x112>
 8006564:	3c01      	subs	r4, #1
 8006566:	f101 0814 	add.w	r8, r1, #20
 800656a:	f100 0514 	add.w	r5, r0, #20
 800656e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800657c:	3301      	adds	r3, #1
 800657e:	429a      	cmp	r2, r3
 8006580:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006588:	fbb2 f6f3 	udiv	r6, r2, r3
 800658c:	d331      	bcc.n	80065f2 <quorem+0x9e>
 800658e:	f04f 0e00 	mov.w	lr, #0
 8006592:	4640      	mov	r0, r8
 8006594:	46ac      	mov	ip, r5
 8006596:	46f2      	mov	sl, lr
 8006598:	f850 2b04 	ldr.w	r2, [r0], #4
 800659c:	b293      	uxth	r3, r2
 800659e:	fb06 e303 	mla	r3, r6, r3, lr
 80065a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ebaa 0303 	sub.w	r3, sl, r3
 80065ac:	f8dc a000 	ldr.w	sl, [ip]
 80065b0:	0c12      	lsrs	r2, r2, #16
 80065b2:	fa13 f38a 	uxtah	r3, r3, sl
 80065b6:	fb06 e202 	mla	r2, r6, r2, lr
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065c2:	b292      	uxth	r2, r2
 80065c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80065d0:	4581      	cmp	r9, r0
 80065d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065d6:	f84c 3b04 	str.w	r3, [ip], #4
 80065da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065de:	d2db      	bcs.n	8006598 <quorem+0x44>
 80065e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80065e4:	b92b      	cbnz	r3, 80065f2 <quorem+0x9e>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	429d      	cmp	r5, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	d32e      	bcc.n	800664e <quorem+0xfa>
 80065f0:	613c      	str	r4, [r7, #16]
 80065f2:	4638      	mov	r0, r7
 80065f4:	f001 f8c6 	bl	8007784 <__mcmp>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	db24      	blt.n	8006646 <quorem+0xf2>
 80065fc:	3601      	adds	r6, #1
 80065fe:	4628      	mov	r0, r5
 8006600:	f04f 0c00 	mov.w	ip, #0
 8006604:	f858 2b04 	ldr.w	r2, [r8], #4
 8006608:	f8d0 e000 	ldr.w	lr, [r0]
 800660c:	b293      	uxth	r3, r2
 800660e:	ebac 0303 	sub.w	r3, ip, r3
 8006612:	0c12      	lsrs	r2, r2, #16
 8006614:	fa13 f38e 	uxtah	r3, r3, lr
 8006618:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800661c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006626:	45c1      	cmp	r9, r8
 8006628:	f840 3b04 	str.w	r3, [r0], #4
 800662c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006630:	d2e8      	bcs.n	8006604 <quorem+0xb0>
 8006632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663a:	b922      	cbnz	r2, 8006646 <quorem+0xf2>
 800663c:	3b04      	subs	r3, #4
 800663e:	429d      	cmp	r5, r3
 8006640:	461a      	mov	r2, r3
 8006642:	d30a      	bcc.n	800665a <quorem+0x106>
 8006644:	613c      	str	r4, [r7, #16]
 8006646:	4630      	mov	r0, r6
 8006648:	b003      	add	sp, #12
 800664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	3b04      	subs	r3, #4
 8006652:	2a00      	cmp	r2, #0
 8006654:	d1cc      	bne.n	80065f0 <quorem+0x9c>
 8006656:	3c01      	subs	r4, #1
 8006658:	e7c7      	b.n	80065ea <quorem+0x96>
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	3b04      	subs	r3, #4
 800665e:	2a00      	cmp	r2, #0
 8006660:	d1f0      	bne.n	8006644 <quorem+0xf0>
 8006662:	3c01      	subs	r4, #1
 8006664:	e7eb      	b.n	800663e <quorem+0xea>
 8006666:	2000      	movs	r0, #0
 8006668:	e7ee      	b.n	8006648 <quorem+0xf4>
 800666a:	0000      	movs	r0, r0
 800666c:	0000      	movs	r0, r0
	...

08006670 <_dtoa_r>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	ed2d 8b04 	vpush	{d8-d9}
 8006678:	ec57 6b10 	vmov	r6, r7, d0
 800667c:	b093      	sub	sp, #76	; 0x4c
 800667e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006680:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006684:	9106      	str	r1, [sp, #24]
 8006686:	ee10 aa10 	vmov	sl, s0
 800668a:	4604      	mov	r4, r0
 800668c:	9209      	str	r2, [sp, #36]	; 0x24
 800668e:	930c      	str	r3, [sp, #48]	; 0x30
 8006690:	46bb      	mov	fp, r7
 8006692:	b975      	cbnz	r5, 80066b2 <_dtoa_r+0x42>
 8006694:	2010      	movs	r0, #16
 8006696:	f000 fddd 	bl	8007254 <malloc>
 800669a:	4602      	mov	r2, r0
 800669c:	6260      	str	r0, [r4, #36]	; 0x24
 800669e:	b920      	cbnz	r0, 80066aa <_dtoa_r+0x3a>
 80066a0:	4ba7      	ldr	r3, [pc, #668]	; (8006940 <_dtoa_r+0x2d0>)
 80066a2:	21ea      	movs	r1, #234	; 0xea
 80066a4:	48a7      	ldr	r0, [pc, #668]	; (8006944 <_dtoa_r+0x2d4>)
 80066a6:	f001 fbd1 	bl	8007e4c <__assert_func>
 80066aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066ae:	6005      	str	r5, [r0, #0]
 80066b0:	60c5      	str	r5, [r0, #12]
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b4:	6819      	ldr	r1, [r3, #0]
 80066b6:	b151      	cbz	r1, 80066ce <_dtoa_r+0x5e>
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	604a      	str	r2, [r1, #4]
 80066bc:	2301      	movs	r3, #1
 80066be:	4093      	lsls	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fe1c 	bl	8007300 <_Bfree>
 80066c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	1e3b      	subs	r3, r7, #0
 80066d0:	bfaa      	itet	ge
 80066d2:	2300      	movge	r3, #0
 80066d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066d8:	f8c8 3000 	strge.w	r3, [r8]
 80066dc:	4b9a      	ldr	r3, [pc, #616]	; (8006948 <_dtoa_r+0x2d8>)
 80066de:	bfbc      	itt	lt
 80066e0:	2201      	movlt	r2, #1
 80066e2:	f8c8 2000 	strlt.w	r2, [r8]
 80066e6:	ea33 030b 	bics.w	r3, r3, fp
 80066ea:	d11b      	bne.n	8006724 <_dtoa_r+0xb4>
 80066ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066f8:	4333      	orrs	r3, r6
 80066fa:	f000 8592 	beq.w	8007222 <_dtoa_r+0xbb2>
 80066fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006700:	b963      	cbnz	r3, 800671c <_dtoa_r+0xac>
 8006702:	4b92      	ldr	r3, [pc, #584]	; (800694c <_dtoa_r+0x2dc>)
 8006704:	e022      	b.n	800674c <_dtoa_r+0xdc>
 8006706:	4b92      	ldr	r3, [pc, #584]	; (8006950 <_dtoa_r+0x2e0>)
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	3308      	adds	r3, #8
 800670c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	b013      	add	sp, #76	; 0x4c
 8006714:	ecbd 8b04 	vpop	{d8-d9}
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4b8b      	ldr	r3, [pc, #556]	; (800694c <_dtoa_r+0x2dc>)
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	3303      	adds	r3, #3
 8006722:	e7f3      	b.n	800670c <_dtoa_r+0x9c>
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	4650      	mov	r0, sl
 800672a:	4659      	mov	r1, fp
 800672c:	f7fa f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006730:	ec4b ab19 	vmov	d9, sl, fp
 8006734:	4680      	mov	r8, r0
 8006736:	b158      	cbz	r0, 8006750 <_dtoa_r+0xe0>
 8006738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800673a:	2301      	movs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 856b 	beq.w	800721c <_dtoa_r+0xbac>
 8006746:	4883      	ldr	r0, [pc, #524]	; (8006954 <_dtoa_r+0x2e4>)
 8006748:	6018      	str	r0, [r3, #0]
 800674a:	1e43      	subs	r3, r0, #1
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	e7df      	b.n	8006710 <_dtoa_r+0xa0>
 8006750:	ec4b ab10 	vmov	d0, sl, fp
 8006754:	aa10      	add	r2, sp, #64	; 0x40
 8006756:	a911      	add	r1, sp, #68	; 0x44
 8006758:	4620      	mov	r0, r4
 800675a:	f001 f8b9 	bl	80078d0 <__d2b>
 800675e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006762:	ee08 0a10 	vmov	s16, r0
 8006766:	2d00      	cmp	r5, #0
 8006768:	f000 8084 	beq.w	8006874 <_dtoa_r+0x204>
 800676c:	ee19 3a90 	vmov	r3, s19
 8006770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006774:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006778:	4656      	mov	r6, sl
 800677a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800677e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006782:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006786:	4b74      	ldr	r3, [pc, #464]	; (8006958 <_dtoa_r+0x2e8>)
 8006788:	2200      	movs	r2, #0
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7f9 fd7b 	bl	8000288 <__aeabi_dsub>
 8006792:	a365      	add	r3, pc, #404	; (adr r3, 8006928 <_dtoa_r+0x2b8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 ff2e 	bl	80005f8 <__aeabi_dmul>
 800679c:	a364      	add	r3, pc, #400	; (adr r3, 8006930 <_dtoa_r+0x2c0>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fd73 	bl	800028c <__adddf3>
 80067a6:	4606      	mov	r6, r0
 80067a8:	4628      	mov	r0, r5
 80067aa:	460f      	mov	r7, r1
 80067ac:	f7f9 feba 	bl	8000524 <__aeabi_i2d>
 80067b0:	a361      	add	r3, pc, #388	; (adr r3, 8006938 <_dtoa_r+0x2c8>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7f9 ff1f 	bl	80005f8 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fd63 	bl	800028c <__adddf3>
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	f7fa f9c5 	bl	8000b58 <__aeabi_d2iz>
 80067ce:	2200      	movs	r2, #0
 80067d0:	9000      	str	r0, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f980 	bl	8000adc <__aeabi_dcmplt>
 80067dc:	b150      	cbz	r0, 80067f4 <_dtoa_r+0x184>
 80067de:	9800      	ldr	r0, [sp, #0]
 80067e0:	f7f9 fea0 	bl	8000524 <__aeabi_i2d>
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	f7fa f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ec:	b910      	cbnz	r0, 80067f4 <_dtoa_r+0x184>
 80067ee:	9b00      	ldr	r3, [sp, #0]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	2b16      	cmp	r3, #22
 80067f8:	d85a      	bhi.n	80068b0 <_dtoa_r+0x240>
 80067fa:	9a00      	ldr	r2, [sp, #0]
 80067fc:	4b57      	ldr	r3, [pc, #348]	; (800695c <_dtoa_r+0x2ec>)
 80067fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	ec51 0b19 	vmov	r0, r1, d9
 800680a:	f7fa f967 	bl	8000adc <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	d050      	beq.n	80068b4 <_dtoa_r+0x244>
 8006812:	9b00      	ldr	r3, [sp, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	930b      	str	r3, [sp, #44]	; 0x2c
 800681c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681e:	1b5d      	subs	r5, r3, r5
 8006820:	1e6b      	subs	r3, r5, #1
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	bf45      	ittet	mi
 8006826:	f1c5 0301 	rsbmi	r3, r5, #1
 800682a:	9304      	strmi	r3, [sp, #16]
 800682c:	2300      	movpl	r3, #0
 800682e:	2300      	movmi	r3, #0
 8006830:	bf4c      	ite	mi
 8006832:	9305      	strmi	r3, [sp, #20]
 8006834:	9304      	strpl	r3, [sp, #16]
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db3d      	blt.n	80068b8 <_dtoa_r+0x248>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	9a00      	ldr	r2, [sp, #0]
 8006840:	920a      	str	r2, [sp, #40]	; 0x28
 8006842:	4413      	add	r3, r2
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	2300      	movs	r3, #0
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b09      	cmp	r3, #9
 800684e:	f200 8089 	bhi.w	8006964 <_dtoa_r+0x2f4>
 8006852:	2b05      	cmp	r3, #5
 8006854:	bfc4      	itt	gt
 8006856:	3b04      	subgt	r3, #4
 8006858:	9306      	strgt	r3, [sp, #24]
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	f1a3 0302 	sub.w	r3, r3, #2
 8006860:	bfcc      	ite	gt
 8006862:	2500      	movgt	r5, #0
 8006864:	2501      	movle	r5, #1
 8006866:	2b03      	cmp	r3, #3
 8006868:	f200 8087 	bhi.w	800697a <_dtoa_r+0x30a>
 800686c:	e8df f003 	tbb	[pc, r3]
 8006870:	59383a2d 	.word	0x59383a2d
 8006874:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006878:	441d      	add	r5, r3
 800687a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800687e:	2b20      	cmp	r3, #32
 8006880:	bfc1      	itttt	gt
 8006882:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006886:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800688a:	fa0b f303 	lslgt.w	r3, fp, r3
 800688e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006892:	bfda      	itte	le
 8006894:	f1c3 0320 	rsble	r3, r3, #32
 8006898:	fa06 f003 	lslle.w	r0, r6, r3
 800689c:	4318      	orrgt	r0, r3
 800689e:	f7f9 fe31 	bl	8000504 <__aeabi_ui2d>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4606      	mov	r6, r0
 80068a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068aa:	3d01      	subs	r5, #1
 80068ac:	930e      	str	r3, [sp, #56]	; 0x38
 80068ae:	e76a      	b.n	8006786 <_dtoa_r+0x116>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7b2      	b.n	800681a <_dtoa_r+0x1aa>
 80068b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80068b6:	e7b1      	b.n	800681c <_dtoa_r+0x1ac>
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	9a00      	ldr	r2, [sp, #0]
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	4253      	negs	r3, r2
 80068c2:	9307      	str	r3, [sp, #28]
 80068c4:	2300      	movs	r3, #0
 80068c6:	930a      	str	r3, [sp, #40]	; 0x28
 80068c8:	e7bf      	b.n	800684a <_dtoa_r+0x1da>
 80068ca:	2300      	movs	r3, #0
 80068cc:	9308      	str	r3, [sp, #32]
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc55      	bgt.n	8006980 <_dtoa_r+0x310>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068da:	461a      	mov	r2, r3
 80068dc:	9209      	str	r2, [sp, #36]	; 0x24
 80068de:	e00c      	b.n	80068fa <_dtoa_r+0x28a>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7f3      	b.n	80068cc <_dtoa_r+0x25c>
 80068e4:	2300      	movs	r3, #0
 80068e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	9b00      	ldr	r3, [sp, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	9302      	str	r3, [sp, #8]
 80068f0:	3301      	adds	r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	9303      	str	r3, [sp, #12]
 80068f6:	bfb8      	it	lt
 80068f8:	2301      	movlt	r3, #1
 80068fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068fc:	2200      	movs	r2, #0
 80068fe:	6042      	str	r2, [r0, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	f102 0614 	add.w	r6, r2, #20
 8006906:	429e      	cmp	r6, r3
 8006908:	6841      	ldr	r1, [r0, #4]
 800690a:	d93d      	bls.n	8006988 <_dtoa_r+0x318>
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fcb7 	bl	8007280 <_Balloc>
 8006912:	9001      	str	r0, [sp, #4]
 8006914:	2800      	cmp	r0, #0
 8006916:	d13b      	bne.n	8006990 <_dtoa_r+0x320>
 8006918:	4b11      	ldr	r3, [pc, #68]	; (8006960 <_dtoa_r+0x2f0>)
 800691a:	4602      	mov	r2, r0
 800691c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006920:	e6c0      	b.n	80066a4 <_dtoa_r+0x34>
 8006922:	2301      	movs	r3, #1
 8006924:	e7df      	b.n	80068e6 <_dtoa_r+0x276>
 8006926:	bf00      	nop
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	08008ab9 	.word	0x08008ab9
 8006944:	08008ad0 	.word	0x08008ad0
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	08008ab5 	.word	0x08008ab5
 8006950:	08008aac 	.word	0x08008aac
 8006954:	08008a89 	.word	0x08008a89
 8006958:	3ff80000 	.word	0x3ff80000
 800695c:	08008bc0 	.word	0x08008bc0
 8006960:	08008b2b 	.word	0x08008b2b
 8006964:	2501      	movs	r5, #1
 8006966:	2300      	movs	r3, #0
 8006968:	9306      	str	r3, [sp, #24]
 800696a:	9508      	str	r5, [sp, #32]
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2312      	movs	r3, #18
 8006978:	e7b0      	b.n	80068dc <_dtoa_r+0x26c>
 800697a:	2301      	movs	r3, #1
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	e7f5      	b.n	800696c <_dtoa_r+0x2fc>
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006986:	e7b8      	b.n	80068fa <_dtoa_r+0x28a>
 8006988:	3101      	adds	r1, #1
 800698a:	6041      	str	r1, [r0, #4]
 800698c:	0052      	lsls	r2, r2, #1
 800698e:	e7b8      	b.n	8006902 <_dtoa_r+0x292>
 8006990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006992:	9a01      	ldr	r2, [sp, #4]
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	2b0e      	cmp	r3, #14
 800699a:	f200 809d 	bhi.w	8006ad8 <_dtoa_r+0x468>
 800699e:	2d00      	cmp	r5, #0
 80069a0:	f000 809a 	beq.w	8006ad8 <_dtoa_r+0x468>
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dd32      	ble.n	8006a10 <_dtoa_r+0x3a0>
 80069aa:	4ab7      	ldr	r2, [pc, #732]	; (8006c88 <_dtoa_r+0x618>)
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069b8:	9b00      	ldr	r3, [sp, #0]
 80069ba:	05d8      	lsls	r0, r3, #23
 80069bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069c0:	d516      	bpl.n	80069f0 <_dtoa_r+0x380>
 80069c2:	4bb2      	ldr	r3, [pc, #712]	; (8006c8c <_dtoa_r+0x61c>)
 80069c4:	ec51 0b19 	vmov	r0, r1, d9
 80069c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069cc:	f7f9 ff3e 	bl	800084c <__aeabi_ddiv>
 80069d0:	f007 070f 	and.w	r7, r7, #15
 80069d4:	4682      	mov	sl, r0
 80069d6:	468b      	mov	fp, r1
 80069d8:	2503      	movs	r5, #3
 80069da:	4eac      	ldr	r6, [pc, #688]	; (8006c8c <_dtoa_r+0x61c>)
 80069dc:	b957      	cbnz	r7, 80069f4 <_dtoa_r+0x384>
 80069de:	4642      	mov	r2, r8
 80069e0:	464b      	mov	r3, r9
 80069e2:	4650      	mov	r0, sl
 80069e4:	4659      	mov	r1, fp
 80069e6:	f7f9 ff31 	bl	800084c <__aeabi_ddiv>
 80069ea:	4682      	mov	sl, r0
 80069ec:	468b      	mov	fp, r1
 80069ee:	e028      	b.n	8006a42 <_dtoa_r+0x3d2>
 80069f0:	2502      	movs	r5, #2
 80069f2:	e7f2      	b.n	80069da <_dtoa_r+0x36a>
 80069f4:	07f9      	lsls	r1, r7, #31
 80069f6:	d508      	bpl.n	8006a0a <_dtoa_r+0x39a>
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a00:	f7f9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8006a04:	3501      	adds	r5, #1
 8006a06:	4680      	mov	r8, r0
 8006a08:	4689      	mov	r9, r1
 8006a0a:	107f      	asrs	r7, r7, #1
 8006a0c:	3608      	adds	r6, #8
 8006a0e:	e7e5      	b.n	80069dc <_dtoa_r+0x36c>
 8006a10:	f000 809b 	beq.w	8006b4a <_dtoa_r+0x4da>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	4f9d      	ldr	r7, [pc, #628]	; (8006c8c <_dtoa_r+0x61c>)
 8006a18:	425e      	negs	r6, r3
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	; (8006c88 <_dtoa_r+0x618>)
 8006a1c:	f006 020f 	and.w	r2, r6, #15
 8006a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	ec51 0b19 	vmov	r0, r1, d9
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	1136      	asrs	r6, r6, #4
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	2300      	movs	r3, #0
 8006a38:	2502      	movs	r5, #2
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d17a      	bne.n	8006b34 <_dtoa_r+0x4c4>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1d3      	bne.n	80069ea <_dtoa_r+0x37a>
 8006a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8082 	beq.w	8006b4e <_dtoa_r+0x4de>
 8006a4a:	4b91      	ldr	r3, [pc, #580]	; (8006c90 <_dtoa_r+0x620>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4650      	mov	r0, sl
 8006a50:	4659      	mov	r1, fp
 8006a52:	f7fa f843 	bl	8000adc <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d079      	beq.n	8006b4e <_dtoa_r+0x4de>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d076      	beq.n	8006b4e <_dtoa_r+0x4de>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dd36      	ble.n	8006ad4 <_dtoa_r+0x464>
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	4650      	mov	r0, sl
 8006a6a:	4659      	mov	r1, fp
 8006a6c:	1e5f      	subs	r7, r3, #1
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <_dtoa_r+0x624>)
 8006a72:	f7f9 fdc1 	bl	80005f8 <__aeabi_dmul>
 8006a76:	9e02      	ldr	r6, [sp, #8]
 8006a78:	4682      	mov	sl, r0
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7f9 fd50 	bl	8000524 <__aeabi_i2d>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	f7f9 fdb6 	bl	80005f8 <__aeabi_dmul>
 8006a8c:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <_dtoa_r+0x628>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	46d0      	mov	r8, sl
 8006a96:	46d9      	mov	r9, fp
 8006a98:	4682      	mov	sl, r0
 8006a9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d158      	bne.n	8006b54 <_dtoa_r+0x4e4>
 8006aa2:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <_dtoa_r+0x62c>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fbed 	bl	8000288 <__aeabi_dsub>
 8006aae:	4652      	mov	r2, sl
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	4689      	mov	r9, r1
 8006ab6:	f7fa f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f040 8295 	bne.w	8006fea <_dtoa_r+0x97a>
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7fa f807 	bl	8000adc <__aeabi_dcmplt>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f040 8289 	bne.w	8006fe6 <_dtoa_r+0x976>
 8006ad4:	ec5b ab19 	vmov	sl, fp, d9
 8006ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f2c0 8148 	blt.w	8006d70 <_dtoa_r+0x700>
 8006ae0:	9a00      	ldr	r2, [sp, #0]
 8006ae2:	2a0e      	cmp	r2, #14
 8006ae4:	f300 8144 	bgt.w	8006d70 <_dtoa_r+0x700>
 8006ae8:	4b67      	ldr	r3, [pc, #412]	; (8006c88 <_dtoa_r+0x618>)
 8006aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f280 80d5 	bge.w	8006ca4 <_dtoa_r+0x634>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f300 80d1 	bgt.w	8006ca4 <_dtoa_r+0x634>
 8006b02:	f040 826f 	bne.w	8006fe4 <_dtoa_r+0x974>
 8006b06:	4b65      	ldr	r3, [pc, #404]	; (8006c9c <_dtoa_r+0x62c>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fd73 	bl	80005f8 <__aeabi_dmul>
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	f7f9 fff5 	bl	8000b04 <__aeabi_dcmpge>
 8006b1a:	9e03      	ldr	r6, [sp, #12]
 8006b1c:	4637      	mov	r7, r6
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f040 8245 	bne.w	8006fae <_dtoa_r+0x93e>
 8006b24:	9d01      	ldr	r5, [sp, #4]
 8006b26:	2331      	movs	r3, #49	; 0x31
 8006b28:	f805 3b01 	strb.w	r3, [r5], #1
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	e240      	b.n	8006fb6 <_dtoa_r+0x946>
 8006b34:	07f2      	lsls	r2, r6, #31
 8006b36:	d505      	bpl.n	8006b44 <_dtoa_r+0x4d4>
 8006b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	3501      	adds	r5, #1
 8006b42:	2301      	movs	r3, #1
 8006b44:	1076      	asrs	r6, r6, #1
 8006b46:	3708      	adds	r7, #8
 8006b48:	e777      	b.n	8006a3a <_dtoa_r+0x3ca>
 8006b4a:	2502      	movs	r5, #2
 8006b4c:	e779      	b.n	8006a42 <_dtoa_r+0x3d2>
 8006b4e:	9f00      	ldr	r7, [sp, #0]
 8006b50:	9e03      	ldr	r6, [sp, #12]
 8006b52:	e794      	b.n	8006a7e <_dtoa_r+0x40e>
 8006b54:	9901      	ldr	r1, [sp, #4]
 8006b56:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <_dtoa_r+0x618>)
 8006b58:	4431      	add	r1, r6
 8006b5a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b5c:	9908      	ldr	r1, [sp, #32]
 8006b5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d043      	beq.n	8006bf2 <_dtoa_r+0x582>
 8006b6a:	494d      	ldr	r1, [pc, #308]	; (8006ca0 <_dtoa_r+0x630>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7f9 fe6d 	bl	800084c <__aeabi_ddiv>
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	9d01      	ldr	r5, [sp, #4]
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	468b      	mov	fp, r1
 8006b80:	4649      	mov	r1, r9
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7f9 ffe8 	bl	8000b58 <__aeabi_d2iz>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	f7f9 fccb 	bl	8000524 <__aeabi_i2d>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	3630      	adds	r6, #48	; 0x30
 8006b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	f7f9 ff98 	bl	8000adc <__aeabi_dcmplt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d163      	bne.n	8006c78 <_dtoa_r+0x608>
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4936      	ldr	r1, [pc, #216]	; (8006c90 <_dtoa_r+0x620>)
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f7f9 fb66 	bl	8000288 <__aeabi_dsub>
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	f7f9 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f040 80b5 	bne.w	8006d34 <_dtoa_r+0x6c4>
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	429d      	cmp	r5, r3
 8006bce:	d081      	beq.n	8006ad4 <_dtoa_r+0x464>
 8006bd0:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <_dtoa_r+0x624>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	f7f9 fd0e 	bl	80005f8 <__aeabi_dmul>
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <_dtoa_r+0x624>)
 8006bde:	4682      	mov	sl, r0
 8006be0:	468b      	mov	fp, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	2200      	movs	r2, #0
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	e7c6      	b.n	8006b80 <_dtoa_r+0x510>
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bfc:	9d01      	ldr	r5, [sp, #4]
 8006bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c00:	4682      	mov	sl, r0
 8006c02:	468b      	mov	fp, r1
 8006c04:	4649      	mov	r1, r9
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7f9 ffa6 	bl	8000b58 <__aeabi_d2iz>
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	f7f9 fc89 	bl	8000524 <__aeabi_i2d>
 8006c12:	3630      	adds	r6, #48	; 0x30
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fb34 	bl	8000288 <__aeabi_dsub>
 8006c20:	f805 6b01 	strb.w	r6, [r5], #1
 8006c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c26:	429d      	cmp	r5, r3
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4689      	mov	r9, r1
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	d124      	bne.n	8006c7c <_dtoa_r+0x60c>
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <_dtoa_r+0x630>)
 8006c34:	4650      	mov	r0, sl
 8006c36:	4659      	mov	r1, fp
 8006c38:	f7f9 fb28 	bl	800028c <__adddf3>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4640      	mov	r0, r8
 8006c42:	4649      	mov	r1, r9
 8006c44:	f7f9 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d173      	bne.n	8006d34 <_dtoa_r+0x6c4>
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	465b      	mov	r3, fp
 8006c50:	4913      	ldr	r1, [pc, #76]	; (8006ca0 <_dtoa_r+0x630>)
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7f9 fb18 	bl	8000288 <__aeabi_dsub>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f43f af35 	beq.w	8006ad4 <_dtoa_r+0x464>
 8006c6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c6c:	1e6b      	subs	r3, r5, #1
 8006c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d0f8      	beq.n	8006c6a <_dtoa_r+0x5fa>
 8006c78:	9700      	str	r7, [sp, #0]
 8006c7a:	e049      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <_dtoa_r+0x624>)
 8006c7e:	f7f9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8006c82:	4680      	mov	r8, r0
 8006c84:	4689      	mov	r9, r1
 8006c86:	e7bd      	b.n	8006c04 <_dtoa_r+0x594>
 8006c88:	08008bc0 	.word	0x08008bc0
 8006c8c:	08008b98 	.word	0x08008b98
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	40240000 	.word	0x40240000
 8006c98:	401c0000 	.word	0x401c0000
 8006c9c:	40140000 	.word	0x40140000
 8006ca0:	3fe00000 	.word	0x3fe00000
 8006ca4:	9d01      	ldr	r5, [sp, #4]
 8006ca6:	4656      	mov	r6, sl
 8006ca8:	465f      	mov	r7, fp
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 fdcb 	bl	800084c <__aeabi_ddiv>
 8006cb6:	f7f9 ff4f 	bl	8000b58 <__aeabi_d2iz>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	f7f9 fc32 	bl	8000524 <__aeabi_i2d>
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f7f9 fc98 	bl	80005f8 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006cd4:	f7f9 fad8 	bl	8000288 <__aeabi_dsub>
 8006cd8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cdc:	9e01      	ldr	r6, [sp, #4]
 8006cde:	9f03      	ldr	r7, [sp, #12]
 8006ce0:	1bae      	subs	r6, r5, r6
 8006ce2:	42b7      	cmp	r7, r6
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	d135      	bne.n	8006d56 <_dtoa_r+0x6e6>
 8006cea:	f7f9 facf 	bl	800028c <__adddf3>
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460f      	mov	r7, r1
 8006cf6:	f7f9 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8006cfa:	b9d0      	cbnz	r0, 8006d32 <_dtoa_r+0x6c2>
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d08:	b110      	cbz	r0, 8006d10 <_dtoa_r+0x6a0>
 8006d0a:	f01a 0f01 	tst.w	sl, #1
 8006d0e:	d110      	bne.n	8006d32 <_dtoa_r+0x6c2>
 8006d10:	4620      	mov	r0, r4
 8006d12:	ee18 1a10 	vmov	r1, s16
 8006d16:	f000 faf3 	bl	8007300 <_Bfree>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9800      	ldr	r0, [sp, #0]
 8006d1e:	702b      	strb	r3, [r5, #0]
 8006d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d22:	3001      	adds	r0, #1
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f43f acf1 	beq.w	8006710 <_dtoa_r+0xa0>
 8006d2e:	601d      	str	r5, [r3, #0]
 8006d30:	e4ee      	b.n	8006710 <_dtoa_r+0xa0>
 8006d32:	9f00      	ldr	r7, [sp, #0]
 8006d34:	462b      	mov	r3, r5
 8006d36:	461d      	mov	r5, r3
 8006d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3c:	2a39      	cmp	r2, #57	; 0x39
 8006d3e:	d106      	bne.n	8006d4e <_dtoa_r+0x6de>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d1f7      	bne.n	8006d36 <_dtoa_r+0x6c6>
 8006d46:	9901      	ldr	r1, [sp, #4]
 8006d48:	2230      	movs	r2, #48	; 0x30
 8006d4a:	3701      	adds	r7, #1
 8006d4c:	700a      	strb	r2, [r1, #0]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	3201      	adds	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	e790      	b.n	8006c78 <_dtoa_r+0x608>
 8006d56:	4ba6      	ldr	r3, [pc, #664]	; (8006ff0 <_dtoa_r+0x980>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4606      	mov	r6, r0
 8006d64:	460f      	mov	r7, r1
 8006d66:	f7f9 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d09d      	beq.n	8006caa <_dtoa_r+0x63a>
 8006d6e:	e7cf      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006d70:	9a08      	ldr	r2, [sp, #32]
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	f000 80d7 	beq.w	8006f26 <_dtoa_r+0x8b6>
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2a01      	cmp	r2, #1
 8006d7c:	f300 80ba 	bgt.w	8006ef4 <_dtoa_r+0x884>
 8006d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	f000 80b2 	beq.w	8006eec <_dtoa_r+0x87c>
 8006d88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d8c:	9e07      	ldr	r6, [sp, #28]
 8006d8e:	9d04      	ldr	r5, [sp, #16]
 8006d90:	9a04      	ldr	r2, [sp, #16]
 8006d92:	441a      	add	r2, r3
 8006d94:	9204      	str	r2, [sp, #16]
 8006d96:	9a05      	ldr	r2, [sp, #20]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	441a      	add	r2, r3
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	9205      	str	r2, [sp, #20]
 8006da0:	f000 fb66 	bl	8007470 <__i2b>
 8006da4:	4607      	mov	r7, r0
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	dd0c      	ble.n	8006dc4 <_dtoa_r+0x754>
 8006daa:	9b05      	ldr	r3, [sp, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dd09      	ble.n	8006dc4 <_dtoa_r+0x754>
 8006db0:	42ab      	cmp	r3, r5
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	bfa8      	it	ge
 8006db6:	462b      	movge	r3, r5
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	9204      	str	r2, [sp, #16]
 8006dbc:	9a05      	ldr	r2, [sp, #20]
 8006dbe:	1aed      	subs	r5, r5, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	b31b      	cbz	r3, 8006e10 <_dtoa_r+0x7a0>
 8006dc8:	9b08      	ldr	r3, [sp, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 80af 	beq.w	8006f2e <_dtoa_r+0x8be>
 8006dd0:	2e00      	cmp	r6, #0
 8006dd2:	dd13      	ble.n	8006dfc <_dtoa_r+0x78c>
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fc09 	bl	80075f0 <__pow5mult>
 8006dde:	ee18 2a10 	vmov	r2, s16
 8006de2:	4601      	mov	r1, r0
 8006de4:	4607      	mov	r7, r0
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fb58 	bl	800749c <__multiply>
 8006dec:	ee18 1a10 	vmov	r1, s16
 8006df0:	4680      	mov	r8, r0
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fa84 	bl	8007300 <_Bfree>
 8006df8:	ee08 8a10 	vmov	s16, r8
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	1b9a      	subs	r2, r3, r6
 8006e00:	d006      	beq.n	8006e10 <_dtoa_r+0x7a0>
 8006e02:	ee18 1a10 	vmov	r1, s16
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fbf2 	bl	80075f0 <__pow5mult>
 8006e0c:	ee08 0a10 	vmov	s16, r0
 8006e10:	2101      	movs	r1, #1
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 fb2c 	bl	8007470 <__i2b>
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	f340 8088 	ble.w	8006f32 <_dtoa_r+0x8c2>
 8006e22:	461a      	mov	r2, r3
 8006e24:	4601      	mov	r1, r0
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fbe2 	bl	80075f0 <__pow5mult>
 8006e2c:	9b06      	ldr	r3, [sp, #24]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	4606      	mov	r6, r0
 8006e32:	f340 8081 	ble.w	8006f38 <_dtoa_r+0x8c8>
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	6933      	ldr	r3, [r6, #16]
 8006e3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e40:	6918      	ldr	r0, [r3, #16]
 8006e42:	f000 fac5 	bl	80073d0 <__hi0bits>
 8006e46:	f1c0 0020 	rsb	r0, r0, #32
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	4418      	add	r0, r3
 8006e4e:	f010 001f 	ands.w	r0, r0, #31
 8006e52:	f000 8092 	beq.w	8006f7a <_dtoa_r+0x90a>
 8006e56:	f1c0 0320 	rsb	r3, r0, #32
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	f340 808a 	ble.w	8006f74 <_dtoa_r+0x904>
 8006e60:	f1c0 001c 	rsb	r0, r0, #28
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	4403      	add	r3, r0
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	4403      	add	r3, r0
 8006e6e:	4405      	add	r5, r0
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd07      	ble.n	8006e88 <_dtoa_r+0x818>
 8006e78:	ee18 1a10 	vmov	r1, s16
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fc10 	bl	80076a4 <__lshift>
 8006e84:	ee08 0a10 	vmov	s16, r0
 8006e88:	9b05      	ldr	r3, [sp, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dd05      	ble.n	8006e9a <_dtoa_r+0x82a>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	461a      	mov	r2, r3
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fc06 	bl	80076a4 <__lshift>
 8006e98:	4606      	mov	r6, r0
 8006e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d06e      	beq.n	8006f7e <_dtoa_r+0x90e>
 8006ea0:	ee18 0a10 	vmov	r0, s16
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	f000 fc6d 	bl	8007784 <__mcmp>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	da67      	bge.n	8006f7e <_dtoa_r+0x90e>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	220a      	movs	r2, #10
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fa41 	bl	8007344 <__multadd>
 8006ec2:	9b08      	ldr	r3, [sp, #32]
 8006ec4:	ee08 0a10 	vmov	s16, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 81b1 	beq.w	8007230 <_dtoa_r+0xbc0>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fa35 	bl	8007344 <__multadd>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	4607      	mov	r7, r0
 8006ee0:	f300 808e 	bgt.w	8007000 <_dtoa_r+0x990>
 8006ee4:	9b06      	ldr	r3, [sp, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	dc51      	bgt.n	8006f8e <_dtoa_r+0x91e>
 8006eea:	e089      	b.n	8007000 <_dtoa_r+0x990>
 8006eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ef2:	e74b      	b.n	8006d8c <_dtoa_r+0x71c>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	1e5e      	subs	r6, r3, #1
 8006ef8:	9b07      	ldr	r3, [sp, #28]
 8006efa:	42b3      	cmp	r3, r6
 8006efc:	bfbf      	itttt	lt
 8006efe:	9b07      	ldrlt	r3, [sp, #28]
 8006f00:	9607      	strlt	r6, [sp, #28]
 8006f02:	1af2      	sublt	r2, r6, r3
 8006f04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f06:	bfb6      	itet	lt
 8006f08:	189b      	addlt	r3, r3, r2
 8006f0a:	1b9e      	subge	r6, r3, r6
 8006f0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	bfb8      	it	lt
 8006f12:	2600      	movlt	r6, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfb7      	itett	lt
 8006f18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f20:	1a9d      	sublt	r5, r3, r2
 8006f22:	2300      	movlt	r3, #0
 8006f24:	e734      	b.n	8006d90 <_dtoa_r+0x720>
 8006f26:	9e07      	ldr	r6, [sp, #28]
 8006f28:	9d04      	ldr	r5, [sp, #16]
 8006f2a:	9f08      	ldr	r7, [sp, #32]
 8006f2c:	e73b      	b.n	8006da6 <_dtoa_r+0x736>
 8006f2e:	9a07      	ldr	r2, [sp, #28]
 8006f30:	e767      	b.n	8006e02 <_dtoa_r+0x792>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	dc18      	bgt.n	8006f6a <_dtoa_r+0x8fa>
 8006f38:	f1ba 0f00 	cmp.w	sl, #0
 8006f3c:	d115      	bne.n	8006f6a <_dtoa_r+0x8fa>
 8006f3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f42:	b993      	cbnz	r3, 8006f6a <_dtoa_r+0x8fa>
 8006f44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f48:	0d1b      	lsrs	r3, r3, #20
 8006f4a:	051b      	lsls	r3, r3, #20
 8006f4c:	b183      	cbz	r3, 8006f70 <_dtoa_r+0x900>
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	f04f 0801 	mov.w	r8, #1
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f af6a 	bne.w	8006e3a <_dtoa_r+0x7ca>
 8006f66:	2001      	movs	r0, #1
 8006f68:	e76f      	b.n	8006e4a <_dtoa_r+0x7da>
 8006f6a:	f04f 0800 	mov.w	r8, #0
 8006f6e:	e7f6      	b.n	8006f5e <_dtoa_r+0x8ee>
 8006f70:	4698      	mov	r8, r3
 8006f72:	e7f4      	b.n	8006f5e <_dtoa_r+0x8ee>
 8006f74:	f43f af7d 	beq.w	8006e72 <_dtoa_r+0x802>
 8006f78:	4618      	mov	r0, r3
 8006f7a:	301c      	adds	r0, #28
 8006f7c:	e772      	b.n	8006e64 <_dtoa_r+0x7f4>
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dc37      	bgt.n	8006ff4 <_dtoa_r+0x984>
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dd34      	ble.n	8006ff4 <_dtoa_r+0x984>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	b96b      	cbnz	r3, 8006fae <_dtoa_r+0x93e>
 8006f92:	4631      	mov	r1, r6
 8006f94:	2205      	movs	r2, #5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f9d4 	bl	8007344 <__multadd>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	ee18 0a10 	vmov	r0, s16
 8006fa4:	f000 fbee 	bl	8007784 <__mcmp>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f73f adbb 	bgt.w	8006b24 <_dtoa_r+0x4b4>
 8006fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb0:	9d01      	ldr	r5, [sp, #4]
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 f99f 	bl	8007300 <_Bfree>
 8006fc2:	2f00      	cmp	r7, #0
 8006fc4:	f43f aea4 	beq.w	8006d10 <_dtoa_r+0x6a0>
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	d005      	beq.n	8006fda <_dtoa_r+0x96a>
 8006fce:	45b8      	cmp	r8, r7
 8006fd0:	d003      	beq.n	8006fda <_dtoa_r+0x96a>
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 f993 	bl	8007300 <_Bfree>
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 f98f 	bl	8007300 <_Bfree>
 8006fe2:	e695      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	4637      	mov	r7, r6
 8006fe8:	e7e1      	b.n	8006fae <_dtoa_r+0x93e>
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	4637      	mov	r7, r6
 8006fee:	e599      	b.n	8006b24 <_dtoa_r+0x4b4>
 8006ff0:	40240000 	.word	0x40240000
 8006ff4:	9b08      	ldr	r3, [sp, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80ca 	beq.w	8007190 <_dtoa_r+0xb20>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	9302      	str	r3, [sp, #8]
 8007000:	2d00      	cmp	r5, #0
 8007002:	dd05      	ble.n	8007010 <_dtoa_r+0x9a0>
 8007004:	4639      	mov	r1, r7
 8007006:	462a      	mov	r2, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fb4b 	bl	80076a4 <__lshift>
 800700e:	4607      	mov	r7, r0
 8007010:	f1b8 0f00 	cmp.w	r8, #0
 8007014:	d05b      	beq.n	80070ce <_dtoa_r+0xa5e>
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 f931 	bl	8007280 <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b928      	cbnz	r0, 800702e <_dtoa_r+0x9be>
 8007022:	4b87      	ldr	r3, [pc, #540]	; (8007240 <_dtoa_r+0xbd0>)
 8007024:	4602      	mov	r2, r0
 8007026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800702a:	f7ff bb3b 	b.w	80066a4 <_dtoa_r+0x34>
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	3202      	adds	r2, #2
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	f107 010c 	add.w	r1, r7, #12
 8007038:	300c      	adds	r0, #12
 800703a:	f000 f913 	bl	8007264 <memcpy>
 800703e:	2201      	movs	r2, #1
 8007040:	4629      	mov	r1, r5
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb2e 	bl	80076a4 <__lshift>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	f103 0901 	add.w	r9, r3, #1
 800704e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007052:	4413      	add	r3, r2
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	f00a 0301 	and.w	r3, sl, #1
 800705a:	46b8      	mov	r8, r7
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	4607      	mov	r7, r0
 8007060:	4631      	mov	r1, r6
 8007062:	ee18 0a10 	vmov	r0, s16
 8007066:	f7ff fa75 	bl	8006554 <quorem>
 800706a:	4641      	mov	r1, r8
 800706c:	9002      	str	r0, [sp, #8]
 800706e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007072:	ee18 0a10 	vmov	r0, s16
 8007076:	f000 fb85 	bl	8007784 <__mcmp>
 800707a:	463a      	mov	r2, r7
 800707c:	9003      	str	r0, [sp, #12]
 800707e:	4631      	mov	r1, r6
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fb9b 	bl	80077bc <__mdiff>
 8007086:	68c2      	ldr	r2, [r0, #12]
 8007088:	f109 3bff 	add.w	fp, r9, #4294967295
 800708c:	4605      	mov	r5, r0
 800708e:	bb02      	cbnz	r2, 80070d2 <_dtoa_r+0xa62>
 8007090:	4601      	mov	r1, r0
 8007092:	ee18 0a10 	vmov	r0, s16
 8007096:	f000 fb75 	bl	8007784 <__mcmp>
 800709a:	4602      	mov	r2, r0
 800709c:	4629      	mov	r1, r5
 800709e:	4620      	mov	r0, r4
 80070a0:	9207      	str	r2, [sp, #28]
 80070a2:	f000 f92d 	bl	8007300 <_Bfree>
 80070a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070aa:	ea43 0102 	orr.w	r1, r3, r2
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	464d      	mov	r5, r9
 80070b4:	d10f      	bne.n	80070d6 <_dtoa_r+0xa66>
 80070b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ba:	d02a      	beq.n	8007112 <_dtoa_r+0xaa2>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd02      	ble.n	80070c8 <_dtoa_r+0xa58>
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070c8:	f88b a000 	strb.w	sl, [fp]
 80070cc:	e775      	b.n	8006fba <_dtoa_r+0x94a>
 80070ce:	4638      	mov	r0, r7
 80070d0:	e7ba      	b.n	8007048 <_dtoa_r+0x9d8>
 80070d2:	2201      	movs	r2, #1
 80070d4:	e7e2      	b.n	800709c <_dtoa_r+0xa2c>
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db04      	blt.n	80070e6 <_dtoa_r+0xa76>
 80070dc:	9906      	ldr	r1, [sp, #24]
 80070de:	430b      	orrs	r3, r1
 80070e0:	9904      	ldr	r1, [sp, #16]
 80070e2:	430b      	orrs	r3, r1
 80070e4:	d122      	bne.n	800712c <_dtoa_r+0xabc>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	ddee      	ble.n	80070c8 <_dtoa_r+0xa58>
 80070ea:	ee18 1a10 	vmov	r1, s16
 80070ee:	2201      	movs	r2, #1
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fad7 	bl	80076a4 <__lshift>
 80070f6:	4631      	mov	r1, r6
 80070f8:	ee08 0a10 	vmov	s16, r0
 80070fc:	f000 fb42 	bl	8007784 <__mcmp>
 8007100:	2800      	cmp	r0, #0
 8007102:	dc03      	bgt.n	800710c <_dtoa_r+0xa9c>
 8007104:	d1e0      	bne.n	80070c8 <_dtoa_r+0xa58>
 8007106:	f01a 0f01 	tst.w	sl, #1
 800710a:	d0dd      	beq.n	80070c8 <_dtoa_r+0xa58>
 800710c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007110:	d1d7      	bne.n	80070c2 <_dtoa_r+0xa52>
 8007112:	2339      	movs	r3, #57	; 0x39
 8007114:	f88b 3000 	strb.w	r3, [fp]
 8007118:	462b      	mov	r3, r5
 800711a:	461d      	mov	r5, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007122:	2a39      	cmp	r2, #57	; 0x39
 8007124:	d071      	beq.n	800720a <_dtoa_r+0xb9a>
 8007126:	3201      	adds	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e746      	b.n	8006fba <_dtoa_r+0x94a>
 800712c:	2a00      	cmp	r2, #0
 800712e:	dd07      	ble.n	8007140 <_dtoa_r+0xad0>
 8007130:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007134:	d0ed      	beq.n	8007112 <_dtoa_r+0xaa2>
 8007136:	f10a 0301 	add.w	r3, sl, #1
 800713a:	f88b 3000 	strb.w	r3, [fp]
 800713e:	e73c      	b.n	8006fba <_dtoa_r+0x94a>
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007146:	4599      	cmp	r9, r3
 8007148:	d047      	beq.n	80071da <_dtoa_r+0xb6a>
 800714a:	ee18 1a10 	vmov	r1, s16
 800714e:	2300      	movs	r3, #0
 8007150:	220a      	movs	r2, #10
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f8f6 	bl	8007344 <__multadd>
 8007158:	45b8      	cmp	r8, r7
 800715a:	ee08 0a10 	vmov	s16, r0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	f04f 020a 	mov.w	r2, #10
 8007166:	4641      	mov	r1, r8
 8007168:	4620      	mov	r0, r4
 800716a:	d106      	bne.n	800717a <_dtoa_r+0xb0a>
 800716c:	f000 f8ea 	bl	8007344 <__multadd>
 8007170:	4680      	mov	r8, r0
 8007172:	4607      	mov	r7, r0
 8007174:	f109 0901 	add.w	r9, r9, #1
 8007178:	e772      	b.n	8007060 <_dtoa_r+0x9f0>
 800717a:	f000 f8e3 	bl	8007344 <__multadd>
 800717e:	4639      	mov	r1, r7
 8007180:	4680      	mov	r8, r0
 8007182:	2300      	movs	r3, #0
 8007184:	220a      	movs	r2, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f8dc 	bl	8007344 <__multadd>
 800718c:	4607      	mov	r7, r0
 800718e:	e7f1      	b.n	8007174 <_dtoa_r+0xb04>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	9d01      	ldr	r5, [sp, #4]
 8007196:	ee18 0a10 	vmov	r0, s16
 800719a:	4631      	mov	r1, r6
 800719c:	f7ff f9da 	bl	8006554 <quorem>
 80071a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	f805 ab01 	strb.w	sl, [r5], #1
 80071aa:	1aea      	subs	r2, r5, r3
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	dd09      	ble.n	80071c6 <_dtoa_r+0xb56>
 80071b2:	ee18 1a10 	vmov	r1, s16
 80071b6:	2300      	movs	r3, #0
 80071b8:	220a      	movs	r2, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f8c2 	bl	8007344 <__multadd>
 80071c0:	ee08 0a10 	vmov	s16, r0
 80071c4:	e7e7      	b.n	8007196 <_dtoa_r+0xb26>
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfc8      	it	gt
 80071cc:	461d      	movgt	r5, r3
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	bfd8      	it	le
 80071d2:	2501      	movle	r5, #1
 80071d4:	441d      	add	r5, r3
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	ee18 1a10 	vmov	r1, s16
 80071de:	2201      	movs	r2, #1
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fa5f 	bl	80076a4 <__lshift>
 80071e6:	4631      	mov	r1, r6
 80071e8:	ee08 0a10 	vmov	s16, r0
 80071ec:	f000 faca 	bl	8007784 <__mcmp>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dc91      	bgt.n	8007118 <_dtoa_r+0xaa8>
 80071f4:	d102      	bne.n	80071fc <_dtoa_r+0xb8c>
 80071f6:	f01a 0f01 	tst.w	sl, #1
 80071fa:	d18d      	bne.n	8007118 <_dtoa_r+0xaa8>
 80071fc:	462b      	mov	r3, r5
 80071fe:	461d      	mov	r5, r3
 8007200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007204:	2a30      	cmp	r2, #48	; 0x30
 8007206:	d0fa      	beq.n	80071fe <_dtoa_r+0xb8e>
 8007208:	e6d7      	b.n	8006fba <_dtoa_r+0x94a>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d184      	bne.n	800711a <_dtoa_r+0xaaa>
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2331      	movs	r3, #49	; 0x31
 8007218:	7013      	strb	r3, [r2, #0]
 800721a:	e6ce      	b.n	8006fba <_dtoa_r+0x94a>
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <_dtoa_r+0xbd4>)
 800721e:	f7ff ba95 	b.w	800674c <_dtoa_r+0xdc>
 8007222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007224:	2b00      	cmp	r3, #0
 8007226:	f47f aa6e 	bne.w	8006706 <_dtoa_r+0x96>
 800722a:	4b07      	ldr	r3, [pc, #28]	; (8007248 <_dtoa_r+0xbd8>)
 800722c:	f7ff ba8e 	b.w	800674c <_dtoa_r+0xdc>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dcae      	bgt.n	8007194 <_dtoa_r+0xb24>
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f73f aea8 	bgt.w	8006f8e <_dtoa_r+0x91e>
 800723e:	e7a9      	b.n	8007194 <_dtoa_r+0xb24>
 8007240:	08008b2b 	.word	0x08008b2b
 8007244:	08008a88 	.word	0x08008a88
 8007248:	08008aac 	.word	0x08008aac

0800724c <_localeconv_r>:
 800724c:	4800      	ldr	r0, [pc, #0]	; (8007250 <_localeconv_r+0x4>)
 800724e:	4770      	bx	lr
 8007250:	20000160 	.word	0x20000160

08007254 <malloc>:
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <malloc+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 bc17 	b.w	8007a8c <_malloc_r>
 800725e:	bf00      	nop
 8007260:	2000000c 	.word	0x2000000c

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <_Balloc>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007284:	4604      	mov	r4, r0
 8007286:	460d      	mov	r5, r1
 8007288:	b976      	cbnz	r6, 80072a8 <_Balloc+0x28>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff ffe2 	bl	8007254 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	6260      	str	r0, [r4, #36]	; 0x24
 8007294:	b920      	cbnz	r0, 80072a0 <_Balloc+0x20>
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <_Balloc+0x78>)
 8007298:	4818      	ldr	r0, [pc, #96]	; (80072fc <_Balloc+0x7c>)
 800729a:	2166      	movs	r1, #102	; 0x66
 800729c:	f000 fdd6 	bl	8007e4c <__assert_func>
 80072a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a4:	6006      	str	r6, [r0, #0]
 80072a6:	60c6      	str	r6, [r0, #12]
 80072a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072aa:	68f3      	ldr	r3, [r6, #12]
 80072ac:	b183      	cbz	r3, 80072d0 <_Balloc+0x50>
 80072ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072b6:	b9b8      	cbnz	r0, 80072e8 <_Balloc+0x68>
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f605 	lsl.w	r6, r1, r5
 80072be:	1d72      	adds	r2, r6, #5
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fb60 	bl	8007988 <_calloc_r>
 80072c8:	b160      	cbz	r0, 80072e4 <_Balloc+0x64>
 80072ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ce:	e00e      	b.n	80072ee <_Balloc+0x6e>
 80072d0:	2221      	movs	r2, #33	; 0x21
 80072d2:	2104      	movs	r1, #4
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fb57 	bl	8007988 <_calloc_r>
 80072da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072dc:	60f0      	str	r0, [r6, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e4      	bne.n	80072ae <_Balloc+0x2e>
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ee:	2300      	movs	r3, #0
 80072f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072f4:	e7f7      	b.n	80072e6 <_Balloc+0x66>
 80072f6:	bf00      	nop
 80072f8:	08008ab9 	.word	0x08008ab9
 80072fc:	08008b3c 	.word	0x08008b3c

08007300 <_Bfree>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b976      	cbnz	r6, 8007328 <_Bfree+0x28>
 800730a:	2010      	movs	r0, #16
 800730c:	f7ff ffa2 	bl	8007254 <malloc>
 8007310:	4602      	mov	r2, r0
 8007312:	6268      	str	r0, [r5, #36]	; 0x24
 8007314:	b920      	cbnz	r0, 8007320 <_Bfree+0x20>
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <_Bfree+0x3c>)
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <_Bfree+0x40>)
 800731a:	218a      	movs	r1, #138	; 0x8a
 800731c:	f000 fd96 	bl	8007e4c <__assert_func>
 8007320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007324:	6006      	str	r6, [r0, #0]
 8007326:	60c6      	str	r6, [r0, #12]
 8007328:	b13c      	cbz	r4, 800733a <_Bfree+0x3a>
 800732a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	08008ab9 	.word	0x08008ab9
 8007340:	08008b3c 	.word	0x08008b3c

08007344 <__multadd>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	690d      	ldr	r5, [r1, #16]
 800734a:	4607      	mov	r7, r0
 800734c:	460c      	mov	r4, r1
 800734e:	461e      	mov	r6, r3
 8007350:	f101 0c14 	add.w	ip, r1, #20
 8007354:	2000      	movs	r0, #0
 8007356:	f8dc 3000 	ldr.w	r3, [ip]
 800735a:	b299      	uxth	r1, r3
 800735c:	fb02 6101 	mla	r1, r2, r1, r6
 8007360:	0c1e      	lsrs	r6, r3, #16
 8007362:	0c0b      	lsrs	r3, r1, #16
 8007364:	fb02 3306 	mla	r3, r2, r6, r3
 8007368:	b289      	uxth	r1, r1
 800736a:	3001      	adds	r0, #1
 800736c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007370:	4285      	cmp	r5, r0
 8007372:	f84c 1b04 	str.w	r1, [ip], #4
 8007376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800737a:	dcec      	bgt.n	8007356 <__multadd+0x12>
 800737c:	b30e      	cbz	r6, 80073c2 <__multadd+0x7e>
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc19      	bgt.n	80073b8 <__multadd+0x74>
 8007384:	6861      	ldr	r1, [r4, #4]
 8007386:	4638      	mov	r0, r7
 8007388:	3101      	adds	r1, #1
 800738a:	f7ff ff79 	bl	8007280 <_Balloc>
 800738e:	4680      	mov	r8, r0
 8007390:	b928      	cbnz	r0, 800739e <__multadd+0x5a>
 8007392:	4602      	mov	r2, r0
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <__multadd+0x84>)
 8007396:	480d      	ldr	r0, [pc, #52]	; (80073cc <__multadd+0x88>)
 8007398:	21b5      	movs	r1, #181	; 0xb5
 800739a:	f000 fd57 	bl	8007e4c <__assert_func>
 800739e:	6922      	ldr	r2, [r4, #16]
 80073a0:	3202      	adds	r2, #2
 80073a2:	f104 010c 	add.w	r1, r4, #12
 80073a6:	0092      	lsls	r2, r2, #2
 80073a8:	300c      	adds	r0, #12
 80073aa:	f7ff ff5b 	bl	8007264 <memcpy>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff ffa5 	bl	8007300 <_Bfree>
 80073b6:	4644      	mov	r4, r8
 80073b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073bc:	3501      	adds	r5, #1
 80073be:	615e      	str	r6, [r3, #20]
 80073c0:	6125      	str	r5, [r4, #16]
 80073c2:	4620      	mov	r0, r4
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	08008b2b 	.word	0x08008b2b
 80073cc:	08008b3c 	.word	0x08008b3c

080073d0 <__hi0bits>:
 80073d0:	0c03      	lsrs	r3, r0, #16
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	b9d3      	cbnz	r3, 800740c <__hi0bits+0x3c>
 80073d6:	0400      	lsls	r0, r0, #16
 80073d8:	2310      	movs	r3, #16
 80073da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073de:	bf04      	itt	eq
 80073e0:	0200      	lsleq	r0, r0, #8
 80073e2:	3308      	addeq	r3, #8
 80073e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073e8:	bf04      	itt	eq
 80073ea:	0100      	lsleq	r0, r0, #4
 80073ec:	3304      	addeq	r3, #4
 80073ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073f2:	bf04      	itt	eq
 80073f4:	0080      	lsleq	r0, r0, #2
 80073f6:	3302      	addeq	r3, #2
 80073f8:	2800      	cmp	r0, #0
 80073fa:	db05      	blt.n	8007408 <__hi0bits+0x38>
 80073fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007400:	f103 0301 	add.w	r3, r3, #1
 8007404:	bf08      	it	eq
 8007406:	2320      	moveq	r3, #32
 8007408:	4618      	mov	r0, r3
 800740a:	4770      	bx	lr
 800740c:	2300      	movs	r3, #0
 800740e:	e7e4      	b.n	80073da <__hi0bits+0xa>

08007410 <__lo0bits>:
 8007410:	6803      	ldr	r3, [r0, #0]
 8007412:	f013 0207 	ands.w	r2, r3, #7
 8007416:	4601      	mov	r1, r0
 8007418:	d00b      	beq.n	8007432 <__lo0bits+0x22>
 800741a:	07da      	lsls	r2, r3, #31
 800741c:	d423      	bmi.n	8007466 <__lo0bits+0x56>
 800741e:	0798      	lsls	r0, r3, #30
 8007420:	bf49      	itett	mi
 8007422:	085b      	lsrmi	r3, r3, #1
 8007424:	089b      	lsrpl	r3, r3, #2
 8007426:	2001      	movmi	r0, #1
 8007428:	600b      	strmi	r3, [r1, #0]
 800742a:	bf5c      	itt	pl
 800742c:	600b      	strpl	r3, [r1, #0]
 800742e:	2002      	movpl	r0, #2
 8007430:	4770      	bx	lr
 8007432:	b298      	uxth	r0, r3
 8007434:	b9a8      	cbnz	r0, 8007462 <__lo0bits+0x52>
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	2010      	movs	r0, #16
 800743a:	b2da      	uxtb	r2, r3
 800743c:	b90a      	cbnz	r2, 8007442 <__lo0bits+0x32>
 800743e:	3008      	adds	r0, #8
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	071a      	lsls	r2, r3, #28
 8007444:	bf04      	itt	eq
 8007446:	091b      	lsreq	r3, r3, #4
 8007448:	3004      	addeq	r0, #4
 800744a:	079a      	lsls	r2, r3, #30
 800744c:	bf04      	itt	eq
 800744e:	089b      	lsreq	r3, r3, #2
 8007450:	3002      	addeq	r0, #2
 8007452:	07da      	lsls	r2, r3, #31
 8007454:	d403      	bmi.n	800745e <__lo0bits+0x4e>
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	f100 0001 	add.w	r0, r0, #1
 800745c:	d005      	beq.n	800746a <__lo0bits+0x5a>
 800745e:	600b      	str	r3, [r1, #0]
 8007460:	4770      	bx	lr
 8007462:	4610      	mov	r0, r2
 8007464:	e7e9      	b.n	800743a <__lo0bits+0x2a>
 8007466:	2000      	movs	r0, #0
 8007468:	4770      	bx	lr
 800746a:	2020      	movs	r0, #32
 800746c:	4770      	bx	lr
	...

08007470 <__i2b>:
 8007470:	b510      	push	{r4, lr}
 8007472:	460c      	mov	r4, r1
 8007474:	2101      	movs	r1, #1
 8007476:	f7ff ff03 	bl	8007280 <_Balloc>
 800747a:	4602      	mov	r2, r0
 800747c:	b928      	cbnz	r0, 800748a <__i2b+0x1a>
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <__i2b+0x24>)
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <__i2b+0x28>)
 8007482:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007486:	f000 fce1 	bl	8007e4c <__assert_func>
 800748a:	2301      	movs	r3, #1
 800748c:	6144      	str	r4, [r0, #20]
 800748e:	6103      	str	r3, [r0, #16]
 8007490:	bd10      	pop	{r4, pc}
 8007492:	bf00      	nop
 8007494:	08008b2b 	.word	0x08008b2b
 8007498:	08008b3c 	.word	0x08008b3c

0800749c <__multiply>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	4691      	mov	r9, r2
 80074a2:	690a      	ldr	r2, [r1, #16]
 80074a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bfb8      	it	lt
 80074ac:	460b      	movlt	r3, r1
 80074ae:	460c      	mov	r4, r1
 80074b0:	bfbc      	itt	lt
 80074b2:	464c      	movlt	r4, r9
 80074b4:	4699      	movlt	r9, r3
 80074b6:	6927      	ldr	r7, [r4, #16]
 80074b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	6861      	ldr	r1, [r4, #4]
 80074c0:	eb07 060a 	add.w	r6, r7, sl
 80074c4:	42b3      	cmp	r3, r6
 80074c6:	b085      	sub	sp, #20
 80074c8:	bfb8      	it	lt
 80074ca:	3101      	addlt	r1, #1
 80074cc:	f7ff fed8 	bl	8007280 <_Balloc>
 80074d0:	b930      	cbnz	r0, 80074e0 <__multiply+0x44>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b44      	ldr	r3, [pc, #272]	; (80075e8 <__multiply+0x14c>)
 80074d6:	4845      	ldr	r0, [pc, #276]	; (80075ec <__multiply+0x150>)
 80074d8:	f240 115d 	movw	r1, #349	; 0x15d
 80074dc:	f000 fcb6 	bl	8007e4c <__assert_func>
 80074e0:	f100 0514 	add.w	r5, r0, #20
 80074e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074e8:	462b      	mov	r3, r5
 80074ea:	2200      	movs	r2, #0
 80074ec:	4543      	cmp	r3, r8
 80074ee:	d321      	bcc.n	8007534 <__multiply+0x98>
 80074f0:	f104 0314 	add.w	r3, r4, #20
 80074f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074f8:	f109 0314 	add.w	r3, r9, #20
 80074fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007500:	9202      	str	r2, [sp, #8]
 8007502:	1b3a      	subs	r2, r7, r4
 8007504:	3a15      	subs	r2, #21
 8007506:	f022 0203 	bic.w	r2, r2, #3
 800750a:	3204      	adds	r2, #4
 800750c:	f104 0115 	add.w	r1, r4, #21
 8007510:	428f      	cmp	r7, r1
 8007512:	bf38      	it	cc
 8007514:	2204      	movcc	r2, #4
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9a02      	ldr	r2, [sp, #8]
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	429a      	cmp	r2, r3
 800751e:	d80c      	bhi.n	800753a <__multiply+0x9e>
 8007520:	2e00      	cmp	r6, #0
 8007522:	dd03      	ble.n	800752c <__multiply+0x90>
 8007524:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05a      	beq.n	80075e2 <__multiply+0x146>
 800752c:	6106      	str	r6, [r0, #16]
 800752e:	b005      	add	sp, #20
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	f843 2b04 	str.w	r2, [r3], #4
 8007538:	e7d8      	b.n	80074ec <__multiply+0x50>
 800753a:	f8b3 a000 	ldrh.w	sl, [r3]
 800753e:	f1ba 0f00 	cmp.w	sl, #0
 8007542:	d024      	beq.n	800758e <__multiply+0xf2>
 8007544:	f104 0e14 	add.w	lr, r4, #20
 8007548:	46a9      	mov	r9, r5
 800754a:	f04f 0c00 	mov.w	ip, #0
 800754e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007552:	f8d9 1000 	ldr.w	r1, [r9]
 8007556:	fa1f fb82 	uxth.w	fp, r2
 800755a:	b289      	uxth	r1, r1
 800755c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007560:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007564:	f8d9 2000 	ldr.w	r2, [r9]
 8007568:	4461      	add	r1, ip
 800756a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800756e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800757c:	4577      	cmp	r7, lr
 800757e:	f849 1b04 	str.w	r1, [r9], #4
 8007582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007586:	d8e2      	bhi.n	800754e <__multiply+0xb2>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	f845 c002 	str.w	ip, [r5, r2]
 800758e:	9a03      	ldr	r2, [sp, #12]
 8007590:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007594:	3304      	adds	r3, #4
 8007596:	f1b9 0f00 	cmp.w	r9, #0
 800759a:	d020      	beq.n	80075de <__multiply+0x142>
 800759c:	6829      	ldr	r1, [r5, #0]
 800759e:	f104 0c14 	add.w	ip, r4, #20
 80075a2:	46ae      	mov	lr, r5
 80075a4:	f04f 0a00 	mov.w	sl, #0
 80075a8:	f8bc b000 	ldrh.w	fp, [ip]
 80075ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075b0:	fb09 220b 	mla	r2, r9, fp, r2
 80075b4:	4492      	add	sl, r2
 80075b6:	b289      	uxth	r1, r1
 80075b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075bc:	f84e 1b04 	str.w	r1, [lr], #4
 80075c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075c4:	f8be 1000 	ldrh.w	r1, [lr]
 80075c8:	0c12      	lsrs	r2, r2, #16
 80075ca:	fb09 1102 	mla	r1, r9, r2, r1
 80075ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075d2:	4567      	cmp	r7, ip
 80075d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075d8:	d8e6      	bhi.n	80075a8 <__multiply+0x10c>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	50a9      	str	r1, [r5, r2]
 80075de:	3504      	adds	r5, #4
 80075e0:	e79a      	b.n	8007518 <__multiply+0x7c>
 80075e2:	3e01      	subs	r6, #1
 80075e4:	e79c      	b.n	8007520 <__multiply+0x84>
 80075e6:	bf00      	nop
 80075e8:	08008b2b 	.word	0x08008b2b
 80075ec:	08008b3c 	.word	0x08008b3c

080075f0 <__pow5mult>:
 80075f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f4:	4615      	mov	r5, r2
 80075f6:	f012 0203 	ands.w	r2, r2, #3
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	d007      	beq.n	8007610 <__pow5mult+0x20>
 8007600:	4c25      	ldr	r4, [pc, #148]	; (8007698 <__pow5mult+0xa8>)
 8007602:	3a01      	subs	r2, #1
 8007604:	2300      	movs	r3, #0
 8007606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760a:	f7ff fe9b 	bl	8007344 <__multadd>
 800760e:	4607      	mov	r7, r0
 8007610:	10ad      	asrs	r5, r5, #2
 8007612:	d03d      	beq.n	8007690 <__pow5mult+0xa0>
 8007614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007616:	b97c      	cbnz	r4, 8007638 <__pow5mult+0x48>
 8007618:	2010      	movs	r0, #16
 800761a:	f7ff fe1b 	bl	8007254 <malloc>
 800761e:	4602      	mov	r2, r0
 8007620:	6270      	str	r0, [r6, #36]	; 0x24
 8007622:	b928      	cbnz	r0, 8007630 <__pow5mult+0x40>
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <__pow5mult+0xac>)
 8007626:	481e      	ldr	r0, [pc, #120]	; (80076a0 <__pow5mult+0xb0>)
 8007628:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800762c:	f000 fc0e 	bl	8007e4c <__assert_func>
 8007630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007634:	6004      	str	r4, [r0, #0]
 8007636:	60c4      	str	r4, [r0, #12]
 8007638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800763c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007640:	b94c      	cbnz	r4, 8007656 <__pow5mult+0x66>
 8007642:	f240 2171 	movw	r1, #625	; 0x271
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff12 	bl	8007470 <__i2b>
 800764c:	2300      	movs	r3, #0
 800764e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007652:	4604      	mov	r4, r0
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	07eb      	lsls	r3, r5, #31
 800765c:	d50a      	bpl.n	8007674 <__pow5mult+0x84>
 800765e:	4639      	mov	r1, r7
 8007660:	4622      	mov	r2, r4
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff1a 	bl	800749c <__multiply>
 8007668:	4639      	mov	r1, r7
 800766a:	4680      	mov	r8, r0
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff fe47 	bl	8007300 <_Bfree>
 8007672:	4647      	mov	r7, r8
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	d00b      	beq.n	8007690 <__pow5mult+0xa0>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	b938      	cbnz	r0, 800768c <__pow5mult+0x9c>
 800767c:	4622      	mov	r2, r4
 800767e:	4621      	mov	r1, r4
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ff0b 	bl	800749c <__multiply>
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	f8c0 9000 	str.w	r9, [r0]
 800768c:	4604      	mov	r4, r0
 800768e:	e7e4      	b.n	800765a <__pow5mult+0x6a>
 8007690:	4638      	mov	r0, r7
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	bf00      	nop
 8007698:	08008c88 	.word	0x08008c88
 800769c:	08008ab9 	.word	0x08008ab9
 80076a0:	08008b3c 	.word	0x08008b3c

080076a4 <__lshift>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076b2:	68a3      	ldr	r3, [r4, #8]
 80076b4:	4607      	mov	r7, r0
 80076b6:	4691      	mov	r9, r2
 80076b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076bc:	f108 0601 	add.w	r6, r8, #1
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	db0b      	blt.n	80076dc <__lshift+0x38>
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff fddb 	bl	8007280 <_Balloc>
 80076ca:	4605      	mov	r5, r0
 80076cc:	b948      	cbnz	r0, 80076e2 <__lshift+0x3e>
 80076ce:	4602      	mov	r2, r0
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <__lshift+0xd8>)
 80076d2:	482b      	ldr	r0, [pc, #172]	; (8007780 <__lshift+0xdc>)
 80076d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076d8:	f000 fbb8 	bl	8007e4c <__assert_func>
 80076dc:	3101      	adds	r1, #1
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	e7ee      	b.n	80076c0 <__lshift+0x1c>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f100 0114 	add.w	r1, r0, #20
 80076e8:	f100 0210 	add.w	r2, r0, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	4553      	cmp	r3, sl
 80076f0:	db37      	blt.n	8007762 <__lshift+0xbe>
 80076f2:	6920      	ldr	r0, [r4, #16]
 80076f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f8:	f104 0314 	add.w	r3, r4, #20
 80076fc:	f019 091f 	ands.w	r9, r9, #31
 8007700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007708:	d02f      	beq.n	800776a <__lshift+0xc6>
 800770a:	f1c9 0e20 	rsb	lr, r9, #32
 800770e:	468a      	mov	sl, r1
 8007710:	f04f 0c00 	mov.w	ip, #0
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	fa02 f209 	lsl.w	r2, r2, r9
 800771a:	ea42 020c 	orr.w	r2, r2, ip
 800771e:	f84a 2b04 	str.w	r2, [sl], #4
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	4298      	cmp	r0, r3
 8007728:	fa22 fc0e 	lsr.w	ip, r2, lr
 800772c:	d8f2      	bhi.n	8007714 <__lshift+0x70>
 800772e:	1b03      	subs	r3, r0, r4
 8007730:	3b15      	subs	r3, #21
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	3304      	adds	r3, #4
 8007738:	f104 0215 	add.w	r2, r4, #21
 800773c:	4290      	cmp	r0, r2
 800773e:	bf38      	it	cc
 8007740:	2304      	movcc	r3, #4
 8007742:	f841 c003 	str.w	ip, [r1, r3]
 8007746:	f1bc 0f00 	cmp.w	ip, #0
 800774a:	d001      	beq.n	8007750 <__lshift+0xac>
 800774c:	f108 0602 	add.w	r6, r8, #2
 8007750:	3e01      	subs	r6, #1
 8007752:	4638      	mov	r0, r7
 8007754:	612e      	str	r6, [r5, #16]
 8007756:	4621      	mov	r1, r4
 8007758:	f7ff fdd2 	bl	8007300 <_Bfree>
 800775c:	4628      	mov	r0, r5
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	f842 0f04 	str.w	r0, [r2, #4]!
 8007766:	3301      	adds	r3, #1
 8007768:	e7c1      	b.n	80076ee <__lshift+0x4a>
 800776a:	3904      	subs	r1, #4
 800776c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007770:	f841 2f04 	str.w	r2, [r1, #4]!
 8007774:	4298      	cmp	r0, r3
 8007776:	d8f9      	bhi.n	800776c <__lshift+0xc8>
 8007778:	e7ea      	b.n	8007750 <__lshift+0xac>
 800777a:	bf00      	nop
 800777c:	08008b2b 	.word	0x08008b2b
 8007780:	08008b3c 	.word	0x08008b3c

08007784 <__mcmp>:
 8007784:	b530      	push	{r4, r5, lr}
 8007786:	6902      	ldr	r2, [r0, #16]
 8007788:	690c      	ldr	r4, [r1, #16]
 800778a:	1b12      	subs	r2, r2, r4
 800778c:	d10e      	bne.n	80077ac <__mcmp+0x28>
 800778e:	f100 0314 	add.w	r3, r0, #20
 8007792:	3114      	adds	r1, #20
 8007794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800779c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077a4:	42a5      	cmp	r5, r4
 80077a6:	d003      	beq.n	80077b0 <__mcmp+0x2c>
 80077a8:	d305      	bcc.n	80077b6 <__mcmp+0x32>
 80077aa:	2201      	movs	r2, #1
 80077ac:	4610      	mov	r0, r2
 80077ae:	bd30      	pop	{r4, r5, pc}
 80077b0:	4283      	cmp	r3, r0
 80077b2:	d3f3      	bcc.n	800779c <__mcmp+0x18>
 80077b4:	e7fa      	b.n	80077ac <__mcmp+0x28>
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	e7f7      	b.n	80077ac <__mcmp+0x28>

080077bc <__mdiff>:
 80077bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	460c      	mov	r4, r1
 80077c2:	4606      	mov	r6, r0
 80077c4:	4611      	mov	r1, r2
 80077c6:	4620      	mov	r0, r4
 80077c8:	4690      	mov	r8, r2
 80077ca:	f7ff ffdb 	bl	8007784 <__mcmp>
 80077ce:	1e05      	subs	r5, r0, #0
 80077d0:	d110      	bne.n	80077f4 <__mdiff+0x38>
 80077d2:	4629      	mov	r1, r5
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fd53 	bl	8007280 <_Balloc>
 80077da:	b930      	cbnz	r0, 80077ea <__mdiff+0x2e>
 80077dc:	4b3a      	ldr	r3, [pc, #232]	; (80078c8 <__mdiff+0x10c>)
 80077de:	4602      	mov	r2, r0
 80077e0:	f240 2132 	movw	r1, #562	; 0x232
 80077e4:	4839      	ldr	r0, [pc, #228]	; (80078cc <__mdiff+0x110>)
 80077e6:	f000 fb31 	bl	8007e4c <__assert_func>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	bfa4      	itt	ge
 80077f6:	4643      	movge	r3, r8
 80077f8:	46a0      	movge	r8, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007800:	bfa6      	itte	ge
 8007802:	461c      	movge	r4, r3
 8007804:	2500      	movge	r5, #0
 8007806:	2501      	movlt	r5, #1
 8007808:	f7ff fd3a 	bl	8007280 <_Balloc>
 800780c:	b920      	cbnz	r0, 8007818 <__mdiff+0x5c>
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <__mdiff+0x10c>)
 8007810:	4602      	mov	r2, r0
 8007812:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007816:	e7e5      	b.n	80077e4 <__mdiff+0x28>
 8007818:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800781c:	6926      	ldr	r6, [r4, #16]
 800781e:	60c5      	str	r5, [r0, #12]
 8007820:	f104 0914 	add.w	r9, r4, #20
 8007824:	f108 0514 	add.w	r5, r8, #20
 8007828:	f100 0e14 	add.w	lr, r0, #20
 800782c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007830:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007834:	f108 0210 	add.w	r2, r8, #16
 8007838:	46f2      	mov	sl, lr
 800783a:	2100      	movs	r1, #0
 800783c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007840:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007844:	fa1f f883 	uxth.w	r8, r3
 8007848:	fa11 f18b 	uxtah	r1, r1, fp
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	eba1 0808 	sub.w	r8, r1, r8
 8007852:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007856:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800785a:	fa1f f888 	uxth.w	r8, r8
 800785e:	1419      	asrs	r1, r3, #16
 8007860:	454e      	cmp	r6, r9
 8007862:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007866:	f84a 3b04 	str.w	r3, [sl], #4
 800786a:	d8e7      	bhi.n	800783c <__mdiff+0x80>
 800786c:	1b33      	subs	r3, r6, r4
 800786e:	3b15      	subs	r3, #21
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	3304      	adds	r3, #4
 8007876:	3415      	adds	r4, #21
 8007878:	42a6      	cmp	r6, r4
 800787a:	bf38      	it	cc
 800787c:	2304      	movcc	r3, #4
 800787e:	441d      	add	r5, r3
 8007880:	4473      	add	r3, lr
 8007882:	469e      	mov	lr, r3
 8007884:	462e      	mov	r6, r5
 8007886:	4566      	cmp	r6, ip
 8007888:	d30e      	bcc.n	80078a8 <__mdiff+0xec>
 800788a:	f10c 0203 	add.w	r2, ip, #3
 800788e:	1b52      	subs	r2, r2, r5
 8007890:	f022 0203 	bic.w	r2, r2, #3
 8007894:	3d03      	subs	r5, #3
 8007896:	45ac      	cmp	ip, r5
 8007898:	bf38      	it	cc
 800789a:	2200      	movcc	r2, #0
 800789c:	441a      	add	r2, r3
 800789e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078a2:	b17b      	cbz	r3, 80078c4 <__mdiff+0x108>
 80078a4:	6107      	str	r7, [r0, #16]
 80078a6:	e7a3      	b.n	80077f0 <__mdiff+0x34>
 80078a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078ac:	fa11 f288 	uxtah	r2, r1, r8
 80078b0:	1414      	asrs	r4, r2, #16
 80078b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078b6:	b292      	uxth	r2, r2
 80078b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078bc:	f84e 2b04 	str.w	r2, [lr], #4
 80078c0:	1421      	asrs	r1, r4, #16
 80078c2:	e7e0      	b.n	8007886 <__mdiff+0xca>
 80078c4:	3f01      	subs	r7, #1
 80078c6:	e7ea      	b.n	800789e <__mdiff+0xe2>
 80078c8:	08008b2b 	.word	0x08008b2b
 80078cc:	08008b3c 	.word	0x08008b3c

080078d0 <__d2b>:
 80078d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4689      	mov	r9, r1
 80078d6:	2101      	movs	r1, #1
 80078d8:	ec57 6b10 	vmov	r6, r7, d0
 80078dc:	4690      	mov	r8, r2
 80078de:	f7ff fccf 	bl	8007280 <_Balloc>
 80078e2:	4604      	mov	r4, r0
 80078e4:	b930      	cbnz	r0, 80078f4 <__d2b+0x24>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4b25      	ldr	r3, [pc, #148]	; (8007980 <__d2b+0xb0>)
 80078ea:	4826      	ldr	r0, [pc, #152]	; (8007984 <__d2b+0xb4>)
 80078ec:	f240 310a 	movw	r1, #778	; 0x30a
 80078f0:	f000 faac 	bl	8007e4c <__assert_func>
 80078f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078fc:	bb35      	cbnz	r5, 800794c <__d2b+0x7c>
 80078fe:	2e00      	cmp	r6, #0
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	d028      	beq.n	8007956 <__d2b+0x86>
 8007904:	4668      	mov	r0, sp
 8007906:	9600      	str	r6, [sp, #0]
 8007908:	f7ff fd82 	bl	8007410 <__lo0bits>
 800790c:	9900      	ldr	r1, [sp, #0]
 800790e:	b300      	cbz	r0, 8007952 <__d2b+0x82>
 8007910:	9a01      	ldr	r2, [sp, #4]
 8007912:	f1c0 0320 	rsb	r3, r0, #32
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	430b      	orrs	r3, r1
 800791c:	40c2      	lsrs	r2, r0
 800791e:	6163      	str	r3, [r4, #20]
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	61a3      	str	r3, [r4, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2202      	movne	r2, #2
 800792c:	2201      	moveq	r2, #1
 800792e:	6122      	str	r2, [r4, #16]
 8007930:	b1d5      	cbz	r5, 8007968 <__d2b+0x98>
 8007932:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007936:	4405      	add	r5, r0
 8007938:	f8c9 5000 	str.w	r5, [r9]
 800793c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007940:	f8c8 0000 	str.w	r0, [r8]
 8007944:	4620      	mov	r0, r4
 8007946:	b003      	add	sp, #12
 8007948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800794c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007950:	e7d5      	b.n	80078fe <__d2b+0x2e>
 8007952:	6161      	str	r1, [r4, #20]
 8007954:	e7e5      	b.n	8007922 <__d2b+0x52>
 8007956:	a801      	add	r0, sp, #4
 8007958:	f7ff fd5a 	bl	8007410 <__lo0bits>
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	2201      	movs	r2, #1
 8007962:	6122      	str	r2, [r4, #16]
 8007964:	3020      	adds	r0, #32
 8007966:	e7e3      	b.n	8007930 <__d2b+0x60>
 8007968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800796c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007970:	f8c9 0000 	str.w	r0, [r9]
 8007974:	6918      	ldr	r0, [r3, #16]
 8007976:	f7ff fd2b 	bl	80073d0 <__hi0bits>
 800797a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800797e:	e7df      	b.n	8007940 <__d2b+0x70>
 8007980:	08008b2b 	.word	0x08008b2b
 8007984:	08008b3c 	.word	0x08008b3c

08007988 <_calloc_r>:
 8007988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798a:	fba1 2402 	umull	r2, r4, r1, r2
 800798e:	b94c      	cbnz	r4, 80079a4 <_calloc_r+0x1c>
 8007990:	4611      	mov	r1, r2
 8007992:	9201      	str	r2, [sp, #4]
 8007994:	f000 f87a 	bl	8007a8c <_malloc_r>
 8007998:	9a01      	ldr	r2, [sp, #4]
 800799a:	4605      	mov	r5, r0
 800799c:	b930      	cbnz	r0, 80079ac <_calloc_r+0x24>
 800799e:	4628      	mov	r0, r5
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	220c      	movs	r2, #12
 80079a6:	6002      	str	r2, [r0, #0]
 80079a8:	2500      	movs	r5, #0
 80079aa:	e7f8      	b.n	800799e <_calloc_r+0x16>
 80079ac:	4621      	mov	r1, r4
 80079ae:	f7fe f93f 	bl	8005c30 <memset>
 80079b2:	e7f4      	b.n	800799e <_calloc_r+0x16>

080079b4 <_free_r>:
 80079b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079b6:	2900      	cmp	r1, #0
 80079b8:	d044      	beq.n	8007a44 <_free_r+0x90>
 80079ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079be:	9001      	str	r0, [sp, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f1a1 0404 	sub.w	r4, r1, #4
 80079c6:	bfb8      	it	lt
 80079c8:	18e4      	addlt	r4, r4, r3
 80079ca:	f000 fa9b 	bl	8007f04 <__malloc_lock>
 80079ce:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <_free_r+0x94>)
 80079d0:	9801      	ldr	r0, [sp, #4]
 80079d2:	6813      	ldr	r3, [r2, #0]
 80079d4:	b933      	cbnz	r3, 80079e4 <_free_r+0x30>
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	6014      	str	r4, [r2, #0]
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e0:	f000 ba96 	b.w	8007f10 <__malloc_unlock>
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d908      	bls.n	80079fa <_free_r+0x46>
 80079e8:	6825      	ldr	r5, [r4, #0]
 80079ea:	1961      	adds	r1, r4, r5
 80079ec:	428b      	cmp	r3, r1
 80079ee:	bf01      	itttt	eq
 80079f0:	6819      	ldreq	r1, [r3, #0]
 80079f2:	685b      	ldreq	r3, [r3, #4]
 80079f4:	1949      	addeq	r1, r1, r5
 80079f6:	6021      	streq	r1, [r4, #0]
 80079f8:	e7ed      	b.n	80079d6 <_free_r+0x22>
 80079fa:	461a      	mov	r2, r3
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b10b      	cbz	r3, 8007a04 <_free_r+0x50>
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d9fa      	bls.n	80079fa <_free_r+0x46>
 8007a04:	6811      	ldr	r1, [r2, #0]
 8007a06:	1855      	adds	r5, r2, r1
 8007a08:	42a5      	cmp	r5, r4
 8007a0a:	d10b      	bne.n	8007a24 <_free_r+0x70>
 8007a0c:	6824      	ldr	r4, [r4, #0]
 8007a0e:	4421      	add	r1, r4
 8007a10:	1854      	adds	r4, r2, r1
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	6011      	str	r1, [r2, #0]
 8007a16:	d1e0      	bne.n	80079da <_free_r+0x26>
 8007a18:	681c      	ldr	r4, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	6053      	str	r3, [r2, #4]
 8007a1e:	4421      	add	r1, r4
 8007a20:	6011      	str	r1, [r2, #0]
 8007a22:	e7da      	b.n	80079da <_free_r+0x26>
 8007a24:	d902      	bls.n	8007a2c <_free_r+0x78>
 8007a26:	230c      	movs	r3, #12
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	e7d6      	b.n	80079da <_free_r+0x26>
 8007a2c:	6825      	ldr	r5, [r4, #0]
 8007a2e:	1961      	adds	r1, r4, r5
 8007a30:	428b      	cmp	r3, r1
 8007a32:	bf04      	itt	eq
 8007a34:	6819      	ldreq	r1, [r3, #0]
 8007a36:	685b      	ldreq	r3, [r3, #4]
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	bf04      	itt	eq
 8007a3c:	1949      	addeq	r1, r1, r5
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	6054      	str	r4, [r2, #4]
 8007a42:	e7ca      	b.n	80079da <_free_r+0x26>
 8007a44:	b003      	add	sp, #12
 8007a46:	bd30      	pop	{r4, r5, pc}
 8007a48:	20000444 	.word	0x20000444

08007a4c <sbrk_aligned>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0e      	ldr	r6, [pc, #56]	; (8007a88 <sbrk_aligned+0x3c>)
 8007a50:	460c      	mov	r4, r1
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	4605      	mov	r5, r0
 8007a56:	b911      	cbnz	r1, 8007a5e <sbrk_aligned+0x12>
 8007a58:	f000 f9e8 	bl	8007e2c <_sbrk_r>
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 f9e3 	bl	8007e2c <_sbrk_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d00a      	beq.n	8007a80 <sbrk_aligned+0x34>
 8007a6a:	1cc4      	adds	r4, r0, #3
 8007a6c:	f024 0403 	bic.w	r4, r4, #3
 8007a70:	42a0      	cmp	r0, r4
 8007a72:	d007      	beq.n	8007a84 <sbrk_aligned+0x38>
 8007a74:	1a21      	subs	r1, r4, r0
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 f9d8 	bl	8007e2c <_sbrk_r>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d101      	bne.n	8007a84 <sbrk_aligned+0x38>
 8007a80:	f04f 34ff 	mov.w	r4, #4294967295
 8007a84:	4620      	mov	r0, r4
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	20000448 	.word	0x20000448

08007a8c <_malloc_r>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	1ccd      	adds	r5, r1, #3
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	db01      	blt.n	8007aa8 <_malloc_r+0x1c>
 8007aa4:	42a9      	cmp	r1, r5
 8007aa6:	d905      	bls.n	8007ab4 <_malloc_r+0x28>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	2600      	movs	r6, #0
 8007aae:	4630      	mov	r0, r6
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	4e2e      	ldr	r6, [pc, #184]	; (8007b70 <_malloc_r+0xe4>)
 8007ab6:	f000 fa25 	bl	8007f04 <__malloc_lock>
 8007aba:	6833      	ldr	r3, [r6, #0]
 8007abc:	461c      	mov	r4, r3
 8007abe:	bb34      	cbnz	r4, 8007b0e <_malloc_r+0x82>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ffc2 	bl	8007a4c <sbrk_aligned>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	4604      	mov	r4, r0
 8007acc:	d14d      	bne.n	8007b6a <_malloc_r+0xde>
 8007ace:	6834      	ldr	r4, [r6, #0]
 8007ad0:	4626      	mov	r6, r4
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d140      	bne.n	8007b58 <_malloc_r+0xcc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4638      	mov	r0, r7
 8007adc:	eb04 0803 	add.w	r8, r4, r3
 8007ae0:	f000 f9a4 	bl	8007e2c <_sbrk_r>
 8007ae4:	4580      	cmp	r8, r0
 8007ae6:	d13a      	bne.n	8007b5e <_malloc_r+0xd2>
 8007ae8:	6821      	ldr	r1, [r4, #0]
 8007aea:	3503      	adds	r5, #3
 8007aec:	1a6d      	subs	r5, r5, r1
 8007aee:	f025 0503 	bic.w	r5, r5, #3
 8007af2:	3508      	adds	r5, #8
 8007af4:	2d0c      	cmp	r5, #12
 8007af6:	bf38      	it	cc
 8007af8:	250c      	movcc	r5, #12
 8007afa:	4629      	mov	r1, r5
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff ffa5 	bl	8007a4c <sbrk_aligned>
 8007b02:	3001      	adds	r0, #1
 8007b04:	d02b      	beq.n	8007b5e <_malloc_r+0xd2>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	442b      	add	r3, r5
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	e00e      	b.n	8007b2c <_malloc_r+0xa0>
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	1b52      	subs	r2, r2, r5
 8007b12:	d41e      	bmi.n	8007b52 <_malloc_r+0xc6>
 8007b14:	2a0b      	cmp	r2, #11
 8007b16:	d916      	bls.n	8007b46 <_malloc_r+0xba>
 8007b18:	1961      	adds	r1, r4, r5
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	6025      	str	r5, [r4, #0]
 8007b1e:	bf18      	it	ne
 8007b20:	6059      	strne	r1, [r3, #4]
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	bf08      	it	eq
 8007b26:	6031      	streq	r1, [r6, #0]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f000 f9ed 	bl	8007f10 <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0b6      	beq.n	8007aae <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7b3      	b.n	8007aae <_malloc_r+0x22>
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	bf0c      	ite	eq
 8007b4c:	6032      	streq	r2, [r6, #0]
 8007b4e:	605a      	strne	r2, [r3, #4]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xa0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7b2      	b.n	8007abe <_malloc_r+0x32>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b9      	b.n	8007ad2 <_malloc_r+0x46>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4638      	mov	r0, r7
 8007b64:	f000 f9d4 	bl	8007f10 <__malloc_unlock>
 8007b68:	e7a1      	b.n	8007aae <_malloc_r+0x22>
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	e7de      	b.n	8007b2c <_malloc_r+0xa0>
 8007b6e:	bf00      	nop
 8007b70:	20000444 	.word	0x20000444

08007b74 <__ssputs_r>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	688e      	ldr	r6, [r1, #8]
 8007b7a:	429e      	cmp	r6, r3
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4690      	mov	r8, r2
 8007b82:	461f      	mov	r7, r3
 8007b84:	d838      	bhi.n	8007bf8 <__ssputs_r+0x84>
 8007b86:	898a      	ldrh	r2, [r1, #12]
 8007b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b8c:	d032      	beq.n	8007bf4 <__ssputs_r+0x80>
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	6909      	ldr	r1, [r1, #16]
 8007b92:	eba5 0901 	sub.w	r9, r5, r1
 8007b96:	6965      	ldr	r5, [r4, #20]
 8007b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	444b      	add	r3, r9
 8007ba4:	106d      	asrs	r5, r5, #1
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	bf38      	it	cc
 8007baa:	461d      	movcc	r5, r3
 8007bac:	0553      	lsls	r3, r2, #21
 8007bae:	d531      	bpl.n	8007c14 <__ssputs_r+0xa0>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7ff ff6b 	bl	8007a8c <_malloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	b950      	cbnz	r0, 8007bd0 <__ssputs_r+0x5c>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	f8ca 3000 	str.w	r3, [sl]
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	6921      	ldr	r1, [r4, #16]
 8007bd2:	464a      	mov	r2, r9
 8007bd4:	f7ff fb46 	bl	8007264 <memcpy>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	6126      	str	r6, [r4, #16]
 8007be6:	6165      	str	r5, [r4, #20]
 8007be8:	444e      	add	r6, r9
 8007bea:	eba5 0509 	sub.w	r5, r5, r9
 8007bee:	6026      	str	r6, [r4, #0]
 8007bf0:	60a5      	str	r5, [r4, #8]
 8007bf2:	463e      	mov	r6, r7
 8007bf4:	42be      	cmp	r6, r7
 8007bf6:	d900      	bls.n	8007bfa <__ssputs_r+0x86>
 8007bf8:	463e      	mov	r6, r7
 8007bfa:	6820      	ldr	r0, [r4, #0]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4641      	mov	r1, r8
 8007c00:	f000 f966 	bl	8007ed0 <memmove>
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	1b9b      	subs	r3, r3, r6
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4433      	add	r3, r6
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7db      	b.n	8007bcc <__ssputs_r+0x58>
 8007c14:	462a      	mov	r2, r5
 8007c16:	f000 f981 	bl	8007f1c <_realloc_r>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1e1      	bne.n	8007be4 <__ssputs_r+0x70>
 8007c20:	6921      	ldr	r1, [r4, #16]
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7ff fec6 	bl	80079b4 <_free_r>
 8007c28:	e7c7      	b.n	8007bba <__ssputs_r+0x46>
	...

08007c2c <_svfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4698      	mov	r8, r3
 8007c32:	898b      	ldrh	r3, [r1, #12]
 8007c34:	061b      	lsls	r3, r3, #24
 8007c36:	b09d      	sub	sp, #116	; 0x74
 8007c38:	4607      	mov	r7, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	d50e      	bpl.n	8007c5e <_svfiprintf_r+0x32>
 8007c40:	690b      	ldr	r3, [r1, #16]
 8007c42:	b963      	cbnz	r3, 8007c5e <_svfiprintf_r+0x32>
 8007c44:	2140      	movs	r1, #64	; 0x40
 8007c46:	f7ff ff21 	bl	8007a8c <_malloc_r>
 8007c4a:	6028      	str	r0, [r5, #0]
 8007c4c:	6128      	str	r0, [r5, #16]
 8007c4e:	b920      	cbnz	r0, 8007c5a <_svfiprintf_r+0x2e>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e0d1      	b.n	8007dfe <_svfiprintf_r+0x1d2>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	616b      	str	r3, [r5, #20]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	2320      	movs	r3, #32
 8007c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6c:	2330      	movs	r3, #48	; 0x30
 8007c6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e18 <_svfiprintf_r+0x1ec>
 8007c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c76:	f04f 0901 	mov.w	r9, #1
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	469a      	mov	sl, r3
 8007c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c82:	b10a      	cbz	r2, 8007c88 <_svfiprintf_r+0x5c>
 8007c84:	2a25      	cmp	r2, #37	; 0x25
 8007c86:	d1f9      	bne.n	8007c7c <_svfiprintf_r+0x50>
 8007c88:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8c:	d00b      	beq.n	8007ca6 <_svfiprintf_r+0x7a>
 8007c8e:	465b      	mov	r3, fp
 8007c90:	4622      	mov	r2, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ff6d 	bl	8007b74 <__ssputs_r>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f000 80aa 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca2:	445a      	add	r2, fp
 8007ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80a2 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cba:	f10a 0a01 	add.w	sl, sl, #1
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2205      	movs	r2, #5
 8007ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd0:	4851      	ldr	r0, [pc, #324]	; (8007e18 <_svfiprintf_r+0x1ec>)
 8007cd2:	f7f8 fa85 	bl	80001e0 <memchr>
 8007cd6:	9a04      	ldr	r2, [sp, #16]
 8007cd8:	b9d8      	cbnz	r0, 8007d12 <_svfiprintf_r+0xe6>
 8007cda:	06d0      	lsls	r0, r2, #27
 8007cdc:	bf44      	itt	mi
 8007cde:	2320      	movmi	r3, #32
 8007ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce4:	0711      	lsls	r1, r2, #28
 8007ce6:	bf44      	itt	mi
 8007ce8:	232b      	movmi	r3, #43	; 0x2b
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf4:	d015      	beq.n	8007d22 <_svfiprintf_r+0xf6>
 8007cf6:	9a07      	ldr	r2, [sp, #28]
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f04f 0c0a 	mov.w	ip, #10
 8007d00:	4621      	mov	r1, r4
 8007d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d06:	3b30      	subs	r3, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d94e      	bls.n	8007daa <_svfiprintf_r+0x17e>
 8007d0c:	b1b0      	cbz	r0, 8007d3c <_svfiprintf_r+0x110>
 8007d0e:	9207      	str	r2, [sp, #28]
 8007d10:	e014      	b.n	8007d3c <_svfiprintf_r+0x110>
 8007d12:	eba0 0308 	sub.w	r3, r0, r8
 8007d16:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	46a2      	mov	sl, r4
 8007d20:	e7d2      	b.n	8007cc8 <_svfiprintf_r+0x9c>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	9103      	str	r1, [sp, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbb      	ittet	lt
 8007d2e:	425b      	neglt	r3, r3
 8007d30:	f042 0202 	orrlt.w	r2, r2, #2
 8007d34:	9307      	strge	r3, [sp, #28]
 8007d36:	9307      	strlt	r3, [sp, #28]
 8007d38:	bfb8      	it	lt
 8007d3a:	9204      	strlt	r2, [sp, #16]
 8007d3c:	7823      	ldrb	r3, [r4, #0]
 8007d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d40:	d10c      	bne.n	8007d5c <_svfiprintf_r+0x130>
 8007d42:	7863      	ldrb	r3, [r4, #1]
 8007d44:	2b2a      	cmp	r3, #42	; 0x2a
 8007d46:	d135      	bne.n	8007db4 <_svfiprintf_r+0x188>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9203      	str	r2, [sp, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfb8      	it	lt
 8007d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d58:	3402      	adds	r4, #2
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e28 <_svfiprintf_r+0x1fc>
 8007d60:	7821      	ldrb	r1, [r4, #0]
 8007d62:	2203      	movs	r2, #3
 8007d64:	4650      	mov	r0, sl
 8007d66:	f7f8 fa3b 	bl	80001e0 <memchr>
 8007d6a:	b140      	cbz	r0, 8007d7e <_svfiprintf_r+0x152>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	eba0 000a 	sub.w	r0, r0, sl
 8007d72:	fa03 f000 	lsl.w	r0, r3, r0
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	3401      	adds	r4, #1
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	4826      	ldr	r0, [pc, #152]	; (8007e1c <_svfiprintf_r+0x1f0>)
 8007d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d88:	2206      	movs	r2, #6
 8007d8a:	f7f8 fa29 	bl	80001e0 <memchr>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d038      	beq.n	8007e04 <_svfiprintf_r+0x1d8>
 8007d92:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <_svfiprintf_r+0x1f4>)
 8007d94:	bb1b      	cbnz	r3, 8007dde <_svfiprintf_r+0x1b2>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	3308      	adds	r3, #8
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	4433      	add	r3, r6
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	e767      	b.n	8007c7a <_svfiprintf_r+0x4e>
 8007daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dae:	460c      	mov	r4, r1
 8007db0:	2001      	movs	r0, #1
 8007db2:	e7a5      	b.n	8007d00 <_svfiprintf_r+0xd4>
 8007db4:	2300      	movs	r3, #0
 8007db6:	3401      	adds	r4, #1
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f04f 0c0a 	mov.w	ip, #10
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc6:	3a30      	subs	r2, #48	; 0x30
 8007dc8:	2a09      	cmp	r2, #9
 8007dca:	d903      	bls.n	8007dd4 <_svfiprintf_r+0x1a8>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0c5      	beq.n	8007d5c <_svfiprintf_r+0x130>
 8007dd0:	9105      	str	r1, [sp, #20]
 8007dd2:	e7c3      	b.n	8007d5c <_svfiprintf_r+0x130>
 8007dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd8:	4604      	mov	r4, r0
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7f0      	b.n	8007dc0 <_svfiprintf_r+0x194>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <_svfiprintf_r+0x1f8>)
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7fd ffc9 	bl	8005d80 <_printf_float>
 8007dee:	1c42      	adds	r2, r0, #1
 8007df0:	4606      	mov	r6, r0
 8007df2:	d1d6      	bne.n	8007da2 <_svfiprintf_r+0x176>
 8007df4:	89ab      	ldrh	r3, [r5, #12]
 8007df6:	065b      	lsls	r3, r3, #25
 8007df8:	f53f af2c 	bmi.w	8007c54 <_svfiprintf_r+0x28>
 8007dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dfe:	b01d      	add	sp, #116	; 0x74
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <_svfiprintf_r+0x1f8>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7fe fa5a 	bl	80062c8 <_printf_i>
 8007e14:	e7eb      	b.n	8007dee <_svfiprintf_r+0x1c2>
 8007e16:	bf00      	nop
 8007e18:	08008c94 	.word	0x08008c94
 8007e1c:	08008c9e 	.word	0x08008c9e
 8007e20:	08005d81 	.word	0x08005d81
 8007e24:	08007b75 	.word	0x08007b75
 8007e28:	08008c9a 	.word	0x08008c9a

08007e2c <_sbrk_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d06      	ldr	r5, [pc, #24]	; (8007e48 <_sbrk_r+0x1c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7f9 fba0 	bl	800157c <_sbrk>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_sbrk_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_sbrk_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	2000044c 	.word	0x2000044c

08007e4c <__assert_func>:
 8007e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4e:	4614      	mov	r4, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <__assert_func+0x2c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4605      	mov	r5, r0
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	b14c      	cbz	r4, 8007e70 <__assert_func+0x24>
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <__assert_func+0x30>)
 8007e5e:	9100      	str	r1, [sp, #0]
 8007e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e64:	4906      	ldr	r1, [pc, #24]	; (8007e80 <__assert_func+0x34>)
 8007e66:	462b      	mov	r3, r5
 8007e68:	f000 f80e 	bl	8007e88 <fiprintf>
 8007e6c:	f000 faac 	bl	80083c8 <abort>
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <__assert_func+0x38>)
 8007e72:	461c      	mov	r4, r3
 8007e74:	e7f3      	b.n	8007e5e <__assert_func+0x12>
 8007e76:	bf00      	nop
 8007e78:	2000000c 	.word	0x2000000c
 8007e7c:	08008ca5 	.word	0x08008ca5
 8007e80:	08008cb2 	.word	0x08008cb2
 8007e84:	08008ce0 	.word	0x08008ce0

08007e88 <fiprintf>:
 8007e88:	b40e      	push	{r1, r2, r3}
 8007e8a:	b503      	push	{r0, r1, lr}
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <fiprintf+0x20>)
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	6800      	ldr	r0, [r0, #0]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f000 f897 	bl	8007fcc <_vfiprintf_r>
 8007e9e:	b002      	add	sp, #8
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	4770      	bx	lr
 8007ea8:	2000000c 	.word	0x2000000c

08007eac <__ascii_mbtowc>:
 8007eac:	b082      	sub	sp, #8
 8007eae:	b901      	cbnz	r1, 8007eb2 <__ascii_mbtowc+0x6>
 8007eb0:	a901      	add	r1, sp, #4
 8007eb2:	b142      	cbz	r2, 8007ec6 <__ascii_mbtowc+0x1a>
 8007eb4:	b14b      	cbz	r3, 8007eca <__ascii_mbtowc+0x1e>
 8007eb6:	7813      	ldrb	r3, [r2, #0]
 8007eb8:	600b      	str	r3, [r1, #0]
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	1e10      	subs	r0, r2, #0
 8007ebe:	bf18      	it	ne
 8007ec0:	2001      	movne	r0, #1
 8007ec2:	b002      	add	sp, #8
 8007ec4:	4770      	bx	lr
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	e7fb      	b.n	8007ec2 <__ascii_mbtowc+0x16>
 8007eca:	f06f 0001 	mvn.w	r0, #1
 8007ece:	e7f8      	b.n	8007ec2 <__ascii_mbtowc+0x16>

08007ed0 <memmove>:
 8007ed0:	4288      	cmp	r0, r1
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	eb01 0402 	add.w	r4, r1, r2
 8007ed8:	d902      	bls.n	8007ee0 <memmove+0x10>
 8007eda:	4284      	cmp	r4, r0
 8007edc:	4623      	mov	r3, r4
 8007ede:	d807      	bhi.n	8007ef0 <memmove+0x20>
 8007ee0:	1e43      	subs	r3, r0, #1
 8007ee2:	42a1      	cmp	r1, r4
 8007ee4:	d008      	beq.n	8007ef8 <memmove+0x28>
 8007ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eee:	e7f8      	b.n	8007ee2 <memmove+0x12>
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	d100      	bne.n	8007efa <memmove+0x2a>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f02:	e7f7      	b.n	8007ef4 <memmove+0x24>

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f000 bc1f 	b.w	8008748 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20000450 	.word	0x20000450

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f000 bc1a 	b.w	800874a <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	20000450 	.word	0x20000450

08007f1c <_realloc_r>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	4680      	mov	r8, r0
 8007f22:	4614      	mov	r4, r2
 8007f24:	460e      	mov	r6, r1
 8007f26:	b921      	cbnz	r1, 8007f32 <_realloc_r+0x16>
 8007f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	f7ff bdad 	b.w	8007a8c <_malloc_r>
 8007f32:	b92a      	cbnz	r2, 8007f40 <_realloc_r+0x24>
 8007f34:	f7ff fd3e 	bl	80079b4 <_free_r>
 8007f38:	4625      	mov	r5, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	f000 fc6a 	bl	8008818 <_malloc_usable_size_r>
 8007f44:	4284      	cmp	r4, r0
 8007f46:	4607      	mov	r7, r0
 8007f48:	d802      	bhi.n	8007f50 <_realloc_r+0x34>
 8007f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f4e:	d812      	bhi.n	8007f76 <_realloc_r+0x5a>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7ff fd9a 	bl	8007a8c <_malloc_r>
 8007f58:	4605      	mov	r5, r0
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d0ed      	beq.n	8007f3a <_realloc_r+0x1e>
 8007f5e:	42bc      	cmp	r4, r7
 8007f60:	4622      	mov	r2, r4
 8007f62:	4631      	mov	r1, r6
 8007f64:	bf28      	it	cs
 8007f66:	463a      	movcs	r2, r7
 8007f68:	f7ff f97c 	bl	8007264 <memcpy>
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4640      	mov	r0, r8
 8007f70:	f7ff fd20 	bl	80079b4 <_free_r>
 8007f74:	e7e1      	b.n	8007f3a <_realloc_r+0x1e>
 8007f76:	4635      	mov	r5, r6
 8007f78:	e7df      	b.n	8007f3a <_realloc_r+0x1e>

08007f7a <__sfputc_r>:
 8007f7a:	6893      	ldr	r3, [r2, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	b410      	push	{r4}
 8007f82:	6093      	str	r3, [r2, #8]
 8007f84:	da08      	bge.n	8007f98 <__sfputc_r+0x1e>
 8007f86:	6994      	ldr	r4, [r2, #24]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	db01      	blt.n	8007f90 <__sfputc_r+0x16>
 8007f8c:	290a      	cmp	r1, #10
 8007f8e:	d103      	bne.n	8007f98 <__sfputc_r+0x1e>
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	f000 b94a 	b.w	800822c <__swbuf_r>
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	1c58      	adds	r0, r3, #1
 8007f9c:	6010      	str	r0, [r2, #0]
 8007f9e:	7019      	strb	r1, [r3, #0]
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <__sfputs_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	4606      	mov	r6, r0
 8007fac:	460f      	mov	r7, r1
 8007fae:	4614      	mov	r4, r2
 8007fb0:	18d5      	adds	r5, r2, r3
 8007fb2:	42ac      	cmp	r4, r5
 8007fb4:	d101      	bne.n	8007fba <__sfputs_r+0x12>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e007      	b.n	8007fca <__sfputs_r+0x22>
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ffda 	bl	8007f7a <__sfputc_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d1f3      	bne.n	8007fb2 <__sfputs_r+0xa>
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fcc <_vfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	b09d      	sub	sp, #116	; 0x74
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4698      	mov	r8, r3
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_vfiprintf_r+0x18>
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b90b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x18>
 8007fe0:	f000 fb14 	bl	800860c <__sinit>
 8007fe4:	4b89      	ldr	r3, [pc, #548]	; (800820c <_vfiprintf_r+0x240>)
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	d11b      	bne.n	8008022 <_vfiprintf_r+0x56>
 8007fea:	6875      	ldr	r5, [r6, #4]
 8007fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d405      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffa:	f000 fba5 	bl	8008748 <__retarget_lock_acquire_recursive>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	071b      	lsls	r3, r3, #28
 8008002:	d501      	bpl.n	8008008 <_vfiprintf_r+0x3c>
 8008004:	692b      	ldr	r3, [r5, #16]
 8008006:	b9eb      	cbnz	r3, 8008044 <_vfiprintf_r+0x78>
 8008008:	4629      	mov	r1, r5
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f96e 	bl	80082ec <__swsetup_r>
 8008010:	b1c0      	cbz	r0, 8008044 <_vfiprintf_r+0x78>
 8008012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008014:	07dc      	lsls	r4, r3, #31
 8008016:	d50e      	bpl.n	8008036 <_vfiprintf_r+0x6a>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	; 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <_vfiprintf_r+0x244>)
 8008024:	429d      	cmp	r5, r3
 8008026:	d101      	bne.n	800802c <_vfiprintf_r+0x60>
 8008028:	68b5      	ldr	r5, [r6, #8]
 800802a:	e7df      	b.n	8007fec <_vfiprintf_r+0x20>
 800802c:	4b79      	ldr	r3, [pc, #484]	; (8008214 <_vfiprintf_r+0x248>)
 800802e:	429d      	cmp	r5, r3
 8008030:	bf08      	it	eq
 8008032:	68f5      	ldreq	r5, [r6, #12]
 8008034:	e7da      	b.n	8007fec <_vfiprintf_r+0x20>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4ed      	bmi.n	8008018 <_vfiprintf_r+0x4c>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f000 fb84 	bl	800874a <__retarget_lock_release_recursive>
 8008042:	e7e9      	b.n	8008018 <_vfiprintf_r+0x4c>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	2330      	movs	r3, #48	; 0x30
 8008054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008218 <_vfiprintf_r+0x24c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0xa2>
 800806a:	2a25      	cmp	r2, #37	; 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x96>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xc0>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff94 	bl	8007fa8 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80aa 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	; 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80a2 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ac:	931a      	str	r3, [sp, #104]	; 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4858      	ldr	r0, [pc, #352]	; (8008218 <_vfiprintf_r+0x24c>)
 80080b8:	f7f8 f892 	bl	80001e0 <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x12c>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	; 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	; 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x13c>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	4654      	mov	r4, sl
 80080e0:	2000      	movs	r0, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	; 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94e      	bls.n	8008190 <_vfiprintf_r+0x1c4>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x156>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x156>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	46a2      	mov	sl, r4
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xe2>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	; 0x2e
 8008126:	d10c      	bne.n	8008142 <_vfiprintf_r+0x176>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	; 0x2a
 800812c:	d135      	bne.n	800819a <_vfiprintf_r+0x1ce>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	f04f 33ff 	movlt.w	r3, #4294967295
 800813e:	3402      	adds	r4, #2
 8008140:	9305      	str	r3, [sp, #20]
 8008142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008228 <_vfiprintf_r+0x25c>
 8008146:	7821      	ldrb	r1, [r4, #0]
 8008148:	2203      	movs	r2, #3
 800814a:	4650      	mov	r0, sl
 800814c:	f7f8 f848 	bl	80001e0 <memchr>
 8008150:	b140      	cbz	r0, 8008164 <_vfiprintf_r+0x198>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	eba0 000a 	sub.w	r0, r0, sl
 8008158:	fa03 f000 	lsl.w	r0, r3, r0
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	4303      	orrs	r3, r0
 8008160:	3401      	adds	r4, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	482c      	ldr	r0, [pc, #176]	; (800821c <_vfiprintf_r+0x250>)
 800816a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816e:	2206      	movs	r2, #6
 8008170:	f7f8 f836 	bl	80001e0 <memchr>
 8008174:	2800      	cmp	r0, #0
 8008176:	d03f      	beq.n	80081f8 <_vfiprintf_r+0x22c>
 8008178:	4b29      	ldr	r3, [pc, #164]	; (8008220 <_vfiprintf_r+0x254>)
 800817a:	bb1b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x1f8>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	3307      	adds	r3, #7
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	443b      	add	r3, r7
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	e767      	b.n	8008060 <_vfiprintf_r+0x94>
 8008190:	fb0c 3202 	mla	r2, ip, r2, r3
 8008194:	460c      	mov	r4, r1
 8008196:	2001      	movs	r0, #1
 8008198:	e7a5      	b.n	80080e6 <_vfiprintf_r+0x11a>
 800819a:	2300      	movs	r3, #0
 800819c:	3401      	adds	r4, #1
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0c0a 	mov.w	ip, #10
 80081a6:	4620      	mov	r0, r4
 80081a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d903      	bls.n	80081ba <_vfiprintf_r+0x1ee>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c5      	beq.n	8008142 <_vfiprintf_r+0x176>
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	e7c3      	b.n	8008142 <_vfiprintf_r+0x176>
 80081ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80081be:	4604      	mov	r4, r0
 80081c0:	2301      	movs	r3, #1
 80081c2:	e7f0      	b.n	80081a6 <_vfiprintf_r+0x1da>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	462a      	mov	r2, r5
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <_vfiprintf_r+0x258>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7fd fdd6 	bl	8005d80 <_printf_float>
 80081d4:	4607      	mov	r7, r0
 80081d6:	1c78      	adds	r0, r7, #1
 80081d8:	d1d6      	bne.n	8008188 <_vfiprintf_r+0x1bc>
 80081da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081dc:	07d9      	lsls	r1, r3, #31
 80081de:	d405      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e0:	89ab      	ldrh	r3, [r5, #12]
 80081e2:	059a      	lsls	r2, r3, #22
 80081e4:	d402      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e8:	f000 faaf 	bl	800874a <__retarget_lock_release_recursive>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	065b      	lsls	r3, r3, #25
 80081f0:	f53f af12 	bmi.w	8008018 <_vfiprintf_r+0x4c>
 80081f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f6:	e711      	b.n	800801c <_vfiprintf_r+0x50>
 80081f8:	ab03      	add	r3, sp, #12
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462a      	mov	r2, r5
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_vfiprintf_r+0x258>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	4630      	mov	r0, r6
 8008204:	f7fe f860 	bl	80062c8 <_printf_i>
 8008208:	e7e4      	b.n	80081d4 <_vfiprintf_r+0x208>
 800820a:	bf00      	nop
 800820c:	08008e0c 	.word	0x08008e0c
 8008210:	08008e2c 	.word	0x08008e2c
 8008214:	08008dec 	.word	0x08008dec
 8008218:	08008c94 	.word	0x08008c94
 800821c:	08008c9e 	.word	0x08008c9e
 8008220:	08005d81 	.word	0x08005d81
 8008224:	08007fa9 	.word	0x08007fa9
 8008228:	08008c9a 	.word	0x08008c9a

0800822c <__swbuf_r>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	4614      	mov	r4, r2
 8008232:	4605      	mov	r5, r0
 8008234:	b118      	cbz	r0, 800823e <__swbuf_r+0x12>
 8008236:	6983      	ldr	r3, [r0, #24]
 8008238:	b90b      	cbnz	r3, 800823e <__swbuf_r+0x12>
 800823a:	f000 f9e7 	bl	800860c <__sinit>
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <__swbuf_r+0x98>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d12b      	bne.n	800829c <__swbuf_r+0x70>
 8008244:	686c      	ldr	r4, [r5, #4]
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	d52f      	bpl.n	80082b0 <__swbuf_r+0x84>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b36b      	cbz	r3, 80082b0 <__swbuf_r+0x84>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6963      	ldr	r3, [r4, #20]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	4283      	cmp	r3, r0
 8008260:	4637      	mov	r7, r6
 8008262:	dc04      	bgt.n	800826e <__swbuf_r+0x42>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f93c 	bl	80084e4 <_fflush_r>
 800826c:	bb30      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	701e      	strb	r6, [r3, #0]
 800827c:	6963      	ldr	r3, [r4, #20]
 800827e:	3001      	adds	r0, #1
 8008280:	4283      	cmp	r3, r0
 8008282:	d004      	beq.n	800828e <__swbuf_r+0x62>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	07db      	lsls	r3, r3, #31
 8008288:	d506      	bpl.n	8008298 <__swbuf_r+0x6c>
 800828a:	2e0a      	cmp	r6, #10
 800828c:	d104      	bne.n	8008298 <__swbuf_r+0x6c>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f927 	bl	80084e4 <_fflush_r>
 8008296:	b988      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 8008298:	4638      	mov	r0, r7
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <__swbuf_r+0x9c>)
 800829e:	429c      	cmp	r4, r3
 80082a0:	d101      	bne.n	80082a6 <__swbuf_r+0x7a>
 80082a2:	68ac      	ldr	r4, [r5, #8]
 80082a4:	e7cf      	b.n	8008246 <__swbuf_r+0x1a>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <__swbuf_r+0xa0>)
 80082a8:	429c      	cmp	r4, r3
 80082aa:	bf08      	it	eq
 80082ac:	68ec      	ldreq	r4, [r5, #12]
 80082ae:	e7ca      	b.n	8008246 <__swbuf_r+0x1a>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f81a 	bl	80082ec <__swsetup_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d0cb      	beq.n	8008254 <__swbuf_r+0x28>
 80082bc:	f04f 37ff 	mov.w	r7, #4294967295
 80082c0:	e7ea      	b.n	8008298 <__swbuf_r+0x6c>
 80082c2:	bf00      	nop
 80082c4:	08008e0c 	.word	0x08008e0c
 80082c8:	08008e2c 	.word	0x08008e2c
 80082cc:	08008dec 	.word	0x08008dec

080082d0 <__ascii_wctomb>:
 80082d0:	b149      	cbz	r1, 80082e6 <__ascii_wctomb+0x16>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	bf85      	ittet	hi
 80082d6:	238a      	movhi	r3, #138	; 0x8a
 80082d8:	6003      	strhi	r3, [r0, #0]
 80082da:	700a      	strbls	r2, [r1, #0]
 80082dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082e0:	bf98      	it	ls
 80082e2:	2001      	movls	r0, #1
 80082e4:	4770      	bx	lr
 80082e6:	4608      	mov	r0, r1
 80082e8:	4770      	bx	lr
	...

080082ec <__swsetup_r>:
 80082ec:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <__swsetup_r+0xcc>)
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	b125      	cbz	r5, 8008302 <__swsetup_r+0x16>
 80082f8:	69ab      	ldr	r3, [r5, #24]
 80082fa:	b913      	cbnz	r3, 8008302 <__swsetup_r+0x16>
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f985 	bl	800860c <__sinit>
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <__swsetup_r+0xd0>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d10f      	bne.n	8008328 <__swsetup_r+0x3c>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	d42c      	bmi.n	800836e <__swsetup_r+0x82>
 8008314:	06dd      	lsls	r5, r3, #27
 8008316:	d411      	bmi.n	800833c <__swsetup_r+0x50>
 8008318:	2309      	movs	r3, #9
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e03e      	b.n	80083a6 <__swsetup_r+0xba>
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <__swsetup_r+0xd4>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d101      	bne.n	8008332 <__swsetup_r+0x46>
 800832e:	68ac      	ldr	r4, [r5, #8]
 8008330:	e7eb      	b.n	800830a <__swsetup_r+0x1e>
 8008332:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <__swsetup_r+0xd8>)
 8008334:	429c      	cmp	r4, r3
 8008336:	bf08      	it	eq
 8008338:	68ec      	ldreq	r4, [r5, #12]
 800833a:	e7e6      	b.n	800830a <__swsetup_r+0x1e>
 800833c:	0758      	lsls	r0, r3, #29
 800833e:	d512      	bpl.n	8008366 <__swsetup_r+0x7a>
 8008340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008342:	b141      	cbz	r1, 8008356 <__swsetup_r+0x6a>
 8008344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <__swsetup_r+0x66>
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff fb31 	bl	80079b4 <_free_r>
 8008352:	2300      	movs	r3, #0
 8008354:	6363      	str	r3, [r4, #52]	; 0x34
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0308 	orr.w	r3, r3, #8
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b94b      	cbnz	r3, 8008386 <__swsetup_r+0x9a>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d003      	beq.n	8008386 <__swsetup_r+0x9a>
 800837e:	4621      	mov	r1, r4
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fa09 	bl	8008798 <__smakebuf_r>
 8008386:	89a0      	ldrh	r0, [r4, #12]
 8008388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800838c:	f010 0301 	ands.w	r3, r0, #1
 8008390:	d00a      	beq.n	80083a8 <__swsetup_r+0xbc>
 8008392:	2300      	movs	r3, #0
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	6963      	ldr	r3, [r4, #20]
 8008398:	425b      	negs	r3, r3
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	b943      	cbnz	r3, 80083b2 <__swsetup_r+0xc6>
 80083a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083a4:	d1ba      	bne.n	800831c <__swsetup_r+0x30>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0781      	lsls	r1, r0, #30
 80083aa:	bf58      	it	pl
 80083ac:	6963      	ldrpl	r3, [r4, #20]
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	e7f4      	b.n	800839c <__swsetup_r+0xb0>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7f7      	b.n	80083a6 <__swsetup_r+0xba>
 80083b6:	bf00      	nop
 80083b8:	2000000c 	.word	0x2000000c
 80083bc:	08008e0c 	.word	0x08008e0c
 80083c0:	08008e2c 	.word	0x08008e2c
 80083c4:	08008dec 	.word	0x08008dec

080083c8 <abort>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	2006      	movs	r0, #6
 80083cc:	f000 fa54 	bl	8008878 <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7f9 f85b 	bl	800148c <_exit>
	...

080083d8 <__sflush_r>:
 80083d8:	898a      	ldrh	r2, [r1, #12]
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	0710      	lsls	r0, r2, #28
 80083e2:	460c      	mov	r4, r1
 80083e4:	d458      	bmi.n	8008498 <__sflush_r+0xc0>
 80083e6:	684b      	ldr	r3, [r1, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc05      	bgt.n	80083f8 <__sflush_r+0x20>
 80083ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x20>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0f9      	beq.n	80083f2 <__sflush_r+0x1a>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	d032      	beq.n	8008470 <__sflush_r+0x98>
 800840a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	075a      	lsls	r2, r3, #29
 8008410:	d505      	bpl.n	800841e <__sflush_r+0x46>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008418:	b10b      	cbz	r3, 800841e <__sflush_r+0x46>
 800841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841c:	1ac0      	subs	r0, r0, r3
 800841e:	2300      	movs	r3, #0
 8008420:	4602      	mov	r2, r0
 8008422:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	d106      	bne.n	800843e <__sflush_r+0x66>
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	291d      	cmp	r1, #29
 8008434:	d82c      	bhi.n	8008490 <__sflush_r+0xb8>
 8008436:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <__sflush_r+0x108>)
 8008438:	40ca      	lsrs	r2, r1
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d528      	bpl.n	8008490 <__sflush_r+0xb8>
 800843e:	2200      	movs	r2, #0
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	d504      	bpl.n	8008454 <__sflush_r+0x7c>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	d101      	bne.n	8008452 <__sflush_r+0x7a>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b903      	cbnz	r3, 8008454 <__sflush_r+0x7c>
 8008452:	6560      	str	r0, [r4, #84]	; 0x54
 8008454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008456:	602f      	str	r7, [r5, #0]
 8008458:	2900      	cmp	r1, #0
 800845a:	d0ca      	beq.n	80083f2 <__sflush_r+0x1a>
 800845c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008460:	4299      	cmp	r1, r3
 8008462:	d002      	beq.n	800846a <__sflush_r+0x92>
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff faa5 	bl	80079b4 <_free_r>
 800846a:	2000      	movs	r0, #0
 800846c:	6360      	str	r0, [r4, #52]	; 0x34
 800846e:	e7c1      	b.n	80083f4 <__sflush_r+0x1c>
 8008470:	6a21      	ldr	r1, [r4, #32]
 8008472:	2301      	movs	r3, #1
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	1c41      	adds	r1, r0, #1
 800847a:	d1c7      	bne.n	800840c <__sflush_r+0x34>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c4      	beq.n	800840c <__sflush_r+0x34>
 8008482:	2b1d      	cmp	r3, #29
 8008484:	d001      	beq.n	800848a <__sflush_r+0xb2>
 8008486:	2b16      	cmp	r3, #22
 8008488:	d101      	bne.n	800848e <__sflush_r+0xb6>
 800848a:	602f      	str	r7, [r5, #0]
 800848c:	e7b1      	b.n	80083f2 <__sflush_r+0x1a>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7ad      	b.n	80083f4 <__sflush_r+0x1c>
 8008498:	690f      	ldr	r7, [r1, #16]
 800849a:	2f00      	cmp	r7, #0
 800849c:	d0a9      	beq.n	80083f2 <__sflush_r+0x1a>
 800849e:	0793      	lsls	r3, r2, #30
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	600f      	str	r7, [r1, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2300      	movne	r3, #0
 80084ac:	eba6 0807 	sub.w	r8, r6, r7
 80084b0:	608b      	str	r3, [r1, #8]
 80084b2:	f1b8 0f00 	cmp.w	r8, #0
 80084b6:	dd9c      	ble.n	80083f2 <__sflush_r+0x1a>
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dc06      	bgt.n	80084d6 <__sflush_r+0xfe>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e78e      	b.n	80083f4 <__sflush_r+0x1c>
 80084d6:	4407      	add	r7, r0
 80084d8:	eba8 0800 	sub.w	r8, r8, r0
 80084dc:	e7e9      	b.n	80084b2 <__sflush_r+0xda>
 80084de:	bf00      	nop
 80084e0:	20400001 	.word	0x20400001

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6983      	ldr	r3, [r0, #24]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f000 f887 	bl	800860c <__sinit>
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <_fflush_r+0x6c>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d11b      	bne.n	800853c <_fflush_r+0x58>
 8008504:	686c      	ldr	r4, [r5, #4]
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ef      	beq.n	80084ee <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x3a>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x3a>
 8008518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851a:	f000 f915 	bl	8008748 <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff59 	bl	80083d8 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	4605      	mov	r5, r0
 800852c:	d4e0      	bmi.n	80084f0 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4dd      	bmi.n	80084f0 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f908 	bl	800874a <__retarget_lock_release_recursive>
 800853a:	e7d9      	b.n	80084f0 <_fflush_r+0xc>
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <_fflush_r+0x70>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d101      	bne.n	8008546 <_fflush_r+0x62>
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	e7df      	b.n	8008506 <_fflush_r+0x22>
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_fflush_r+0x74>)
 8008548:	429c      	cmp	r4, r3
 800854a:	bf08      	it	eq
 800854c:	68ec      	ldreq	r4, [r5, #12]
 800854e:	e7da      	b.n	8008506 <_fflush_r+0x22>
 8008550:	08008e0c 	.word	0x08008e0c
 8008554:	08008e2c 	.word	0x08008e2c
 8008558:	08008dec 	.word	0x08008dec

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	; 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	; 0x5c
 800857a:	f7fd fb59 	bl	8005c30 <memset>
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x38>)
 8008580:	6263      	str	r3, [r4, #36]	; 0x24
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x3c>)
 8008584:	62a3      	str	r3, [r4, #40]	; 0x28
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <std+0x40>)
 8008588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <std+0x44>)
 800858c:	6224      	str	r4, [r4, #32]
 800858e:	6323      	str	r3, [r4, #48]	; 0x30
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	080088b1 	.word	0x080088b1
 8008598:	080088d3 	.word	0x080088d3
 800859c:	0800890b 	.word	0x0800890b
 80085a0:	0800892f 	.word	0x0800892f

080085a4 <_cleanup_r>:
 80085a4:	4901      	ldr	r1, [pc, #4]	; (80085ac <_cleanup_r+0x8>)
 80085a6:	f000 b8af 	b.w	8008708 <_fwalk_reent>
 80085aa:	bf00      	nop
 80085ac:	080084e5 	.word	0x080084e5

080085b0 <__sfmoreglue>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	2268      	movs	r2, #104	; 0x68
 80085b4:	1e4d      	subs	r5, r1, #1
 80085b6:	4355      	muls	r5, r2
 80085b8:	460e      	mov	r6, r1
 80085ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085be:	f7ff fa65 	bl	8007a8c <_malloc_r>
 80085c2:	4604      	mov	r4, r0
 80085c4:	b140      	cbz	r0, 80085d8 <__sfmoreglue+0x28>
 80085c6:	2100      	movs	r1, #0
 80085c8:	e9c0 1600 	strd	r1, r6, [r0]
 80085cc:	300c      	adds	r0, #12
 80085ce:	60a0      	str	r0, [r4, #8]
 80085d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d4:	f7fd fb2c 	bl	8005c30 <memset>
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f000 b8b3 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000451 	.word	0x20000451

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f000 b8ae 	b.w	800874a <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	20000451 	.word	0x20000451

080085f4 <__sinit_lock_acquire>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_acquire+0x8>)
 80085f6:	f000 b8a7 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	20000452 	.word	0x20000452

08008600 <__sinit_lock_release>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__sinit_lock_release+0x8>)
 8008602:	f000 b8a2 	b.w	800874a <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	20000452 	.word	0x20000452

0800860c <__sinit>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	f7ff fff0 	bl	80085f4 <__sinit_lock_acquire>
 8008614:	69a3      	ldr	r3, [r4, #24]
 8008616:	b11b      	cbz	r3, 8008620 <__sinit+0x14>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7ff bff0 	b.w	8008600 <__sinit_lock_release>
 8008620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008624:	6523      	str	r3, [r4, #80]	; 0x50
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <__sinit+0x68>)
 8008628:	4a13      	ldr	r2, [pc, #76]	; (8008678 <__sinit+0x6c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	62a2      	str	r2, [r4, #40]	; 0x28
 800862e:	42a3      	cmp	r3, r4
 8008630:	bf04      	itt	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	61a3      	streq	r3, [r4, #24]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f820 	bl	800867c <__sfp>
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f81c 	bl	800867c <__sfp>
 8008644:	60a0      	str	r0, [r4, #8]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f818 	bl	800867c <__sfp>
 800864c:	2200      	movs	r2, #0
 800864e:	60e0      	str	r0, [r4, #12]
 8008650:	2104      	movs	r1, #4
 8008652:	6860      	ldr	r0, [r4, #4]
 8008654:	f7ff ff82 	bl	800855c <std>
 8008658:	68a0      	ldr	r0, [r4, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	2109      	movs	r1, #9
 800865e:	f7ff ff7d 	bl	800855c <std>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	2202      	movs	r2, #2
 8008666:	2112      	movs	r1, #18
 8008668:	f7ff ff78 	bl	800855c <std>
 800866c:	2301      	movs	r3, #1
 800866e:	61a3      	str	r3, [r4, #24]
 8008670:	e7d2      	b.n	8008618 <__sinit+0xc>
 8008672:	bf00      	nop
 8008674:	08008a74 	.word	0x08008a74
 8008678:	080085a5 	.word	0x080085a5

0800867c <__sfp>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4607      	mov	r7, r0
 8008680:	f7ff ffac 	bl	80085dc <__sfp_lock_acquire>
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <__sfp+0x84>)
 8008686:	681e      	ldr	r6, [r3, #0]
 8008688:	69b3      	ldr	r3, [r6, #24]
 800868a:	b913      	cbnz	r3, 8008692 <__sfp+0x16>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffbd 	bl	800860c <__sinit>
 8008692:	3648      	adds	r6, #72	; 0x48
 8008694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	d503      	bpl.n	80086a4 <__sfp+0x28>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	b30b      	cbz	r3, 80086e4 <__sfp+0x68>
 80086a0:	6836      	ldr	r6, [r6, #0]
 80086a2:	e7f7      	b.n	8008694 <__sfp+0x18>
 80086a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a8:	b9d5      	cbnz	r5, 80086e0 <__sfp+0x64>
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <__sfp+0x88>)
 80086ac:	60e3      	str	r3, [r4, #12]
 80086ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b2:	6665      	str	r5, [r4, #100]	; 0x64
 80086b4:	f000 f847 	bl	8008746 <__retarget_lock_init_recursive>
 80086b8:	f7ff ff96 	bl	80085e8 <__sfp_lock_release>
 80086bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086c4:	6025      	str	r5, [r4, #0]
 80086c6:	61a5      	str	r5, [r4, #24]
 80086c8:	2208      	movs	r2, #8
 80086ca:	4629      	mov	r1, r5
 80086cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d0:	f7fd faae 	bl	8005c30 <memset>
 80086d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086dc:	4620      	mov	r0, r4
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	3468      	adds	r4, #104	; 0x68
 80086e2:	e7d9      	b.n	8008698 <__sfp+0x1c>
 80086e4:	2104      	movs	r1, #4
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ff62 	bl	80085b0 <__sfmoreglue>
 80086ec:	4604      	mov	r4, r0
 80086ee:	6030      	str	r0, [r6, #0]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1d5      	bne.n	80086a0 <__sfp+0x24>
 80086f4:	f7ff ff78 	bl	80085e8 <__sfp_lock_release>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	e7ee      	b.n	80086dc <__sfp+0x60>
 80086fe:	bf00      	nop
 8008700:	08008a74 	.word	0x08008a74
 8008704:	ffff0001 	.word	0xffff0001

08008708 <_fwalk_reent>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	4688      	mov	r8, r1
 8008710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008714:	2700      	movs	r7, #0
 8008716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871a:	f1b9 0901 	subs.w	r9, r9, #1
 800871e:	d505      	bpl.n	800872c <_fwalk_reent+0x24>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	2c00      	cmp	r4, #0
 8008724:	d1f7      	bne.n	8008716 <_fwalk_reent+0xe>
 8008726:	4638      	mov	r0, r7
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d907      	bls.n	8008742 <_fwalk_reent+0x3a>
 8008732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008736:	3301      	adds	r3, #1
 8008738:	d003      	beq.n	8008742 <_fwalk_reent+0x3a>
 800873a:	4629      	mov	r1, r5
 800873c:	4630      	mov	r0, r6
 800873e:	47c0      	blx	r8
 8008740:	4307      	orrs	r7, r0
 8008742:	3568      	adds	r5, #104	; 0x68
 8008744:	e7e9      	b.n	800871a <_fwalk_reent+0x12>

08008746 <__retarget_lock_init_recursive>:
 8008746:	4770      	bx	lr

08008748 <__retarget_lock_acquire_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_release_recursive>:
 800874a:	4770      	bx	lr

0800874c <__swhatbuf_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2900      	cmp	r1, #0
 8008756:	b096      	sub	sp, #88	; 0x58
 8008758:	4614      	mov	r4, r2
 800875a:	461d      	mov	r5, r3
 800875c:	da08      	bge.n	8008770 <__swhatbuf_r+0x24>
 800875e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	061a      	lsls	r2, r3, #24
 8008768:	d410      	bmi.n	800878c <__swhatbuf_r+0x40>
 800876a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876e:	e00e      	b.n	800878e <__swhatbuf_r+0x42>
 8008770:	466a      	mov	r2, sp
 8008772:	f000 f903 	bl	800897c <_fstat_r>
 8008776:	2800      	cmp	r0, #0
 8008778:	dbf1      	blt.n	800875e <__swhatbuf_r+0x12>
 800877a:	9a01      	ldr	r2, [sp, #4]
 800877c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008780:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008784:	425a      	negs	r2, r3
 8008786:	415a      	adcs	r2, r3
 8008788:	602a      	str	r2, [r5, #0]
 800878a:	e7ee      	b.n	800876a <__swhatbuf_r+0x1e>
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	2000      	movs	r0, #0
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	b016      	add	sp, #88	; 0x58
 8008794:	bd70      	pop	{r4, r5, r6, pc}
	...

08008798 <__smakebuf_r>:
 8008798:	898b      	ldrh	r3, [r1, #12]
 800879a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800879c:	079d      	lsls	r5, r3, #30
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	d507      	bpl.n	80087b4 <__smakebuf_r+0x1c>
 80087a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2301      	movs	r3, #1
 80087ae:	6163      	str	r3, [r4, #20]
 80087b0:	b002      	add	sp, #8
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	ab01      	add	r3, sp, #4
 80087b6:	466a      	mov	r2, sp
 80087b8:	f7ff ffc8 	bl	800874c <__swhatbuf_r>
 80087bc:	9900      	ldr	r1, [sp, #0]
 80087be:	4605      	mov	r5, r0
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7ff f963 	bl	8007a8c <_malloc_r>
 80087c6:	b948      	cbnz	r0, 80087dc <__smakebuf_r+0x44>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d4ef      	bmi.n	80087b0 <__smakebuf_r+0x18>
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	e7e3      	b.n	80087a4 <__smakebuf_r+0xc>
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <__smakebuf_r+0x7c>)
 80087de:	62b3      	str	r3, [r6, #40]	; 0x28
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	9b00      	ldr	r3, [sp, #0]
 80087ec:	6163      	str	r3, [r4, #20]
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	6120      	str	r0, [r4, #16]
 80087f2:	b15b      	cbz	r3, 800880c <__smakebuf_r+0x74>
 80087f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f8d1 	bl	80089a0 <_isatty_r>
 80087fe:	b128      	cbz	r0, 800880c <__smakebuf_r+0x74>
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	89a0      	ldrh	r0, [r4, #12]
 800880e:	4305      	orrs	r5, r0
 8008810:	81a5      	strh	r5, [r4, #12]
 8008812:	e7cd      	b.n	80087b0 <__smakebuf_r+0x18>
 8008814:	080085a5 	.word	0x080085a5

08008818 <_malloc_usable_size_r>:
 8008818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881c:	1f18      	subs	r0, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfbc      	itt	lt
 8008822:	580b      	ldrlt	r3, [r1, r0]
 8008824:	18c0      	addlt	r0, r0, r3
 8008826:	4770      	bx	lr

08008828 <_raise_r>:
 8008828:	291f      	cmp	r1, #31
 800882a:	b538      	push	{r3, r4, r5, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	d904      	bls.n	800883c <_raise_r+0x14>
 8008832:	2316      	movs	r3, #22
 8008834:	6003      	str	r3, [r0, #0]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883e:	b112      	cbz	r2, 8008846 <_raise_r+0x1e>
 8008840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008844:	b94b      	cbnz	r3, 800885a <_raise_r+0x32>
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f830 	bl	80088ac <_getpid_r>
 800884c:	462a      	mov	r2, r5
 800884e:	4601      	mov	r1, r0
 8008850:	4620      	mov	r0, r4
 8008852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008856:	f000 b817 	b.w	8008888 <_kill_r>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d00a      	beq.n	8008874 <_raise_r+0x4c>
 800885e:	1c59      	adds	r1, r3, #1
 8008860:	d103      	bne.n	800886a <_raise_r+0x42>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	2001      	movs	r0, #1
 8008868:	e7e7      	b.n	800883a <_raise_r+0x12>
 800886a:	2400      	movs	r4, #0
 800886c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008870:	4628      	mov	r0, r5
 8008872:	4798      	blx	r3
 8008874:	2000      	movs	r0, #0
 8008876:	e7e0      	b.n	800883a <_raise_r+0x12>

08008878 <raise>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <raise+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfd3 	b.w	8008828 <_raise_r>
 8008882:	bf00      	nop
 8008884:	2000000c 	.word	0x2000000c

08008888 <_kill_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_kill_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f8 fde9 	bl	800146c <_kill>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_kill_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_kill_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	2000044c 	.word	0x2000044c

080088ac <_getpid_r>:
 80088ac:	f7f8 bdd6 	b.w	800145c <_getpid>

080088b0 <__sread>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	f000 f894 	bl	80089e4 <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	bfab      	itete	ge
 80088c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088c2:	89a3      	ldrhlt	r3, [r4, #12]
 80088c4:	181b      	addge	r3, r3, r0
 80088c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ca:	bfac      	ite	ge
 80088cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ce:	81a3      	strhlt	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f868 	bl	80089c0 <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 b817 	b.w	8008938 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f000 f855 	bl	80089c0 <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	; 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 b813 	b.w	800895c <_close_r>
	...

08008938 <_write_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	; (8008958 <_write_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f8 fdc7 	bl	80014da <_write>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_write_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_write_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	2000044c 	.word	0x2000044c

0800895c <_close_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	; (8008978 <_close_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f8 fdd3 	bl	8001512 <_close>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_close_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_close_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	2000044c 	.word	0x2000044c

0800897c <_fstat_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	; (800899c <_fstat_r+0x20>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	4611      	mov	r1, r2
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	f7f8 fdce 	bl	800152a <_fstat>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d102      	bne.n	8008998 <_fstat_r+0x1c>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	b103      	cbz	r3, 8008998 <_fstat_r+0x1c>
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	2000044c 	.word	0x2000044c

080089a0 <_isatty_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d06      	ldr	r5, [pc, #24]	; (80089bc <_isatty_r+0x1c>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	f7f8 fdcd 	bl	800154a <_isatty>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_isatty_r+0x1a>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_isatty_r+0x1a>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	2000044c 	.word	0x2000044c

080089c0 <_lseek_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d07      	ldr	r5, [pc, #28]	; (80089e0 <_lseek_r+0x20>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f8 fdc6 	bl	8001560 <_lseek>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_lseek_r+0x1e>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_lseek_r+0x1e>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	2000044c 	.word	0x2000044c

080089e4 <_read_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	; (8008a04 <_read_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f8 fd54 	bl	80014a0 <_read>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_read_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_read_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	2000044c 	.word	0x2000044c

08008a08 <_init>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr

08008a14 <_fini>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr
